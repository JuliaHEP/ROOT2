// this file was auto-generated by wrapit v1.3.1-dirty
#include "Wrapper.h"

#include "jlROOT2.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<TROOT> : std::false_type { };
  template<> struct DefaultConstructible<TROOT> : std::false_type { };
}

// Class generating the wrapper for type TROOT
// signature to use in the veto file: TROOT
struct JlTROOT: public Wrapper {

  JlTROOT(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TROOT (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:94:7
    jlcxx::TypeWrapper<TROOT>  t = jlModule.add_type<TROOT>("TROOT");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TROOT>>(new jlcxx::TypeWrapper<TROOT>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;

    DEBUG_MSG("Adding wrapper for void TROOT::AddClass(TClass *) (" __HERE__ ")");
    // signature to use in the veto list: void TROOT::AddClass(TClass *)
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:191:22
    t.method("AddClass", static_cast<void (TROOT::*)(TClass *) >(&TROOT::AddClass));

    DEBUG_MSG("Adding wrapper for void TROOT::Append(TObject *, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TROOT::Append(TObject *, Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:193:22
    t.method("Append", static_cast<void (TROOT::*)(TObject *, Bool_t) >(&TROOT::Append));
    t.method("Append", [](TROOT& a, TObject * arg0)->void { a.Append(arg0); });
    t.method("Append", [](TROOT* a, TObject * arg0)->void { a->Append(arg0); });

    DEBUG_MSG("Adding wrapper for Bool_t TROOT::ClassSaved(TClass *) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TROOT::ClassSaved(TClass *)
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:195:22
    t.method("ClassSaved", static_cast<Bool_t (TROOT::*)(TClass *) >(&TROOT::ClassSaved));

    DEBUG_MSG("Adding wrapper for void TROOT::CloseFiles() (" __HERE__ ")");
    // signature to use in the veto list: void TROOT::CloseFiles()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:196:22
    t.method("CloseFiles", static_cast<void (TROOT::*)() >(&TROOT::CloseFiles));

    DEBUG_MSG("Adding wrapper for void TROOT::EndOfProcessCleanups() (" __HERE__ ")");
    // signature to use in the veto list: void TROOT::EndOfProcessCleanups()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:197:22
    t.method("EndOfProcessCleanups", static_cast<void (TROOT::*)() >(&TROOT::EndOfProcessCleanups));

    DEBUG_MSG("Adding wrapper for TObject * TROOT::FindObject(const char *) (" __HERE__ ")");
    // signature to use in the veto list: TObject * TROOT::FindObject(const char *)
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:198:22
    t.method("FindObject", static_cast<TObject * (TROOT::*)(const char *)  const>(&TROOT::FindObject));

    DEBUG_MSG("Adding wrapper for TObject * TROOT::FindObject(const TObject *) (" __HERE__ ")");
    // signature to use in the veto list: TObject * TROOT::FindObject(const TObject *)
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:199:22
    t.method("FindObject", static_cast<TObject * (TROOT::*)(const TObject *)  const>(&TROOT::FindObject));

    DEBUG_MSG("Adding wrapper for TObject * TROOT::FindObjectAny(const char *) (" __HERE__ ")");
    // signature to use in the veto list: TObject * TROOT::FindObjectAny(const char *)
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:200:22
    t.method("FindObjectAny", static_cast<TObject * (TROOT::*)(const char *)  const>(&TROOT::FindObjectAny));

    DEBUG_MSG("Adding wrapper for TObject * TROOT::FindObjectAnyFile(const char *) (" __HERE__ ")");
    // signature to use in the veto list: TObject * TROOT::FindObjectAnyFile(const char *)
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:201:22
    t.method("FindObjectAnyFile", static_cast<TObject * (TROOT::*)(const char *)  const>(&TROOT::FindObjectAnyFile));

    DEBUG_MSG("Adding wrapper for TObject * TROOT::FindSpecialObject(const char *, void *&) (" __HERE__ ")");
    // signature to use in the veto list: TObject * TROOT::FindSpecialObject(const char *, void *&)
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:202:22
    t.method("FindSpecialObject", static_cast<TObject * (TROOT::*)(const char *, void *&) >(&TROOT::FindSpecialObject));

    DEBUG_MSG("Adding wrapper for const char * TROOT::FindObjectClassName(const char *) (" __HERE__ ")");
    // signature to use in the veto list: const char * TROOT::FindObjectClassName(const char *)
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:203:22
    t.method("FindObjectClassName", [](TROOT const& a, const char * arg0) { return (std::string)a.FindObjectClassName(arg0); });
    t.method("FindObjectClassName", [](TROOT const* a, const char * arg0) { return (std::string)a->FindObjectClassName(arg0); });

    DEBUG_MSG("Adding wrapper for const char * TROOT::FindObjectPathName(const TObject *) (" __HERE__ ")");
    // signature to use in the veto list: const char * TROOT::FindObjectPathName(const TObject *)
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:204:22
    t.method("FindObjectPathName", [](TROOT const& a, const TObject * arg0) { return (std::string)a.FindObjectPathName(arg0); });
    t.method("FindObjectPathName", [](TROOT const* a, const TObject * arg0) { return (std::string)a->FindObjectPathName(arg0); });

    DEBUG_MSG("Adding wrapper for TClass * TROOT::FindSTLClass(const char *, Bool_t, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: TClass * TROOT::FindSTLClass(const char *, Bool_t, Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:205:22
    t.method("FindSTLClass", static_cast<TClass * (TROOT::*)(const char *, Bool_t, Bool_t)  const>(&TROOT::FindSTLClass));
    t.method("FindSTLClass", [](TROOT const& a, const char * arg0, Bool_t arg1)->TClass * { return a.FindSTLClass(arg0, arg1); });
    t.method("FindSTLClass", [](TROOT const* a, const char * arg0, Bool_t arg1)->TClass * { return a->FindSTLClass(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void TROOT::ForceStyle(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TROOT::ForceStyle(Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:206:22
    t.method("ForceStyle", static_cast<void (TROOT::*)(Bool_t) >(&TROOT::ForceStyle));
    t.method("ForceStyle", [](TROOT& a)->void { a.ForceStyle(); });
    t.method("ForceStyle", [](TROOT* a)->void { a->ForceStyle(); });

    DEBUG_MSG("Adding wrapper for Bool_t TROOT::FromPopUp() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TROOT::FromPopUp()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:207:22
    t.method("FromPopUp", static_cast<Bool_t (TROOT::*)()  const>(&TROOT::FromPopUp));

    DEBUG_MSG("Adding wrapper for TApplication * TROOT::GetApplication() (" __HERE__ ")");
    // signature to use in the veto list: TApplication * TROOT::GetApplication()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:209:22
    t.method("GetApplication", static_cast<TApplication * (TROOT::*)()  const>(&TROOT::GetApplication));

    DEBUG_MSG("Adding wrapper for TInterpreter * TROOT::GetInterpreter() (" __HERE__ ")");
    // signature to use in the veto list: TInterpreter * TROOT::GetInterpreter()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:210:22
    t.method("GetInterpreter", static_cast<TInterpreter * (TROOT::*)()  const>(&TROOT::GetInterpreter));

    DEBUG_MSG("Adding wrapper for TClass * TROOT::GetClass(const char *, Bool_t, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: TClass * TROOT::GetClass(const char *, Bool_t, Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:211:22
    t.method("GetClass", static_cast<TClass * (TROOT::*)(const char *, Bool_t, Bool_t)  const>(&TROOT::GetClass));
    t.method("GetClass", [](TROOT const& a, const char * arg0)->TClass * { return a.GetClass(arg0); });
    t.method("GetClass", [](TROOT const& a, const char * arg0, Bool_t arg1)->TClass * { return a.GetClass(arg0, arg1); });
    t.method("GetClass", [](TROOT const* a, const char * arg0)->TClass * { return a->GetClass(arg0); });
    t.method("GetClass", [](TROOT const* a, const char * arg0, Bool_t arg1)->TClass * { return a->GetClass(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for TClass * TROOT::GetClass(const std::type_info &, Bool_t, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: TClass * TROOT::GetClass(const std::type_info &, Bool_t, Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:212:22
    t.method("GetClass", static_cast<TClass * (TROOT::*)(const std::type_info &, Bool_t, Bool_t)  const>(&TROOT::GetClass));
    t.method("GetClass", [](TROOT const& a, const std::type_info & arg0)->TClass * { return a.GetClass(arg0); });
    t.method("GetClass", [](TROOT const& a, const std::type_info & arg0, Bool_t arg1)->TClass * { return a.GetClass(arg0, arg1); });
    t.method("GetClass", [](TROOT const* a, const std::type_info & arg0)->TClass * { return a->GetClass(arg0); });
    t.method("GetClass", [](TROOT const* a, const std::type_info & arg0, Bool_t arg1)->TClass * { return a->GetClass(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for const char * TROOT::GetConfigOptions() (" __HERE__ ")");
    // signature to use in the veto list: const char * TROOT::GetConfigOptions()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:214:22
    t.method("GetConfigOptions", [](TROOT const& a) { return (std::string)a.GetConfigOptions(); });
    t.method("GetConfigOptions", [](TROOT const* a) { return (std::string)a->GetConfigOptions(); });

    DEBUG_MSG("Adding wrapper for const char * TROOT::GetConfigFeatures() (" __HERE__ ")");
    // signature to use in the veto list: const char * TROOT::GetConfigFeatures()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:215:22
    t.method("GetConfigFeatures", [](TROOT const& a) { return (std::string)a.GetConfigFeatures(); });
    t.method("GetConfigFeatures", [](TROOT const* a) { return (std::string)a->GetConfigFeatures(); });

    DEBUG_MSG("Adding wrapper for const char * TROOT::GetCutClassName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TROOT::GetCutClassName()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:216:22
    t.method("GetCutClassName", [](TROOT const& a) { return (std::string)a.GetCutClassName(); });
    t.method("GetCutClassName", [](TROOT const* a) { return (std::string)a->GetCutClassName(); });

    DEBUG_MSG("Adding wrapper for const char * TROOT::GetDefCanvasName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TROOT::GetDefCanvasName()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:217:22
    t.method("GetDefCanvasName", [](TROOT const& a) { return (std::string)a.GetDefCanvasName(); });
    t.method("GetDefCanvasName", [](TROOT const* a) { return (std::string)a->GetDefCanvasName(); });

    DEBUG_MSG("Adding wrapper for Bool_t TROOT::GetEditHistograms() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TROOT::GetEditHistograms()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:218:22
    t.method("GetEditHistograms", static_cast<Bool_t (TROOT::*)()  const>(&TROOT::GetEditHistograms));

    DEBUG_MSG("Adding wrapper for Int_t TROOT::GetEditorMode() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TROOT::GetEditorMode()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:219:22
    t.method("GetEditorMode", static_cast<Int_t (TROOT::*)()  const>(&TROOT::GetEditorMode));

    DEBUG_MSG("Adding wrapper for Bool_t TROOT::GetForceStyle() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TROOT::GetForceStyle()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:220:22
    t.method("GetForceStyle", static_cast<Bool_t (TROOT::*)()  const>(&TROOT::GetForceStyle));

    DEBUG_MSG("Adding wrapper for Int_t TROOT::GetBuiltDate() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TROOT::GetBuiltDate()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:221:22
    t.method("GetBuiltDate", static_cast<Int_t (TROOT::*)()  const>(&TROOT::GetBuiltDate));

    DEBUG_MSG("Adding wrapper for Int_t TROOT::GetBuiltTime() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TROOT::GetBuiltTime()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:222:22
    t.method("GetBuiltTime", static_cast<Int_t (TROOT::*)()  const>(&TROOT::GetBuiltTime));

    DEBUG_MSG("Adding wrapper for const char * TROOT::GetGitCommit() (" __HERE__ ")");
    // signature to use in the veto list: const char * TROOT::GetGitCommit()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:223:22
    t.method("GetGitCommit", [](TROOT const& a) { return (std::string)a.GetGitCommit(); });
    t.method("GetGitCommit", [](TROOT const* a) { return (std::string)a->GetGitCommit(); });

    DEBUG_MSG("Adding wrapper for const char * TROOT::GetGitBranch() (" __HERE__ ")");
    // signature to use in the veto list: const char * TROOT::GetGitBranch()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:224:22
    t.method("GetGitBranch", [](TROOT const& a) { return (std::string)a.GetGitBranch(); });
    t.method("GetGitBranch", [](TROOT const* a) { return (std::string)a->GetGitBranch(); });

    DEBUG_MSG("Adding wrapper for const char * TROOT::GetGitDate() (" __HERE__ ")");
    // signature to use in the veto list: const char * TROOT::GetGitDate()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:225:22
    t.method("GetGitDate", [](TROOT& a) { return (std::string)a.GetGitDate(); });
    t.method("GetGitDate", [](TROOT* a) { return (std::string)a->GetGitDate(); });

    DEBUG_MSG("Adding wrapper for Int_t TROOT::GetVersionDate() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TROOT::GetVersionDate()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:226:22
    t.method("GetVersionDate", static_cast<Int_t (TROOT::*)()  const>(&TROOT::GetVersionDate));

    DEBUG_MSG("Adding wrapper for Int_t TROOT::GetVersionTime() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TROOT::GetVersionTime()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:227:22
    t.method("GetVersionTime", static_cast<Int_t (TROOT::*)()  const>(&TROOT::GetVersionTime));

    DEBUG_MSG("Adding wrapper for Int_t TROOT::GetVersionInt() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TROOT::GetVersionInt()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:228:22
    t.method("GetVersionInt", static_cast<Int_t (TROOT::*)()  const>(&TROOT::GetVersionInt));

    DEBUG_MSG("Adding wrapper for Int_t TROOT::GetVersionCode() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TROOT::GetVersionCode()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:229:22
    t.method("GetVersionCode", static_cast<Int_t (TROOT::*)()  const>(&TROOT::GetVersionCode));

    DEBUG_MSG("Adding wrapper for const char * TROOT::GetVersion() (" __HERE__ ")");
    // signature to use in the veto list: const char * TROOT::GetVersion()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:230:22
    t.method("GetVersion", [](TROOT const& a) { return (std::string)a.GetVersion(); });
    t.method("GetVersion", [](TROOT const* a) { return (std::string)a->GetVersion(); });

    DEBUG_MSG("Adding wrapper for TCollection * TROOT::GetListOfClasses() (" __HERE__ ")");
    // signature to use in the veto list: TCollection * TROOT::GetListOfClasses()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:231:22
    t.method("GetListOfClasses", static_cast<TCollection * (TROOT::*)()  const>(&TROOT::GetListOfClasses));

    DEBUG_MSG("Adding wrapper for TSeqCollection * TROOT::GetListOfColors() (" __HERE__ ")");
    // signature to use in the veto list: TSeqCollection * TROOT::GetListOfColors()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:232:22
    t.method("GetListOfColors", static_cast<TSeqCollection * (TROOT::*)()  const>(&TROOT::GetListOfColors));

    DEBUG_MSG("Adding wrapper for TCollection * TROOT::GetListOfTypes(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: TCollection * TROOT::GetListOfTypes(Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:233:22
    t.method("GetListOfTypes", static_cast<TCollection * (TROOT::*)(Bool_t) >(&TROOT::GetListOfTypes));
    t.method("GetListOfTypes", [](TROOT& a)->TCollection * { return a.GetListOfTypes(); });
    t.method("GetListOfTypes", [](TROOT* a)->TCollection * { return a->GetListOfTypes(); });

    DEBUG_MSG("Adding wrapper for TCollection * TROOT::GetListOfGlobals(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: TCollection * TROOT::GetListOfGlobals(Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:234:22
    t.method("GetListOfGlobals", static_cast<TCollection * (TROOT::*)(Bool_t) >(&TROOT::GetListOfGlobals));
    t.method("GetListOfGlobals", [](TROOT& a)->TCollection * { return a.GetListOfGlobals(); });
    t.method("GetListOfGlobals", [](TROOT* a)->TCollection * { return a->GetListOfGlobals(); });

    DEBUG_MSG("Adding wrapper for TCollection * TROOT::GetListOfGlobalFunctions(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: TCollection * TROOT::GetListOfGlobalFunctions(Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:235:22
    t.method("GetListOfGlobalFunctions", static_cast<TCollection * (TROOT::*)(Bool_t) >(&TROOT::GetListOfGlobalFunctions));
    t.method("GetListOfGlobalFunctions", [](TROOT& a)->TCollection * { return a.GetListOfGlobalFunctions(); });
    t.method("GetListOfGlobalFunctions", [](TROOT* a)->TCollection * { return a->GetListOfGlobalFunctions(); });

    DEBUG_MSG("Adding wrapper for TSeqCollection * TROOT::GetListOfClosedObjects() (" __HERE__ ")");
    // signature to use in the veto list: TSeqCollection * TROOT::GetListOfClosedObjects()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:236:22
    t.method("GetListOfClosedObjects", static_cast<TSeqCollection * (TROOT::*)()  const>(&TROOT::GetListOfClosedObjects));

    DEBUG_MSG("Adding wrapper for TSeqCollection * TROOT::GetListOfFiles() (" __HERE__ ")");
    // signature to use in the veto list: TSeqCollection * TROOT::GetListOfFiles()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:237:22
    t.method("GetListOfFiles", static_cast<TSeqCollection * (TROOT::*)()  const>(&TROOT::GetListOfFiles));

    DEBUG_MSG("Adding wrapper for TSeqCollection * TROOT::GetListOfMappedFiles() (" __HERE__ ")");
    // signature to use in the veto list: TSeqCollection * TROOT::GetListOfMappedFiles()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:238:22
    t.method("GetListOfMappedFiles", static_cast<TSeqCollection * (TROOT::*)()  const>(&TROOT::GetListOfMappedFiles));

    DEBUG_MSG("Adding wrapper for TSeqCollection * TROOT::GetListOfSockets() (" __HERE__ ")");
    // signature to use in the veto list: TSeqCollection * TROOT::GetListOfSockets()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:239:22
    t.method("GetListOfSockets", static_cast<TSeqCollection * (TROOT::*)()  const>(&TROOT::GetListOfSockets));

    DEBUG_MSG("Adding wrapper for TSeqCollection * TROOT::GetListOfCanvases() (" __HERE__ ")");
    // signature to use in the veto list: TSeqCollection * TROOT::GetListOfCanvases()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:240:22
    t.method("GetListOfCanvases", static_cast<TSeqCollection * (TROOT::*)()  const>(&TROOT::GetListOfCanvases));

    DEBUG_MSG("Adding wrapper for TSeqCollection * TROOT::GetListOfStyles() (" __HERE__ ")");
    // signature to use in the veto list: TSeqCollection * TROOT::GetListOfStyles()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:241:22
    t.method("GetListOfStyles", static_cast<TSeqCollection * (TROOT::*)()  const>(&TROOT::GetListOfStyles));

    DEBUG_MSG("Adding wrapper for TCollection * TROOT::GetListOfFunctions() (" __HERE__ ")");
    // signature to use in the veto list: TCollection * TROOT::GetListOfFunctions()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:242:22
    t.method("GetListOfFunctions", static_cast<TCollection * (TROOT::*)()  const>(&TROOT::GetListOfFunctions));

    DEBUG_MSG("Adding wrapper for TCollection * TROOT::GetListOfFunctionOverloads(const char *) (" __HERE__ ")");
    // signature to use in the veto list: TCollection * TROOT::GetListOfFunctionOverloads(const char *)
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:243:22
    t.method("GetListOfFunctionOverloads", static_cast<TCollection * (TROOT::*)(const char *)  const>(&TROOT::GetListOfFunctionOverloads));

    DEBUG_MSG("Adding wrapper for TSeqCollection * TROOT::GetListOfGeometries() (" __HERE__ ")");
    // signature to use in the veto list: TSeqCollection * TROOT::GetListOfGeometries()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:244:22
    t.method("GetListOfGeometries", static_cast<TSeqCollection * (TROOT::*)()  const>(&TROOT::GetListOfGeometries));

    DEBUG_MSG("Adding wrapper for TSeqCollection * TROOT::GetListOfBrowsers() (" __HERE__ ")");
    // signature to use in the veto list: TSeqCollection * TROOT::GetListOfBrowsers()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:245:22
    t.method("GetListOfBrowsers", static_cast<TSeqCollection * (TROOT::*)()  const>(&TROOT::GetListOfBrowsers));

    DEBUG_MSG("Adding wrapper for TSeqCollection * TROOT::GetListOfSpecials() (" __HERE__ ")");
    // signature to use in the veto list: TSeqCollection * TROOT::GetListOfSpecials()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:246:22
    t.method("GetListOfSpecials", static_cast<TSeqCollection * (TROOT::*)()  const>(&TROOT::GetListOfSpecials));

    DEBUG_MSG("Adding wrapper for TSeqCollection * TROOT::GetListOfTasks() (" __HERE__ ")");
    // signature to use in the veto list: TSeqCollection * TROOT::GetListOfTasks()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:247:22
    t.method("GetListOfTasks", static_cast<TSeqCollection * (TROOT::*)()  const>(&TROOT::GetListOfTasks));

    DEBUG_MSG("Adding wrapper for TSeqCollection * TROOT::GetListOfCleanups() (" __HERE__ ")");
    // signature to use in the veto list: TSeqCollection * TROOT::GetListOfCleanups()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:248:22
    t.method("GetListOfCleanups", static_cast<TSeqCollection * (TROOT::*)()  const>(&TROOT::GetListOfCleanups));

    DEBUG_MSG("Adding wrapper for TSeqCollection * TROOT::GetListOfStreamerInfo() (" __HERE__ ")");
    // signature to use in the veto list: TSeqCollection * TROOT::GetListOfStreamerInfo()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:249:22
    t.method("GetListOfStreamerInfo", static_cast<TSeqCollection * (TROOT::*)()  const>(&TROOT::GetListOfStreamerInfo));

    DEBUG_MSG("Adding wrapper for TSeqCollection * TROOT::GetListOfMessageHandlers() (" __HERE__ ")");
    // signature to use in the veto list: TSeqCollection * TROOT::GetListOfMessageHandlers()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:250:22
    t.method("GetListOfMessageHandlers", static_cast<TSeqCollection * (TROOT::*)()  const>(&TROOT::GetListOfMessageHandlers));

    DEBUG_MSG("Adding wrapper for TCollection * TROOT::GetListOfClassGenerators() (" __HERE__ ")");
    // signature to use in the veto list: TCollection * TROOT::GetListOfClassGenerators()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:251:22
    t.method("GetListOfClassGenerators", static_cast<TCollection * (TROOT::*)()  const>(&TROOT::GetListOfClassGenerators));

    DEBUG_MSG("Adding wrapper for TSeqCollection * TROOT::GetListOfSecContexts() (" __HERE__ ")");
    // signature to use in the veto list: TSeqCollection * TROOT::GetListOfSecContexts()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:252:22
    t.method("GetListOfSecContexts", static_cast<TSeqCollection * (TROOT::*)()  const>(&TROOT::GetListOfSecContexts));

    DEBUG_MSG("Adding wrapper for TSeqCollection * TROOT::GetListOfProofs() (" __HERE__ ")");
    // signature to use in the veto list: TSeqCollection * TROOT::GetListOfProofs()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:253:22
    t.method("GetListOfProofs", static_cast<TSeqCollection * (TROOT::*)()  const>(&TROOT::GetListOfProofs));

    DEBUG_MSG("Adding wrapper for TSeqCollection * TROOT::GetClipboard() (" __HERE__ ")");
    // signature to use in the veto list: TSeqCollection * TROOT::GetClipboard()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:254:22
    t.method("GetClipboard", static_cast<TSeqCollection * (TROOT::*)()  const>(&TROOT::GetClipboard));

    DEBUG_MSG("Adding wrapper for TSeqCollection * TROOT::GetListOfDataSets() (" __HERE__ ")");
    // signature to use in the veto list: TSeqCollection * TROOT::GetListOfDataSets()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:255:22
    t.method("GetListOfDataSets", static_cast<TSeqCollection * (TROOT::*)()  const>(&TROOT::GetListOfDataSets));

    DEBUG_MSG("Adding wrapper for TCollection * TROOT::GetListOfEnums(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: TCollection * TROOT::GetListOfEnums(Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:256:22
    t.method("GetListOfEnums", static_cast<TCollection * (TROOT::*)(Bool_t) >(&TROOT::GetListOfEnums));
    t.method("GetListOfEnums", [](TROOT& a)->TCollection * { return a.GetListOfEnums(); });
    t.method("GetListOfEnums", [](TROOT* a)->TCollection * { return a->GetListOfEnums(); });

    DEBUG_MSG("Adding wrapper for TCollection * TROOT::GetListOfFunctionTemplates() (" __HERE__ ")");
    // signature to use in the veto list: TCollection * TROOT::GetListOfFunctionTemplates()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:257:22
    t.method("GetListOfFunctionTemplates", static_cast<TCollection * (TROOT::*)() >(&TROOT::GetListOfFunctionTemplates));

    DEBUG_MSG("Adding wrapper for TList * TROOT::GetListOfBrowsables() (" __HERE__ ")");
    // signature to use in the veto list: TList * TROOT::GetListOfBrowsables()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:258:22
    t.method("GetListOfBrowsables", static_cast<TList * (TROOT::*)()  const>(&TROOT::GetListOfBrowsables));

    DEBUG_MSG("Adding wrapper for TDataType * TROOT::GetType(const char *, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: TDataType * TROOT::GetType(const char *, Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:259:22
    t.method("GetType", static_cast<TDataType * (TROOT::*)(const char *, Bool_t)  const>(&TROOT::GetType));
    t.method("GetType", [](TROOT const& a, const char * arg0)->TDataType * { return a.GetType(arg0); });
    t.method("GetType", [](TROOT const* a, const char * arg0)->TDataType * { return a->GetType(arg0); });

    DEBUG_MSG("Adding wrapper for TFile * TROOT::GetFile() (" __HERE__ ")");
    // signature to use in the veto list: TFile * TROOT::GetFile()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:260:22
    t.method("GetFile", static_cast<TFile * (TROOT::*)()  const>(&TROOT::GetFile));

    DEBUG_MSG("Adding wrapper for TFile * TROOT::GetFile(const char *) (" __HERE__ ")");
    // signature to use in the veto list: TFile * TROOT::GetFile(const char *)
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:261:22
    t.method("GetFile", static_cast<TFile * (TROOT::*)(const char *)  const>(&TROOT::GetFile));

    DEBUG_MSG("Adding wrapper for TObject * TROOT::GetFunction(const char *) (" __HERE__ ")");
    // signature to use in the veto list: TObject * TROOT::GetFunction(const char *)
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:264:22
    t.method("GetFunction", static_cast<TObject * (TROOT::*)(const char *)  const>(&TROOT::GetFunction));

    DEBUG_MSG("Adding wrapper for TObject * TROOT::GetGeometry(const char *) (" __HERE__ ")");
    // signature to use in the veto list: TObject * TROOT::GetGeometry(const char *)
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:269:22
    t.method("GetGeometry", static_cast<TObject * (TROOT::*)(const char *)  const>(&TROOT::GetGeometry));

    DEBUG_MSG("Adding wrapper for const TObject * TROOT::GetSelectedPrimitive() (" __HERE__ ")");
    // signature to use in the veto list: const TObject * TROOT::GetSelectedPrimitive()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:270:22
    t.method("GetSelectedPrimitive", static_cast<const TObject * (TROOT::*)()  const>(&TROOT::GetSelectedPrimitive));

    DEBUG_MSG("Adding wrapper for TVirtualPad * TROOT::GetSelectedPad() (" __HERE__ ")");
    // signature to use in the veto list: TVirtualPad * TROOT::GetSelectedPad()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:271:22
    t.method("GetSelectedPad", static_cast<TVirtualPad * (TROOT::*)()  const>(&TROOT::GetSelectedPad));

    DEBUG_MSG("Adding wrapper for Int_t TROOT::GetNclasses() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TROOT::GetNclasses()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:272:22
    t.method("GetNclasses", static_cast<Int_t (TROOT::*)()  const>(&TROOT::GetNclasses));

    DEBUG_MSG("Adding wrapper for Int_t TROOT::GetNtypes() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TROOT::GetNtypes()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:273:22
    t.method("GetNtypes", static_cast<Int_t (TROOT::*)()  const>(&TROOT::GetNtypes));

    DEBUG_MSG("Adding wrapper for const TString & TROOT::GetWebDisplay() (" __HERE__ ")");
    // signature to use in the veto list: const TString & TROOT::GetWebDisplay()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:276:22
    t.method("GetWebDisplay", static_cast<const TString & (TROOT::*)()  const>(&TROOT::GetWebDisplay));

    DEBUG_MSG("Adding wrapper for void TROOT::Idle(UInt_t, const char *) (" __HERE__ ")");
    // signature to use in the veto list: void TROOT::Idle(UInt_t, const char *)
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:277:22
    t.method("Idle", static_cast<void (TROOT::*)(UInt_t, const char *) >(&TROOT::Idle));
    t.method("Idle", [](TROOT& a, UInt_t arg0)->void { a.Idle(arg0); });
    t.method("Idle", [](TROOT* a, UInt_t arg0)->void { a->Idle(arg0); });

    DEBUG_MSG("Adding wrapper for Int_t TROOT::IgnoreInclude(const char *, const char *) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TROOT::IgnoreInclude(const char *, const char *)
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:278:22
    t.method("IgnoreInclude", static_cast<Int_t (TROOT::*)(const char *, const char *) >(&TROOT::IgnoreInclude));

    DEBUG_MSG("Adding wrapper for Bool_t TROOT::IsBatch() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TROOT::IsBatch()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:279:22
    t.method("IsBatch", static_cast<Bool_t (TROOT::*)()  const>(&TROOT::IsBatch));

    DEBUG_MSG("Adding wrapper for Bool_t TROOT::IsExecutingMacro() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TROOT::IsExecutingMacro()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:280:22
    t.method("IsExecutingMacro", static_cast<Bool_t (TROOT::*)()  const>(&TROOT::IsExecutingMacro));

    DEBUG_MSG("Adding wrapper for Bool_t TROOT::IsFolder() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TROOT::IsFolder()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:281:22
    t.method("IsFolder", static_cast<Bool_t (TROOT::*)()  const>(&TROOT::IsFolder));

    DEBUG_MSG("Adding wrapper for Bool_t TROOT::IsInterrupted() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TROOT::IsInterrupted()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:282:22
    t.method("IsInterrupted", static_cast<Bool_t (TROOT::*)()  const>(&TROOT::IsInterrupted));

    DEBUG_MSG("Adding wrapper for Bool_t TROOT::IsEscaped() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TROOT::IsEscaped()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:283:22
    t.method("IsEscaped", static_cast<Bool_t (TROOT::*)()  const>(&TROOT::IsEscaped));

    DEBUG_MSG("Adding wrapper for Bool_t TROOT::IsLineProcessing() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TROOT::IsLineProcessing()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:284:22
    t.method("IsLineProcessing", static_cast<Bool_t (TROOT::*)()  const>(&TROOT::IsLineProcessing));

    DEBUG_MSG("Adding wrapper for Bool_t TROOT::IsProofServ() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TROOT::IsProofServ()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:285:22
    t.method("IsProofServ", static_cast<Bool_t (TROOT::*)()  const>(&TROOT::IsProofServ));

    DEBUG_MSG("Adding wrapper for Bool_t TROOT::IsRootFile(const char *) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TROOT::IsRootFile(const char *)
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:286:22
    t.method("IsRootFile", static_cast<Bool_t (TROOT::*)(const char *)  const>(&TROOT::IsRootFile));

    DEBUG_MSG("Adding wrapper for Bool_t TROOT::IsWebDisplay() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TROOT::IsWebDisplay()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:287:22
    t.method("IsWebDisplay", static_cast<Bool_t (TROOT::*)()  const>(&TROOT::IsWebDisplay));

    DEBUG_MSG("Adding wrapper for Bool_t TROOT::IsWebDisplayBatch() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TROOT::IsWebDisplayBatch()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:288:22
    t.method("IsWebDisplayBatch", static_cast<Bool_t (TROOT::*)()  const>(&TROOT::IsWebDisplayBatch));

    DEBUG_MSG("Adding wrapper for void TROOT::ls(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TROOT::ls(Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:289:22
    t.method("ls", static_cast<void (TROOT::*)(Option_t *)  const>(&TROOT::ls));
    t.method("ls", [](TROOT const& a)->void { a.ls(); });
    t.method("ls", [](TROOT const* a)->void { a->ls(); });

    DEBUG_MSG("Adding wrapper for Int_t TROOT::LoadClass(const char *, const char *, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TROOT::LoadClass(const char *, const char *, Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:290:22
    t.method("LoadClass", static_cast<Int_t (TROOT::*)(const char *, const char *, Bool_t) >(&TROOT::LoadClass));
    t.method("LoadClass", [](TROOT& a, const char * arg0, const char * arg1)->Int_t { return a.LoadClass(arg0, arg1); });
    t.method("LoadClass", [](TROOT* a, const char * arg0, const char * arg1)->Int_t { return a->LoadClass(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for TClass * TROOT::LoadClass(const char *, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: TClass * TROOT::LoadClass(const char *, Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:291:22
    t.method("LoadClass", static_cast<TClass * (TROOT::*)(const char *, Bool_t)  const>(&TROOT::LoadClass));
    t.method("LoadClass", [](TROOT const& a, const char * arg0)->TClass * { return a.LoadClass(arg0); });
    t.method("LoadClass", [](TROOT const* a, const char * arg0)->TClass * { return a->LoadClass(arg0); });

    DEBUG_MSG("Adding wrapper for Int_t TROOT::LoadMacro(const char *, Int_t *, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TROOT::LoadMacro(const char *, Int_t *, Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:292:22
    t.method("LoadMacro", static_cast<Int_t (TROOT::*)(const char *, Int_t *, Bool_t) >(&TROOT::LoadMacro));
    t.method("LoadMacro", [](TROOT& a, const char * arg0)->Int_t { return a.LoadMacro(arg0); });
    t.method("LoadMacro", [](TROOT& a, const char * arg0, Int_t * arg1)->Int_t { return a.LoadMacro(arg0, arg1); });
    t.method("LoadMacro", [](TROOT* a, const char * arg0)->Int_t { return a->LoadMacro(arg0); });
    t.method("LoadMacro", [](TROOT* a, const char * arg0, Int_t * arg1)->Int_t { return a->LoadMacro(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for Longptr_t TROOT::Macro(const char *, Int_t *, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: Longptr_t TROOT::Macro(const char *, Int_t *, Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:293:22
    t.method("Macro", static_cast<Longptr_t (TROOT::*)(const char *, Int_t *, Bool_t) >(&TROOT::Macro));
    t.method("Macro", [](TROOT& a, const char * arg0)->Longptr_t { return a.Macro(arg0); });
    t.method("Macro", [](TROOT& a, const char * arg0, Int_t * arg1)->Longptr_t { return a.Macro(arg0, arg1); });
    t.method("Macro", [](TROOT* a, const char * arg0)->Longptr_t { return a->Macro(arg0); });
    t.method("Macro", [](TROOT* a, const char * arg0, Int_t * arg1)->Longptr_t { return a->Macro(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for TCanvas * TROOT::MakeDefCanvas() (" __HERE__ ")");
    // signature to use in the veto list: TCanvas * TROOT::MakeDefCanvas()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:294:22
    t.method("MakeDefCanvas", static_cast<TCanvas * (TROOT::*)()  const>(&TROOT::MakeDefCanvas));

    DEBUG_MSG("Adding wrapper for void TROOT::Message(Int_t, const TObject *) (" __HERE__ ")");
    // signature to use in the veto list: void TROOT::Message(Int_t, const TObject *)
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:295:22
    t.method("Message", static_cast<void (TROOT::*)(Int_t, const TObject *) >(&TROOT::Message));

    DEBUG_MSG("Adding wrapper for Bool_t TROOT::MustClean() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TROOT::MustClean()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:296:22
    t.method("MustClean", static_cast<Bool_t (TROOT::*)()  const>(&TROOT::MustClean));

    DEBUG_MSG("Adding wrapper for Longptr_t TROOT::ProcessLine(const char *, Int_t *) (" __HERE__ ")");
    // signature to use in the veto list: Longptr_t TROOT::ProcessLine(const char *, Int_t *)
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:297:22
    t.method("ProcessLine", static_cast<Longptr_t (TROOT::*)(const char *, Int_t *) >(&TROOT::ProcessLine));
    t.method("ProcessLine", [](TROOT& a, const char * arg0)->Longptr_t { return a.ProcessLine(arg0); });
    t.method("ProcessLine", [](TROOT* a, const char * arg0)->Longptr_t { return a->ProcessLine(arg0); });

    DEBUG_MSG("Adding wrapper for Longptr_t TROOT::ProcessLineSync(const char *, Int_t *) (" __HERE__ ")");
    // signature to use in the veto list: Longptr_t TROOT::ProcessLineSync(const char *, Int_t *)
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:298:22
    t.method("ProcessLineSync", static_cast<Longptr_t (TROOT::*)(const char *, Int_t *) >(&TROOT::ProcessLineSync));
    t.method("ProcessLineSync", [](TROOT& a, const char * arg0)->Longptr_t { return a.ProcessLineSync(arg0); });
    t.method("ProcessLineSync", [](TROOT* a, const char * arg0)->Longptr_t { return a->ProcessLineSync(arg0); });

    DEBUG_MSG("Adding wrapper for Longptr_t TROOT::ProcessLineFast(const char *, Int_t *) (" __HERE__ ")");
    // signature to use in the veto list: Longptr_t TROOT::ProcessLineFast(const char *, Int_t *)
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:299:22
    t.method("ProcessLineFast", static_cast<Longptr_t (TROOT::*)(const char *, Int_t *) >(&TROOT::ProcessLineFast));
    t.method("ProcessLineFast", [](TROOT& a, const char * arg0)->Longptr_t { return a.ProcessLineFast(arg0); });
    t.method("ProcessLineFast", [](TROOT* a, const char * arg0)->Longptr_t { return a->ProcessLineFast(arg0); });

    DEBUG_MSG("Adding wrapper for Bool_t TROOT::ReadingObject() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TROOT::ReadingObject()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:300:22
    t.method("ReadingObject", static_cast<Bool_t (TROOT::*)()  const>(&TROOT::ReadingObject));

    DEBUG_MSG("Adding wrapper for void TROOT::RecursiveRemove(TObject *) (" __HERE__ ")");
    // signature to use in the veto list: void TROOT::RecursiveRemove(TObject *)
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:301:22
    t.method("RecursiveRemove", static_cast<void (TROOT::*)(TObject *) >(&TROOT::RecursiveRemove));

    DEBUG_MSG("Adding wrapper for void TROOT::RefreshBrowsers() (" __HERE__ ")");
    // signature to use in the veto list: void TROOT::RefreshBrowsers()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:302:22
    t.method("RefreshBrowsers", static_cast<void (TROOT::*)() >(&TROOT::RefreshBrowsers));

    DEBUG_MSG("Adding wrapper for TObject * TROOT::Remove(TObject *) (" __HERE__ ")");
    // signature to use in the veto list: TObject * TROOT::Remove(TObject *)
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:312:22
    t.method("Remove", static_cast<TObject * (TROOT::*)(TObject *) >(&TROOT::Remove));

    DEBUG_MSG("Adding wrapper for void TROOT::RemoveClass(TClass *) (" __HERE__ ")");
    // signature to use in the veto list: void TROOT::RemoveClass(TClass *)
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:313:22
    t.method("RemoveClass", static_cast<void (TROOT::*)(TClass *) >(&TROOT::RemoveClass));

    DEBUG_MSG("Adding wrapper for void TROOT::Reset(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TROOT::Reset(Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:314:22
    t.method("Reset", static_cast<void (TROOT::*)(Option_t *) >(&TROOT::Reset));
    t.method("Reset", [](TROOT& a)->void { a.Reset(); });
    t.method("Reset", [](TROOT* a)->void { a->Reset(); });

    DEBUG_MSG("Adding wrapper for void TROOT::SaveContext() (" __HERE__ ")");
    // signature to use in the veto list: void TROOT::SaveContext()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:315:22
    t.method("SaveContext", static_cast<void (TROOT::*)() >(&TROOT::SaveContext));

    DEBUG_MSG("Adding wrapper for void TROOT::SetApplication(TApplication *) (" __HERE__ ")");
    // signature to use in the veto list: void TROOT::SetApplication(TApplication *)
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:316:22
    t.method("SetApplication", static_cast<void (TROOT::*)(TApplication *) >(&TROOT::SetApplication));

    DEBUG_MSG("Adding wrapper for void TROOT::SetBatch(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TROOT::SetBatch(Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:318:22
    t.method("SetBatch", static_cast<void (TROOT::*)(Bool_t) >(&TROOT::SetBatch));
    t.method("SetBatch", [](TROOT& a)->void { a.SetBatch(); });
    t.method("SetBatch", [](TROOT* a)->void { a->SetBatch(); });

    DEBUG_MSG("Adding wrapper for void TROOT::SetWebDisplay(const char *) (" __HERE__ ")");
    // signature to use in the veto list: void TROOT::SetWebDisplay(const char *)
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:319:22
    t.method("SetWebDisplay", static_cast<void (TROOT::*)(const char *) >(&TROOT::SetWebDisplay));
    t.method("SetWebDisplay", [](TROOT& a)->void { a.SetWebDisplay(); });
    t.method("SetWebDisplay", [](TROOT* a)->void { a->SetWebDisplay(); });

    DEBUG_MSG("Adding wrapper for void TROOT::SetCutClassName(const char *) (" __HERE__ ")");
    // signature to use in the veto list: void TROOT::SetCutClassName(const char *)
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:320:22
    t.method("SetCutClassName", static_cast<void (TROOT::*)(const char *) >(&TROOT::SetCutClassName));
    t.method("SetCutClassName", [](TROOT& a)->void { a.SetCutClassName(); });
    t.method("SetCutClassName", [](TROOT* a)->void { a->SetCutClassName(); });

    DEBUG_MSG("Adding wrapper for void TROOT::SetDefCanvasName(const char *) (" __HERE__ ")");
    // signature to use in the veto list: void TROOT::SetDefCanvasName(const char *)
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:321:22
    t.method("SetDefCanvasName", static_cast<void (TROOT::*)(const char *) >(&TROOT::SetDefCanvasName));
    t.method("SetDefCanvasName", [](TROOT& a)->void { a.SetDefCanvasName(); });
    t.method("SetDefCanvasName", [](TROOT* a)->void { a->SetDefCanvasName(); });

    DEBUG_MSG("Adding wrapper for void TROOT::SetEditHistograms(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TROOT::SetEditHistograms(Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:322:22
    t.method("SetEditHistograms", static_cast<void (TROOT::*)(Bool_t) >(&TROOT::SetEditHistograms));
    t.method("SetEditHistograms", [](TROOT& a)->void { a.SetEditHistograms(); });
    t.method("SetEditHistograms", [](TROOT* a)->void { a->SetEditHistograms(); });

    DEBUG_MSG("Adding wrapper for void TROOT::SetEditorMode(const char *) (" __HERE__ ")");
    // signature to use in the veto list: void TROOT::SetEditorMode(const char *)
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:323:22
    t.method("SetEditorMode", static_cast<void (TROOT::*)(const char *) >(&TROOT::SetEditorMode));
    t.method("SetEditorMode", [](TROOT& a)->void { a.SetEditorMode(); });
    t.method("SetEditorMode", [](TROOT* a)->void { a->SetEditorMode(); });

    DEBUG_MSG("Adding wrapper for void TROOT::SetExecutingMacro(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TROOT::SetExecutingMacro(Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:324:22
    t.method("SetExecutingMacro", static_cast<void (TROOT::*)(Bool_t) >(&TROOT::SetExecutingMacro));
    t.method("SetExecutingMacro", [](TROOT& a)->void { a.SetExecutingMacro(); });
    t.method("SetExecutingMacro", [](TROOT* a)->void { a->SetExecutingMacro(); });

    DEBUG_MSG("Adding wrapper for void TROOT::SetFromPopUp(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TROOT::SetFromPopUp(Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:325:22
    t.method("SetFromPopUp", static_cast<void (TROOT::*)(Bool_t) >(&TROOT::SetFromPopUp));
    t.method("SetFromPopUp", [](TROOT& a)->void { a.SetFromPopUp(); });
    t.method("SetFromPopUp", [](TROOT* a)->void { a->SetFromPopUp(); });

    DEBUG_MSG("Adding wrapper for void TROOT::SetInterrupt(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TROOT::SetInterrupt(Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:326:22
    t.method("SetInterrupt", static_cast<void (TROOT::*)(Bool_t) >(&TROOT::SetInterrupt));
    t.method("SetInterrupt", [](TROOT& a)->void { a.SetInterrupt(); });
    t.method("SetInterrupt", [](TROOT* a)->void { a->SetInterrupt(); });

    DEBUG_MSG("Adding wrapper for void TROOT::SetEscape(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TROOT::SetEscape(Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:327:22
    t.method("SetEscape", static_cast<void (TROOT::*)(Bool_t) >(&TROOT::SetEscape));
    t.method("SetEscape", [](TROOT& a)->void { a.SetEscape(); });
    t.method("SetEscape", [](TROOT* a)->void { a->SetEscape(); });

    DEBUG_MSG("Adding wrapper for void TROOT::SetLineIsProcessing() (" __HERE__ ")");
    // signature to use in the veto list: void TROOT::SetLineIsProcessing()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:328:22
    t.method("SetLineIsProcessing", static_cast<void (TROOT::*)() >(&TROOT::SetLineIsProcessing));

    DEBUG_MSG("Adding wrapper for void TROOT::SetLineHasBeenProcessed() (" __HERE__ ")");
    // signature to use in the veto list: void TROOT::SetLineHasBeenProcessed()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:329:22
    t.method("SetLineHasBeenProcessed", static_cast<void (TROOT::*)() >(&TROOT::SetLineHasBeenProcessed));

    DEBUG_MSG("Adding wrapper for void TROOT::SetReadingObject(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TROOT::SetReadingObject(Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:330:22
    t.method("SetReadingObject", static_cast<void (TROOT::*)(Bool_t) >(&TROOT::SetReadingObject));
    t.method("SetReadingObject", [](TROOT& a)->void { a.SetReadingObject(); });
    t.method("SetReadingObject", [](TROOT* a)->void { a->SetReadingObject(); });

    DEBUG_MSG("Adding wrapper for void TROOT::SetMustClean(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TROOT::SetMustClean(Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:331:22
    t.method("SetMustClean", static_cast<void (TROOT::*)(Bool_t) >(&TROOT::SetMustClean));
    t.method("SetMustClean", [](TROOT& a)->void { a.SetMustClean(); });
    t.method("SetMustClean", [](TROOT* a)->void { a->SetMustClean(); });

    DEBUG_MSG("Adding wrapper for void TROOT::SetSelectedPrimitive(const TObject *) (" __HERE__ ")");
    // signature to use in the veto list: void TROOT::SetSelectedPrimitive(const TObject *)
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:332:22
    t.method("SetSelectedPrimitive", static_cast<void (TROOT::*)(const TObject *) >(&TROOT::SetSelectedPrimitive));

    DEBUG_MSG("Adding wrapper for void TROOT::SetSelectedPad(TVirtualPad *) (" __HERE__ ")");
    // signature to use in the veto list: void TROOT::SetSelectedPad(TVirtualPad *)
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:333:22
    t.method("SetSelectedPad", static_cast<void (TROOT::*)(TVirtualPad *) >(&TROOT::SetSelectedPad));

    DEBUG_MSG("Adding wrapper for void TROOT::SetStyle(const char *) (" __HERE__ ")");
    // signature to use in the veto list: void TROOT::SetStyle(const char *)
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:334:22
    t.method("SetStyle", static_cast<void (TROOT::*)(const char *) >(&TROOT::SetStyle));
    t.method("SetStyle", [](TROOT& a)->void { a.SetStyle(); });
    t.method("SetStyle", [](TROOT* a)->void { a->SetStyle(); });

    DEBUG_MSG("Adding wrapper for void TROOT::Time(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TROOT::Time(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:335:22
    t.method("Time", static_cast<void (TROOT::*)(Int_t) >(&TROOT::Time));
    t.method("Time", [](TROOT& a)->void { a.Time(); });
    t.method("Time", [](TROOT* a)->void { a->Time(); });

    DEBUG_MSG("Adding wrapper for Int_t TROOT::Timer() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TROOT::Timer()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:336:22
    t.method("Timer", static_cast<Int_t (TROOT::*)()  const>(&TROOT::Timer));

    DEBUG_MSG("Adding wrapper for Int_t TROOT::DecreaseDirLevel() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TROOT::DecreaseDirLevel()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:339:23
    module_.method("TROOT!DecreaseDirLevel", static_cast<Int_t (*)() >(&TROOT::DecreaseDirLevel));

    DEBUG_MSG("Adding wrapper for Int_t TROOT::GetDirLevel() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TROOT::GetDirLevel()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:340:23
    module_.method("TROOT!GetDirLevel", static_cast<Int_t (*)() >(&TROOT::GetDirLevel));

    DEBUG_MSG("Adding wrapper for const char * TROOT::GetMacroPath() (" __HERE__ ")");
    // signature to use in the veto list: const char * TROOT::GetMacroPath()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:341:23
    module_.method("TROOT!GetMacroPath", []() { return (std::string)TROOT::GetMacroPath(); });

    DEBUG_MSG("Adding wrapper for void TROOT::SetMacroPath(const char *) (" __HERE__ ")");
    // signature to use in the veto list: void TROOT::SetMacroPath(const char *)
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:342:23
    module_.method("TROOT!SetMacroPath", static_cast<void (*)(const char *) >(&TROOT::SetMacroPath));

    DEBUG_MSG("Adding wrapper for Int_t TROOT::IncreaseDirLevel() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TROOT::IncreaseDirLevel()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:343:23
    module_.method("TROOT!IncreaseDirLevel", static_cast<Int_t (*)() >(&TROOT::IncreaseDirLevel));

    DEBUG_MSG("Adding wrapper for void TROOT::IndentLevel() (" __HERE__ ")");
    // signature to use in the veto list: void TROOT::IndentLevel()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:344:23
    module_.method("TROOT!IndentLevel", static_cast<void (*)() >(&TROOT::IndentLevel));

    DEBUG_MSG("Adding wrapper for void TROOT::Initialize() (" __HERE__ ")");
    // signature to use in the veto list: void TROOT::Initialize()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:345:23
    module_.method("TROOT!Initialize", static_cast<void (*)() >(&TROOT::Initialize));

    DEBUG_MSG("Adding wrapper for Bool_t TROOT::Initialized() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TROOT::Initialized()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:346:23
    module_.method("TROOT!Initialized", static_cast<Bool_t (*)() >(&TROOT::Initialized));

    DEBUG_MSG("Adding wrapper for void TROOT::SetDirLevel(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TROOT::SetDirLevel(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:347:23
    module_.method("TROOT!SetDirLevel", static_cast<void (*)(Int_t) >(&TROOT::SetDirLevel));
    module_.method("TROOT!SetDirLevel", []()->void { TROOT::SetDirLevel(); });

    DEBUG_MSG("Adding wrapper for Int_t TROOT::ConvertVersionCode2Int(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TROOT::ConvertVersionCode2Int(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:348:23
    module_.method("TROOT!ConvertVersionCode2Int", static_cast<Int_t (*)(Int_t) >(&TROOT::ConvertVersionCode2Int));

    DEBUG_MSG("Adding wrapper for Int_t TROOT::ConvertVersionInt2Code(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TROOT::ConvertVersionInt2Code(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:349:23
    module_.method("TROOT!ConvertVersionInt2Code", static_cast<Int_t (*)(Int_t) >(&TROOT::ConvertVersionInt2Code));

    DEBUG_MSG("Adding wrapper for Int_t TROOT::RootVersionCode() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TROOT::RootVersionCode()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:350:23
    module_.method("TROOT!RootVersionCode", static_cast<Int_t (*)() >(&TROOT::RootVersionCode));

    DEBUG_MSG("Adding wrapper for const std::vector<std::string> & TROOT::AddExtraInterpreterArgs(const std::vector<std::string> &) (" __HERE__ ")");
    // signature to use in the veto list: const std::vector<std::string> & TROOT::AddExtraInterpreterArgs(const std::vector<std::string> &)
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:351:43
    module_.method("TROOT!AddExtraInterpreterArgs", static_cast<const std::vector<std::string> & (*)(const std::vector<std::string> &) >(&TROOT::AddExtraInterpreterArgs));

    DEBUG_MSG("Adding wrapper for const char **& TROOT::GetExtraInterpreterArgs() (" __HERE__ ")");
    // signature to use in the veto list: const char **& TROOT::GetExtraInterpreterArgs()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:352:24
    module_.method("TROOT!GetExtraInterpreterArgs", static_cast<const char **& (*)() >(&TROOT::GetExtraInterpreterArgs));

    DEBUG_MSG("Adding wrapper for const TString & TROOT::GetRootSys() (" __HERE__ ")");
    // signature to use in the veto list: const TString & TROOT::GetRootSys()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:354:26
    module_.method("TROOT!GetRootSys", static_cast<const TString & (*)() >(&TROOT::GetRootSys));

    DEBUG_MSG("Adding wrapper for const TString & TROOT::GetBinDir() (" __HERE__ ")");
    // signature to use in the veto list: const TString & TROOT::GetBinDir()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:355:26
    module_.method("TROOT!GetBinDir", static_cast<const TString & (*)() >(&TROOT::GetBinDir));

    DEBUG_MSG("Adding wrapper for const TString & TROOT::GetLibDir() (" __HERE__ ")");
    // signature to use in the veto list: const TString & TROOT::GetLibDir()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:356:26
    module_.method("TROOT!GetLibDir", static_cast<const TString & (*)() >(&TROOT::GetLibDir));

    DEBUG_MSG("Adding wrapper for const TString & TROOT::GetSharedLibDir() (" __HERE__ ")");
    // signature to use in the veto list: const TString & TROOT::GetSharedLibDir()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:357:26
    module_.method("TROOT!GetSharedLibDir", static_cast<const TString & (*)() >(&TROOT::GetSharedLibDir));

    DEBUG_MSG("Adding wrapper for const TString & TROOT::GetIncludeDir() (" __HERE__ ")");
    // signature to use in the veto list: const TString & TROOT::GetIncludeDir()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:358:26
    module_.method("TROOT!GetIncludeDir", static_cast<const TString & (*)() >(&TROOT::GetIncludeDir));

    DEBUG_MSG("Adding wrapper for const TString & TROOT::GetEtcDir() (" __HERE__ ")");
    // signature to use in the veto list: const TString & TROOT::GetEtcDir()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:359:26
    module_.method("TROOT!GetEtcDir", static_cast<const TString & (*)() >(&TROOT::GetEtcDir));

    DEBUG_MSG("Adding wrapper for const TString & TROOT::GetDataDir() (" __HERE__ ")");
    // signature to use in the veto list: const TString & TROOT::GetDataDir()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:360:26
    module_.method("TROOT!GetDataDir", static_cast<const TString & (*)() >(&TROOT::GetDataDir));

    DEBUG_MSG("Adding wrapper for const TString & TROOT::GetDocDir() (" __HERE__ ")");
    // signature to use in the veto list: const TString & TROOT::GetDocDir()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:361:26
    module_.method("TROOT!GetDocDir", static_cast<const TString & (*)() >(&TROOT::GetDocDir));

    DEBUG_MSG("Adding wrapper for const TString & TROOT::GetMacroDir() (" __HERE__ ")");
    // signature to use in the veto list: const TString & TROOT::GetMacroDir()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:362:26
    module_.method("TROOT!GetMacroDir", static_cast<const TString & (*)() >(&TROOT::GetMacroDir));

    DEBUG_MSG("Adding wrapper for const TString & TROOT::GetTutorialDir() (" __HERE__ ")");
    // signature to use in the veto list: const TString & TROOT::GetTutorialDir()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:363:26
    module_.method("TROOT!GetTutorialDir", static_cast<const TString & (*)() >(&TROOT::GetTutorialDir));

    DEBUG_MSG("Adding wrapper for const TString & TROOT::GetSourceDir() (" __HERE__ ")");
    // signature to use in the veto list: const TString & TROOT::GetSourceDir()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:364:26
    module_.method("TROOT!GetSourceDir", static_cast<const TString & (*)() >(&TROOT::GetSourceDir));

    DEBUG_MSG("Adding wrapper for const TString & TROOT::GetIconPath() (" __HERE__ ")");
    // signature to use in the veto list: const TString & TROOT::GetIconPath()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:365:26
    module_.method("TROOT!GetIconPath", static_cast<const TString & (*)() >(&TROOT::GetIconPath));

    DEBUG_MSG("Adding wrapper for const TString & TROOT::GetTTFFontDir() (" __HERE__ ")");
    // signature to use in the veto list: const TString & TROOT::GetTTFFontDir()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:366:26
    module_.method("TROOT!GetTTFFontDir", static_cast<const TString & (*)() >(&TROOT::GetTTFFontDir));

    DEBUG_MSG("Adding wrapper for const char * TROOT::GetTutorialsDir() (" __HERE__ ")");
    // signature to use in the veto list: const char * TROOT::GetTutorialsDir()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:369:23
    module_.method("TROOT!GetTutorialsDir", []() { return (std::string)TROOT::GetTutorialsDir(); });

    DEBUG_MSG("Adding wrapper for void TROOT::ShutDown() (" __HERE__ ")");
    // signature to use in the veto list: void TROOT::ShutDown()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:370:16
    module_.method("TROOT!ShutDown", static_cast<void (*)() >(&TROOT::ShutDown));

    DEBUG_MSG("Adding wrapper for Version_t TROOT::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TROOT::Class_Version()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:372:4
    module_.method("TROOT!Class_Version", static_cast<Version_t (*)() >(&TROOT::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * TROOT::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TROOT::IsA()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:372:4
    t.method("IsA", static_cast<TClass * (TROOT::*)()  const>(&TROOT::IsA));

    DEBUG_MSG("Adding wrapper for void TROOT::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TROOT::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:372:4
    t.method("StreamerNVirtual", static_cast<void (TROOT::*)(TBuffer &) >(&TROOT::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * TROOT::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TROOT::DeclFileName()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:372:4
    module_.method("TROOT!DeclFileName", []() { return (std::string)TROOT::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TROOT::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TROOT::ImplFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:372:4
    module_.method("TROOT!ImplFileLine", static_cast<int (*)() >(&TROOT::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * TROOT::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TROOT::ImplFileName()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:372:4
    module_.method("TROOT!ImplFileName", []() { return (std::string)TROOT::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TROOT::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TROOT::Class_Name()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:372:4
    module_.method("TROOT!Class_Name", []() { return (std::string)TROOT::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TROOT::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TROOT::Dictionary()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:372:4
    module_.method("TROOT!Dictionary", static_cast<TClass * (*)() >(&TROOT::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * TROOT::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TROOT::Class()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:372:4
    module_.method("TROOT!Class", static_cast<TClass * (*)() >(&TROOT::Class));

    DEBUG_MSG("Adding wrapper for void TROOT::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TROOT::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:372:4
    t.method("Streamer", static_cast<void (TROOT::*)(TBuffer &) >(&TROOT::Streamer));

    DEBUG_MSG("Adding wrapper for int TROOT::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TROOT::DeclFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:372:4
    module_.method("TROOT!DeclFileLine", static_cast<int (*)() >(&TROOT::DeclFileLine));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TROOT>> type_;
};
std::shared_ptr<Wrapper> newJlTROOT(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTROOT(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<ROOT::Internal::TParBranchProcessingRAII> : std::false_type { };
  template<> struct DefaultConstructible<ROOT::Internal::TParBranchProcessingRAII> : std::false_type { };
}

// Class generating the wrapper for type ROOT::Internal::TParBranchProcessingRAII
// signature to use in the veto file: ROOT::Internal::TParBranchProcessingRAII
struct JlROOT_Internal_TParBranchProcessingRAII: public Wrapper {

  JlROOT_Internal_TParBranchProcessingRAII(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type ROOT::Internal::TParBranchProcessingRAII (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:75:10
    jlcxx::TypeWrapper<ROOT::Internal::TParBranchProcessingRAII>  t = jlModule.add_type<ROOT::Internal::TParBranchProcessingRAII>("ROOT!Internal!TParBranchProcessingRAII");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<ROOT::Internal::TParBranchProcessingRAII>>(new jlcxx::TypeWrapper<ROOT::Internal::TParBranchProcessingRAII>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<ROOT::Internal::TParBranchProcessingRAII>> type_;
};
std::shared_ptr<Wrapper> newJlROOT_Internal_TParBranchProcessingRAII(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlROOT_Internal_TParBranchProcessingRAII(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TApplication> : std::false_type { };
  template<> struct DefaultConstructible<TApplication> : std::false_type { };
template<> struct SuperType<TApplication> { typedef TObject type; };
}

// Class generating the wrapper for type TApplication
// signature to use in the veto file: TApplication
struct JlTApplication: public Wrapper {

  JlTApplication(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TApplication (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:39:7
    jlcxx::TypeWrapper<TApplication>  t = jlModule.add_type<TApplication>("TApplication",
      jlcxx::julia_base_type<TObject>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TApplication>>(new jlcxx::TypeWrapper<TApplication>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;


    DEBUG_MSG("Adding wrapper for void TApplication::TApplication(const char *, Int_t *, char **, void *, Int_t) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:101:4
    t.constructor<const char *, Int_t *, char **>(/*finalize=*/true);
    t.constructor<const char *, Int_t *, char **, void *>(/*finalize=*/true);
    t.constructor<const char *, Int_t *, char **, void *, Int_t>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for void TApplication::InitializeGraphics(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TApplication::InitializeGraphics(Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:105:20
    t.method("InitializeGraphics", static_cast<void (TApplication::*)(Bool_t) >(&TApplication::InitializeGraphics));
    t.method("InitializeGraphics", [](TApplication& a)->void { a.InitializeGraphics(); });
    t.method("InitializeGraphics", [](TApplication* a)->void { a->InitializeGraphics(); });

    DEBUG_MSG("Adding wrapper for void TApplication::GetOptions(Int_t *, char **) (" __HERE__ ")");
    // signature to use in the veto list: void TApplication::GetOptions(Int_t *, char **)
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:106:20
    t.method("GetOptions", static_cast<void (TApplication::*)(Int_t *, char **) >(&TApplication::GetOptions));

    DEBUG_MSG("Adding wrapper for TSignalHandler * TApplication::GetSignalHandler() (" __HERE__ ")");
    // signature to use in the veto list: TSignalHandler * TApplication::GetSignalHandler()
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:107:20
    t.method("GetSignalHandler", static_cast<TSignalHandler * (TApplication::*)()  const>(&TApplication::GetSignalHandler));

    DEBUG_MSG("Adding wrapper for void TApplication::SetEchoMode(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TApplication::SetEchoMode(Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:108:20
    t.method("SetEchoMode", static_cast<void (TApplication::*)(Bool_t) >(&TApplication::SetEchoMode));

    DEBUG_MSG("Adding wrapper for TString TApplication::GetSetup() (" __HERE__ ")");
    // signature to use in the veto list: TString TApplication::GetSetup()
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:109:12
    t.method("GetSetup", static_cast<TString (TApplication::*)() >(&TApplication::GetSetup));

    DEBUG_MSG("Adding wrapper for void TApplication::OpenForumTopic(const TString &) (" __HERE__ ")");
    // signature to use in the veto list: void TApplication::OpenForumTopic(const TString &)
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:110:9
    t.method("OpenForumTopic", static_cast<void (TApplication::*)(const TString &) >(&TApplication::OpenForumTopic));

    DEBUG_MSG("Adding wrapper for void TApplication::OpenGitHubIssue(const TString &) (" __HERE__ ")");
    // signature to use in the veto list: void TApplication::OpenGitHubIssue(const TString &)
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:111:9
    t.method("OpenGitHubIssue", static_cast<void (TApplication::*)(const TString &) >(&TApplication::OpenGitHubIssue));

    DEBUG_MSG("Adding wrapper for void TApplication::OpenInBrowser(const TString &) (" __HERE__ ")");
    // signature to use in the veto list: void TApplication::OpenInBrowser(const TString &)
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:112:9
    t.method("OpenInBrowser", static_cast<void (TApplication::*)(const TString &) >(&TApplication::OpenInBrowser));

    DEBUG_MSG("Adding wrapper for void TApplication::OpenReferenceGuideFor(const TString &) (" __HERE__ ")");
    // signature to use in the veto list: void TApplication::OpenReferenceGuideFor(const TString &)
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:113:9
    t.method("OpenReferenceGuideFor", static_cast<void (TApplication::*)(const TString &) >(&TApplication::OpenReferenceGuideFor));

    DEBUG_MSG("Adding wrapper for void TApplication::HandleException(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TApplication::HandleException(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:114:20
    t.method("HandleException", static_cast<void (TApplication::*)(Int_t) >(&TApplication::HandleException));

    DEBUG_MSG("Adding wrapper for void TApplication::HandleIdleTimer() (" __HERE__ ")");
    // signature to use in the veto list: void TApplication::HandleIdleTimer()
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:115:20
    t.method("HandleIdleTimer", static_cast<void (TApplication::*)() >(&TApplication::HandleIdleTimer));

    DEBUG_MSG("Adding wrapper for Bool_t TApplication::HandleTermInput() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TApplication::HandleTermInput()
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:116:20
    t.method("HandleTermInput", static_cast<Bool_t (TApplication::*)() >(&TApplication::HandleTermInput));

    DEBUG_MSG("Adding wrapper for void TApplication::Init() (" __HERE__ ")");
    // signature to use in the veto list: void TApplication::Init()
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:117:20
    t.method("Init", static_cast<void (TApplication::*)() >(&TApplication::Init));

    DEBUG_MSG("Adding wrapper for Longptr_t TApplication::ProcessLine(const char *, Bool_t, Int_t *) (" __HERE__ ")");
    // signature to use in the veto list: Longptr_t TApplication::ProcessLine(const char *, Bool_t, Int_t *)
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:118:22
    t.method("ProcessLine", static_cast<Longptr_t (TApplication::*)(const char *, Bool_t, Int_t *) >(&TApplication::ProcessLine));
    t.method("ProcessLine", [](TApplication& a, const char * arg0)->Longptr_t { return a.ProcessLine(arg0); });
    t.method("ProcessLine", [](TApplication& a, const char * arg0, Bool_t arg1)->Longptr_t { return a.ProcessLine(arg0, arg1); });
    t.method("ProcessLine", [](TApplication* a, const char * arg0)->Longptr_t { return a->ProcessLine(arg0); });
    t.method("ProcessLine", [](TApplication* a, const char * arg0, Bool_t arg1)->Longptr_t { return a->ProcessLine(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for Longptr_t TApplication::ProcessFile(const char *, Int_t *, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: Longptr_t TApplication::ProcessFile(const char *, Int_t *, Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:119:22
    t.method("ProcessFile", static_cast<Longptr_t (TApplication::*)(const char *, Int_t *, Bool_t) >(&TApplication::ProcessFile));
    t.method("ProcessFile", [](TApplication& a, const char * arg0)->Longptr_t { return a.ProcessFile(arg0); });
    t.method("ProcessFile", [](TApplication& a, const char * arg0, Int_t * arg1)->Longptr_t { return a.ProcessFile(arg0, arg1); });
    t.method("ProcessFile", [](TApplication* a, const char * arg0)->Longptr_t { return a->ProcessFile(arg0); });
    t.method("ProcessFile", [](TApplication* a, const char * arg0, Int_t * arg1)->Longptr_t { return a->ProcessFile(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void TApplication::Run(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TApplication::Run(Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:120:20
    t.method("Run", static_cast<void (TApplication::*)(Bool_t) >(&TApplication::Run));
    t.method("Run", [](TApplication& a)->void { a.Run(); });
    t.method("Run", [](TApplication* a)->void { a->Run(); });

    DEBUG_MSG("Adding wrapper for void TApplication::SetIdleTimer(UInt_t, const char *) (" __HERE__ ")");
    // signature to use in the veto list: void TApplication::SetIdleTimer(UInt_t, const char *)
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:121:20
    t.method("SetIdleTimer", static_cast<void (TApplication::*)(UInt_t, const char *) >(&TApplication::SetIdleTimer));

    DEBUG_MSG("Adding wrapper for void TApplication::RemoveIdleTimer() (" __HERE__ ")");
    // signature to use in the veto list: void TApplication::RemoveIdleTimer()
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:122:20
    t.method("RemoveIdleTimer", static_cast<void (TApplication::*)() >(&TApplication::RemoveIdleTimer));

    DEBUG_MSG("Adding wrapper for const char * TApplication::GetIdleCommand() (" __HERE__ ")");
    // signature to use in the veto list: const char * TApplication::GetIdleCommand()
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:123:20
    t.method("GetIdleCommand", [](TApplication const& a) { return (std::string)a.GetIdleCommand(); });
    t.method("GetIdleCommand", [](TApplication const* a) { return (std::string)a->GetIdleCommand(); });

    DEBUG_MSG("Adding wrapper for void TApplication::StartIdleing() (" __HERE__ ")");
    // signature to use in the veto list: void TApplication::StartIdleing()
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:124:20
    t.method("StartIdleing", static_cast<void (TApplication::*)() >(&TApplication::StartIdleing));

    DEBUG_MSG("Adding wrapper for void TApplication::StopIdleing() (" __HERE__ ")");
    // signature to use in the veto list: void TApplication::StopIdleing()
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:125:20
    t.method("StopIdleing", static_cast<void (TApplication::*)() >(&TApplication::StopIdleing));

    DEBUG_MSG("Adding wrapper for TApplication::EExitOnException TApplication::ExitOnException(TApplication::EExitOnException) (" __HERE__ ")");
    // signature to use in the veto list: TApplication::EExitOnException TApplication::ExitOnException(TApplication::EExitOnException)
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:126:21
    t.method("ExitOnException", static_cast<TApplication::EExitOnException (TApplication::*)(TApplication::EExitOnException) >(&TApplication::ExitOnException));
    t.method("ExitOnException", [](TApplication& a)->TApplication::EExitOnException { return a.ExitOnException(); });
    t.method("ExitOnException", [](TApplication* a)->TApplication::EExitOnException { return a->ExitOnException(); });

    DEBUG_MSG("Adding wrapper for const char * TApplication::ApplicationName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TApplication::ApplicationName()
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:128:24
    t.method("ApplicationName", [](TApplication const& a) { return (std::string)a.ApplicationName(); });
    t.method("ApplicationName", [](TApplication const* a) { return (std::string)a->ApplicationName(); });

    DEBUG_MSG("Adding wrapper for void TApplication::Show() (" __HERE__ ")");
    // signature to use in the veto list: void TApplication::Show()
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:129:20
    t.method("Show", static_cast<void (TApplication::*)() >(&TApplication::Show));

    DEBUG_MSG("Adding wrapper for void TApplication::Hide() (" __HERE__ ")");
    // signature to use in the veto list: void TApplication::Hide()
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:130:20
    t.method("Hide", static_cast<void (TApplication::*)() >(&TApplication::Hide));

    DEBUG_MSG("Adding wrapper for void TApplication::Iconify() (" __HERE__ ")");
    // signature to use in the veto list: void TApplication::Iconify()
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:131:20
    t.method("Iconify", static_cast<void (TApplication::*)() >(&TApplication::Iconify));

    DEBUG_MSG("Adding wrapper for void TApplication::Open() (" __HERE__ ")");
    // signature to use in the veto list: void TApplication::Open()
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:132:20
    t.method("Open", static_cast<void (TApplication::*)() >(&TApplication::Open));

    DEBUG_MSG("Adding wrapper for void TApplication::Raise() (" __HERE__ ")");
    // signature to use in the veto list: void TApplication::Raise()
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:133:20
    t.method("Raise", static_cast<void (TApplication::*)() >(&TApplication::Raise));

    DEBUG_MSG("Adding wrapper for void TApplication::Lower() (" __HERE__ ")");
    // signature to use in the veto list: void TApplication::Lower()
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:134:20
    t.method("Lower", static_cast<void (TApplication::*)() >(&TApplication::Lower));

    DEBUG_MSG("Adding wrapper for Bool_t TApplication::IsCmdThread() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TApplication::IsCmdThread()
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:135:20
    t.method("IsCmdThread", static_cast<Bool_t (TApplication::*)() >(&TApplication::IsCmdThread));

    DEBUG_MSG("Adding wrapper for TApplicationImp * TApplication::GetApplicationImp() (" __HERE__ ")");
    // signature to use in the veto list: TApplicationImp * TApplication::GetApplicationImp()
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:136:29
    t.method("GetApplicationImp", static_cast<TApplicationImp * (TApplication::*)() >(&TApplication::GetApplicationImp));

    DEBUG_MSG("Adding wrapper for void TApplication::ls(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TApplication::ls(Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:138:20
    t.method("ls", static_cast<void (TApplication::*)(Option_t *)  const>(&TApplication::ls));
    t.method("ls", [](TApplication const& a)->void { a.ls(); });
    t.method("ls", [](TApplication const* a)->void { a->ls(); });

    DEBUG_MSG("Adding wrapper for Int_t TApplication::Argc() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TApplication::Argc()
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:140:20
    t.method("Argc", static_cast<Int_t (TApplication::*)()  const>(&TApplication::Argc));

    DEBUG_MSG("Adding wrapper for char ** TApplication::Argv() (" __HERE__ ")");
    // signature to use in the veto list: char ** TApplication::Argv()
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:141:20
    t.method("Argv", static_cast<char ** (TApplication::*)()  const>(&TApplication::Argv));

    DEBUG_MSG("Adding wrapper for char * TApplication::Argv(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: char * TApplication::Argv(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:142:20
    t.method("Argv", static_cast<char * (TApplication::*)(Int_t)  const>(&TApplication::Argv));

    DEBUG_MSG("Adding wrapper for Bool_t TApplication::NoLogOpt() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TApplication::NoLogOpt()
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:143:20
    t.method("NoLogOpt", static_cast<Bool_t (TApplication::*)()  const>(&TApplication::NoLogOpt));

    DEBUG_MSG("Adding wrapper for Bool_t TApplication::NoLogoOpt() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TApplication::NoLogoOpt()
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:144:20
    t.method("NoLogoOpt", static_cast<Bool_t (TApplication::*)()  const>(&TApplication::NoLogoOpt));

    DEBUG_MSG("Adding wrapper for Bool_t TApplication::QuitOpt() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TApplication::QuitOpt()
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:145:20
    t.method("QuitOpt", static_cast<Bool_t (TApplication::*)()  const>(&TApplication::QuitOpt));

    DEBUG_MSG("Adding wrapper for TObjArray * TApplication::InputFiles() (" __HERE__ ")");
    // signature to use in the veto list: TObjArray * TApplication::InputFiles()
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:146:20
    t.method("InputFiles", static_cast<TObjArray * (TApplication::*)()  const>(&TApplication::InputFiles));

    DEBUG_MSG("Adding wrapper for const char * TApplication::WorkingDirectory() (" __HERE__ ")");
    // signature to use in the veto list: const char * TApplication::WorkingDirectory()
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:147:20
    t.method("WorkingDirectory", [](TApplication const& a) { return (std::string)a.WorkingDirectory(); });
    t.method("WorkingDirectory", [](TApplication const* a) { return (std::string)a->WorkingDirectory(); });

    DEBUG_MSG("Adding wrapper for void TApplication::ClearInputFiles() (" __HERE__ ")");
    // signature to use in the veto list: void TApplication::ClearInputFiles()
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:148:20
    t.method("ClearInputFiles", static_cast<void (TApplication::*)() >(&TApplication::ClearInputFiles));

    DEBUG_MSG("Adding wrapper for TApplication * TApplication::GetAppRemote() (" __HERE__ ")");
    // signature to use in the veto list: TApplication * TApplication::GetAppRemote()
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:150:20
    t.method("GetAppRemote", static_cast<TApplication * (TApplication::*)()  const>(&TApplication::GetAppRemote));

    DEBUG_MSG("Adding wrapper for Bool_t TApplication::IsRunning() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TApplication::IsRunning()
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:152:20
    t.method("IsRunning", static_cast<Bool_t (TApplication::*)()  const>(&TApplication::IsRunning));

    DEBUG_MSG("Adding wrapper for Bool_t TApplication::ReturnFromRun() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TApplication::ReturnFromRun()
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:153:20
    t.method("ReturnFromRun", static_cast<Bool_t (TApplication::*)()  const>(&TApplication::ReturnFromRun));

    DEBUG_MSG("Adding wrapper for void TApplication::SetReturnFromRun(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TApplication::SetReturnFromRun(Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:154:20
    t.method("SetReturnFromRun", static_cast<void (TApplication::*)(Bool_t) >(&TApplication::SetReturnFromRun));

    DEBUG_MSG("Adding wrapper for void TApplication::LineProcessed(const char *) (" __HERE__ ")");
    // signature to use in the veto list: void TApplication::LineProcessed(const char *)
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:156:20
    t.method("LineProcessed", static_cast<void (TApplication::*)(const char *) >(&TApplication::LineProcessed));

    DEBUG_MSG("Adding wrapper for void TApplication::Terminate(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TApplication::Terminate(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:157:20
    t.method("Terminate", static_cast<void (TApplication::*)(Int_t) >(&TApplication::Terminate));
    t.method("Terminate", [](TApplication& a)->void { a.Terminate(); });
    t.method("Terminate", [](TApplication* a)->void { a->Terminate(); });

    DEBUG_MSG("Adding wrapper for void TApplication::KeyPressed(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TApplication::KeyPressed(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:158:20
    t.method("KeyPressed", static_cast<void (TApplication::*)(Int_t) >(&TApplication::KeyPressed));

    DEBUG_MSG("Adding wrapper for void TApplication::ReturnPressed(char *) (" __HERE__ ")");
    // signature to use in the veto list: void TApplication::ReturnPressed(char *)
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:159:20
    t.method("ReturnPressed", static_cast<void (TApplication::*)(char *) >(&TApplication::ReturnPressed));

    DEBUG_MSG("Adding wrapper for Longptr_t TApplication::ExecuteFile(const char *, Int_t *, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: Longptr_t TApplication::ExecuteFile(const char *, Int_t *, Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:162:21
    module_.method("TApplication!ExecuteFile", static_cast<Longptr_t (*)(const char *, Int_t *, Bool_t) >(&TApplication::ExecuteFile));
    module_.method("TApplication!ExecuteFile", [](const char * arg0)->Longptr_t { return TApplication::ExecuteFile(arg0); });
    module_.method("TApplication!ExecuteFile", [](const char * arg0, Int_t * arg1)->Longptr_t { return TApplication::ExecuteFile(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for TList * TApplication::GetApplications() (" __HERE__ ")");
    // signature to use in the veto list: TList * TApplication::GetApplications()
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:163:20
    module_.method("TApplication!GetApplications", static_cast<TList * (*)() >(&TApplication::GetApplications));

    DEBUG_MSG("Adding wrapper for void TApplication::CreateApplication() (" __HERE__ ")");
    // signature to use in the veto list: void TApplication::CreateApplication()
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:164:20
    module_.method("TApplication!CreateApplication", static_cast<void (*)() >(&TApplication::CreateApplication));

    DEBUG_MSG("Adding wrapper for void TApplication::NeedGraphicsLibs() (" __HERE__ ")");
    // signature to use in the veto list: void TApplication::NeedGraphicsLibs()
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:165:20
    module_.method("TApplication!NeedGraphicsLibs", static_cast<void (*)() >(&TApplication::NeedGraphicsLibs));

    DEBUG_MSG("Adding wrapper for Version_t TApplication::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TApplication::Class_Version()
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:167:4
    module_.method("TApplication!Class_Version", static_cast<Version_t (*)() >(&TApplication::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * TApplication::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TApplication::IsA()
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:167:4
    t.method("IsA", static_cast<TClass * (TApplication::*)()  const>(&TApplication::IsA));

    DEBUG_MSG("Adding wrapper for void TApplication::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TApplication::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:167:4
    t.method("StreamerNVirtual", static_cast<void (TApplication::*)(TBuffer &) >(&TApplication::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * TApplication::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TApplication::DeclFileName()
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:167:4
    module_.method("TApplication!DeclFileName", []() { return (std::string)TApplication::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TApplication::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TApplication::ImplFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:167:4
    module_.method("TApplication!ImplFileLine", static_cast<int (*)() >(&TApplication::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * TApplication::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TApplication::ImplFileName()
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:167:4
    module_.method("TApplication!ImplFileName", []() { return (std::string)TApplication::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TApplication::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TApplication::Class_Name()
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:167:4
    module_.method("TApplication!Class_Name", []() { return (std::string)TApplication::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TApplication::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TApplication::Dictionary()
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:167:4
    module_.method("TApplication!Dictionary", static_cast<TClass * (*)() >(&TApplication::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * TApplication::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TApplication::Class()
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:167:4
    module_.method("TApplication!Class", static_cast<TClass * (*)() >(&TApplication::Class));

    DEBUG_MSG("Adding wrapper for void TApplication::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TApplication::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:167:4
    t.method("Streamer", static_cast<void (TApplication::*)(TBuffer &) >(&TApplication::Streamer));

    DEBUG_MSG("Adding wrapper for int TApplication::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TApplication::DeclFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:167:4
    module_.method("TApplication!DeclFileLine", static_cast<int (*)() >(&TApplication::DeclFileLine));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TApplication>> type_;
};
std::shared_ptr<Wrapper> newJlTApplication(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTApplication(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TInterpreter> : std::false_type { };
  template<> struct DefaultConstructible<TInterpreter> : std::false_type { };
template<> struct SuperType<TInterpreter> { typedef TNamed type; };
}

// Class generating the wrapper for type TInterpreter
// signature to use in the veto file: TInterpreter
struct JlTInterpreter: public Wrapper {

  JlTInterpreter(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TInterpreter (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TInterpreter.h:60:7
    jlcxx::TypeWrapper<TInterpreter>  t = jlModule.add_type<TInterpreter>("TInterpreter",
      jlcxx::julia_base_type<TNamed>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TInterpreter>>(new jlcxx::TypeWrapper<TInterpreter>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TInterpreter>> type_;
};
std::shared_ptr<Wrapper> newJlTInterpreter(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTInterpreter(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<std::type_info> : std::false_type { };
  template<> struct DefaultConstructible<std::type_info> : std::false_type { };
}

// Class generating the wrapper for type std::type_info
// signature to use in the veto file: std::type_info
struct Jlstd_type_info: public Wrapper {

  Jlstd_type_info(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type std::type_info (" __HERE__ ")");
    // defined in /usr/lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/typeinfo:92:9
    jlcxx::TypeWrapper<std::type_info>  t = jlModule.add_type<std::type_info>("std!type_info");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<std::type_info>>(new jlcxx::TypeWrapper<std::type_info>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<std::type_info>> type_;
};
std::shared_ptr<Wrapper> newJlstd_type_info(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new Jlstd_type_info(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TDataType> : std::false_type { };
  template<> struct DefaultConstructible<TDataType> : std::false_type { };
template<> struct SuperType<TDataType> { typedef TDictionary type; };
}

// Class generating the wrapper for type TDataType
// signature to use in the veto file: TDataType
struct JlTDataType: public Wrapper {

  JlTDataType(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TDataType (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TDataType.h:44:7
    jlcxx::TypeWrapper<TDataType>  t = jlModule.add_type<TDataType>("TDataType",
      jlcxx::julia_base_type<TDictionary>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TDataType>>(new jlcxx::TypeWrapper<TDataType>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TDataType>> type_;
};
std::shared_ptr<Wrapper> newJlTDataType(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTDataType(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TAxis> : std::false_type { };
  template<> struct DefaultConstructible<TAxis> : std::false_type { };
template<> struct SuperType<TAxis> { typedef TNamed type; };
}

// Class generating the wrapper for type TAxis
// signature to use in the veto file: TAxis
struct JlTAxis: public Wrapper {

  JlTAxis(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TAxis (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:31:7
    jlcxx::TypeWrapper<TAxis>  t = jlModule.add_type<TAxis>("TAxis",
      jlcxx::julia_base_type<TNamed>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TAxis>>(new jlcxx::TypeWrapper<TAxis>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TAxis::TAxis(Int_t, Double_t, Double_t) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:80:4
    t.constructor<Int_t, Double_t, Double_t>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TAxis::TAxis(Int_t, const Double_t *) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:81:4
    t.constructor<Int_t, const Double_t *>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TAxis::TAxis(const TAxis &) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:82:4
    t.constructor<const TAxis &>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for TAxis & TAxis::operator=(const TAxis &) (" __HERE__ ")");
    // signature to use in the veto list: TAxis & TAxis::operator=(const TAxis &)
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:84:11
    t.method("assign", static_cast<TAxis & (TAxis::*)(const TAxis &) >(&TAxis::operator=));

    DEBUG_MSG("Adding wrapper for Bool_t TAxis::CanExtend() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TAxis::CanExtend()
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:86:15
    t.method("CanExtend", static_cast<Bool_t (TAxis::*)()  const>(&TAxis::CanExtend));

    DEBUG_MSG("Adding wrapper for Bool_t TAxis::CanBeAlphanumeric() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TAxis::CanBeAlphanumeric()
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:87:15
    t.method("CanBeAlphanumeric", static_cast<Bool_t (TAxis::*)() >(&TAxis::CanBeAlphanumeric));

    DEBUG_MSG("Adding wrapper for Bool_t TAxis::IsAlphanumeric() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TAxis::IsAlphanumeric()
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:88:15
    t.method("IsAlphanumeric", static_cast<Bool_t (TAxis::*)()  const>(&TAxis::IsAlphanumeric));

    DEBUG_MSG("Adding wrapper for void TAxis::SetAlphanumeric(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TAxis::SetAlphanumeric(Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:89:15
    t.method("SetAlphanumeric", static_cast<void (TAxis::*)(Bool_t) >(&TAxis::SetAlphanumeric));
    t.method("SetAlphanumeric", [](TAxis& a)->void { a.SetAlphanumeric(); });
    t.method("SetAlphanumeric", [](TAxis* a)->void { a->SetAlphanumeric(); });

    DEBUG_MSG("Adding wrapper for void TAxis::SetCanExtend(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TAxis::SetCanExtend(Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:90:15
    t.method("SetCanExtend", static_cast<void (TAxis::*)(Bool_t) >(&TAxis::SetCanExtend));

    DEBUG_MSG("Adding wrapper for void TAxis::SetNoAlphanumeric(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TAxis::SetNoAlphanumeric(Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:91:15
    t.method("SetNoAlphanumeric", static_cast<void (TAxis::*)(Bool_t) >(&TAxis::SetNoAlphanumeric));
    t.method("SetNoAlphanumeric", [](TAxis& a)->void { a.SetNoAlphanumeric(); });
    t.method("SetNoAlphanumeric", [](TAxis* a)->void { a->SetNoAlphanumeric(); });

    DEBUG_MSG("Adding wrapper for void TAxis::CenterLabels(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TAxis::CenterLabels(Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:98:23
    t.method("CenterLabels", static_cast<void (TAxis::*)(Bool_t) >(&TAxis::CenterLabels));
    t.method("CenterLabels", [](TAxis& a)->void { a.CenterLabels(); });
    t.method("CenterLabels", [](TAxis* a)->void { a->CenterLabels(); });

    DEBUG_MSG("Adding wrapper for void TAxis::CenterTitle(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TAxis::CenterTitle(Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:99:23
    t.method("CenterTitle", static_cast<void (TAxis::*)(Bool_t) >(&TAxis::CenterTitle));
    t.method("CenterTitle", [](TAxis& a)->void { a.CenterTitle(); });
    t.method("CenterTitle", [](TAxis* a)->void { a->CenterTitle(); });

    DEBUG_MSG("Adding wrapper for const char * TAxis::ChooseTimeFormat(Double_t) (" __HERE__ ")");
    // signature to use in the veto list: const char * TAxis::ChooseTimeFormat(Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:100:23
    t.method("ChooseTimeFormat", [](TAxis& a) { return (std::string)a.ChooseTimeFormat(); });
    t.method("ChooseTimeFormat", [](TAxis& a, Double_t arg0) { return (std::string)a.ChooseTimeFormat(arg0); });
    t.method("ChooseTimeFormat", [](TAxis* a) { return (std::string)a->ChooseTimeFormat(); });
    t.method("ChooseTimeFormat", [](TAxis* a, Double_t arg0) { return (std::string)a->ChooseTimeFormat(arg0); });

    DEBUG_MSG("Adding wrapper for void TAxis::Copy(TObject &) (" __HERE__ ")");
    // signature to use in the veto list: void TAxis::Copy(TObject &)
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:101:15
    t.method("Copy", static_cast<void (TAxis::*)(TObject &)  const>(&TAxis::Copy));

    DEBUG_MSG("Adding wrapper for void TAxis::Delete(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TAxis::Delete(Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:102:15
    t.method("Delete", static_cast<void (TAxis::*)(Option_t *) >(&TAxis::Delete));
    t.method("Delete", [](TAxis& a)->void { a.Delete(); });
    t.method("Delete", [](TAxis* a)->void { a->Delete(); });

    DEBUG_MSG("Adding wrapper for Int_t TAxis::DistancetoPrimitive(Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TAxis::DistancetoPrimitive(Int_t, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:103:15
    t.method("DistancetoPrimitive", static_cast<Int_t (TAxis::*)(Int_t, Int_t) >(&TAxis::DistancetoPrimitive));

    DEBUG_MSG("Adding wrapper for TObject * TAxis::DrawClone(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: TObject * TAxis::DrawClone(Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:104:15
    t.method("DrawClone", static_cast<TObject * (TAxis::*)(Option_t *)  const>(&TAxis::DrawClone));
    t.method("DrawClone", [](TAxis const& a)->TObject * { return a.DrawClone(); });
    t.method("DrawClone", [](TAxis const* a)->TObject * { return a->DrawClone(); });

    DEBUG_MSG("Adding wrapper for void TAxis::ExecuteEvent(Int_t, Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TAxis::ExecuteEvent(Int_t, Int_t, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:105:15
    t.method("ExecuteEvent", static_cast<void (TAxis::*)(Int_t, Int_t, Int_t) >(&TAxis::ExecuteEvent));

    DEBUG_MSG("Adding wrapper for Int_t TAxis::FindBin(Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TAxis::FindBin(Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:106:23
    t.method("FindBin", static_cast<Int_t (TAxis::*)(Double_t) >(&TAxis::FindBin));

    DEBUG_MSG("Adding wrapper for Int_t TAxis::FindBin(Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TAxis::FindBin(Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:107:23
    t.method("FindBin", static_cast<Int_t (TAxis::*)(Double_t)  const>(&TAxis::FindBin));

    DEBUG_MSG("Adding wrapper for Int_t TAxis::FindBin(const char *) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TAxis::FindBin(const char *)
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:108:23
    t.method("FindBin", static_cast<Int_t (TAxis::*)(const char *) >(&TAxis::FindBin));

    DEBUG_MSG("Adding wrapper for Int_t TAxis::FindFixBin(Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TAxis::FindFixBin(Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:109:23
    t.method("FindFixBin", static_cast<Int_t (TAxis::*)(Double_t)  const>(&TAxis::FindFixBin));

    DEBUG_MSG("Adding wrapper for Int_t TAxis::FindFixBin(const char *) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TAxis::FindFixBin(const char *)
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:110:23
    t.method("FindFixBin", static_cast<Int_t (TAxis::*)(const char *)  const>(&TAxis::FindFixBin));

    DEBUG_MSG("Adding wrapper for Double_t TAxis::GetBinCenter(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TAxis::GetBinCenter(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:111:23
    t.method("GetBinCenter", static_cast<Double_t (TAxis::*)(Int_t)  const>(&TAxis::GetBinCenter));

    DEBUG_MSG("Adding wrapper for Double_t TAxis::GetBinCenterLog(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TAxis::GetBinCenterLog(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:112:23
    t.method("GetBinCenterLog", static_cast<Double_t (TAxis::*)(Int_t)  const>(&TAxis::GetBinCenterLog));

    DEBUG_MSG("Adding wrapper for const char * TAxis::GetBinLabel(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: const char * TAxis::GetBinLabel(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:113:23
    t.method("GetBinLabel", [](TAxis const& a, Int_t arg0) { return (std::string)a.GetBinLabel(arg0); });
    t.method("GetBinLabel", [](TAxis const* a, Int_t arg0) { return (std::string)a->GetBinLabel(arg0); });

    DEBUG_MSG("Adding wrapper for Double_t TAxis::GetBinLowEdge(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TAxis::GetBinLowEdge(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:114:23
    t.method("GetBinLowEdge", static_cast<Double_t (TAxis::*)(Int_t)  const>(&TAxis::GetBinLowEdge));

    DEBUG_MSG("Adding wrapper for Double_t TAxis::GetBinUpEdge(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TAxis::GetBinUpEdge(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:115:23
    t.method("GetBinUpEdge", static_cast<Double_t (TAxis::*)(Int_t)  const>(&TAxis::GetBinUpEdge));

    DEBUG_MSG("Adding wrapper for Double_t TAxis::GetBinWidth(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TAxis::GetBinWidth(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:116:23
    t.method("GetBinWidth", static_cast<Double_t (TAxis::*)(Int_t)  const>(&TAxis::GetBinWidth));

    DEBUG_MSG("Adding wrapper for void TAxis::GetCenter(Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TAxis::GetCenter(Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:117:23
    t.method("GetCenter", static_cast<void (TAxis::*)(Double_t *)  const>(&TAxis::GetCenter));

    DEBUG_MSG("Adding wrapper for Bool_t TAxis::GetCenterLabels() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TAxis::GetCenterLabels()
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:118:23
    t.method("GetCenterLabels", static_cast<Bool_t (TAxis::*)()  const>(&TAxis::GetCenterLabels));

    DEBUG_MSG("Adding wrapper for Bool_t TAxis::GetCenterTitle() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TAxis::GetCenterTitle()
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:119:23
    t.method("GetCenterTitle", static_cast<Bool_t (TAxis::*)()  const>(&TAxis::GetCenterTitle));

    DEBUG_MSG("Adding wrapper for Bool_t TAxis::GetDecimals() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TAxis::GetDecimals()
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:120:23
    t.method("GetDecimals", static_cast<Bool_t (TAxis::*)()  const>(&TAxis::GetDecimals));

    DEBUG_MSG("Adding wrapper for TList * TAxis::GetModifiedLabels() (" __HERE__ ")");
    // signature to use in the veto list: TList * TAxis::GetModifiedLabels()
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:122:23
    t.method("GetModifiedLabels", static_cast<TList * (TAxis::*)()  const>(&TAxis::GetModifiedLabels));

    DEBUG_MSG("Adding wrapper for void TAxis::GetLowEdge(Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TAxis::GetLowEdge(Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:123:23
    t.method("GetLowEdge", static_cast<void (TAxis::*)(Double_t *)  const>(&TAxis::GetLowEdge));

    DEBUG_MSG("Adding wrapper for Bool_t TAxis::GetMoreLogLabels() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TAxis::GetMoreLogLabels()
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:124:23
    t.method("GetMoreLogLabels", static_cast<Bool_t (TAxis::*)()  const>(&TAxis::GetMoreLogLabels));

    DEBUG_MSG("Adding wrapper for Int_t TAxis::GetNbins() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TAxis::GetNbins()
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:125:23
    t.method("GetNbins", static_cast<Int_t (TAxis::*)()  const>(&TAxis::GetNbins));

    DEBUG_MSG("Adding wrapper for Int_t TAxis::GetNlabels() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TAxis::GetNlabels()
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:126:23
    t.method("GetNlabels", static_cast<Int_t (TAxis::*)()  const>(&TAxis::GetNlabels));

    DEBUG_MSG("Adding wrapper for Bool_t TAxis::GetNoExponent() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TAxis::GetNoExponent()
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:127:23
    t.method("GetNoExponent", static_cast<Bool_t (TAxis::*)()  const>(&TAxis::GetNoExponent));

    DEBUG_MSG("Adding wrapper for TObject * TAxis::GetParent() (" __HERE__ ")");
    // signature to use in the veto list: TObject * TAxis::GetParent()
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:128:23
    t.method("GetParent", static_cast<TObject * (TAxis::*)()  const>(&TAxis::GetParent));

    DEBUG_MSG("Adding wrapper for Bool_t TAxis::GetRotateTitle() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TAxis::GetRotateTitle()
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:129:23
    t.method("GetRotateTitle", static_cast<Bool_t (TAxis::*)()  const>(&TAxis::GetRotateTitle));

    DEBUG_MSG("Adding wrapper for const char * TAxis::GetTicks() (" __HERE__ ")");
    // signature to use in the veto list: const char * TAxis::GetTicks()
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:130:24
    t.method("GetTicks", [](TAxis const& a) { return (std::string)a.GetTicks(); });
    t.method("GetTicks", [](TAxis const* a) { return (std::string)a->GetTicks(); });

    DEBUG_MSG("Adding wrapper for Bool_t TAxis::GetTimeDisplay() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TAxis::GetTimeDisplay()
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:131:23
    t.method("GetTimeDisplay", static_cast<Bool_t (TAxis::*)()  const>(&TAxis::GetTimeDisplay));

    DEBUG_MSG("Adding wrapper for const char * TAxis::GetTimeFormat() (" __HERE__ ")");
    // signature to use in the veto list: const char * TAxis::GetTimeFormat()
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:132:24
    t.method("GetTimeFormat", [](TAxis const& a) { return (std::string)a.GetTimeFormat(); });
    t.method("GetTimeFormat", [](TAxis const* a) { return (std::string)a->GetTimeFormat(); });

    DEBUG_MSG("Adding wrapper for const char * TAxis::GetTimeFormatOnly() (" __HERE__ ")");
    // signature to use in the veto list: const char * TAxis::GetTimeFormatOnly()
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:133:24
    t.method("GetTimeFormatOnly", [](TAxis const& a) { return (std::string)a.GetTimeFormatOnly(); });
    t.method("GetTimeFormatOnly", [](TAxis const* a) { return (std::string)a->GetTimeFormatOnly(); });

    DEBUG_MSG("Adding wrapper for UInt_t TAxis::GetTimeOffset() (" __HERE__ ")");
    // signature to use in the veto list: UInt_t TAxis::GetTimeOffset()
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:134:24
    t.method("GetTimeOffset", static_cast<UInt_t (TAxis::*)() >(&TAxis::GetTimeOffset));

    DEBUG_MSG("Adding wrapper for const char * TAxis::GetTitle() (" __HERE__ ")");
    // signature to use in the veto list: const char * TAxis::GetTitle()
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:135:23
    t.method("GetTitle", [](TAxis const& a) { return (std::string)a.GetTitle(); });
    t.method("GetTitle", [](TAxis const* a) { return (std::string)a->GetTitle(); });

    DEBUG_MSG("Adding wrapper for const TArrayD * TAxis::GetXbins() (" __HERE__ ")");
    // signature to use in the veto list: const TArrayD * TAxis::GetXbins()
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:136:23
    t.method("GetXbins", static_cast<const TArrayD * (TAxis::*)()  const>(&TAxis::GetXbins));

    DEBUG_MSG("Adding wrapper for Int_t TAxis::GetFirst() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TAxis::GetFirst()
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:137:23
    t.method("GetFirst", static_cast<Int_t (TAxis::*)()  const>(&TAxis::GetFirst));

    DEBUG_MSG("Adding wrapper for Int_t TAxis::GetLast() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TAxis::GetLast()
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:138:23
    t.method("GetLast", static_cast<Int_t (TAxis::*)()  const>(&TAxis::GetLast));

    DEBUG_MSG("Adding wrapper for Double_t TAxis::GetXmin() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TAxis::GetXmin()
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:139:23
    t.method("GetXmin", static_cast<Double_t (TAxis::*)()  const>(&TAxis::GetXmin));

    DEBUG_MSG("Adding wrapper for Double_t TAxis::GetXmax() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TAxis::GetXmax()
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:140:23
    t.method("GetXmax", static_cast<Double_t (TAxis::*)()  const>(&TAxis::GetXmax));

    DEBUG_MSG("Adding wrapper for void TAxis::ImportAttributes(const TAxis *) (" __HERE__ ")");
    // signature to use in the veto list: void TAxis::ImportAttributes(const TAxis *)
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:141:23
    t.method("ImportAttributes", static_cast<void (TAxis::*)(const TAxis *) >(&TAxis::ImportAttributes));

    DEBUG_MSG("Adding wrapper for Bool_t TAxis::IsVariableBinSize() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TAxis::IsVariableBinSize()
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:142:23
    t.method("IsVariableBinSize", static_cast<Bool_t (TAxis::*)()  const>(&TAxis::IsVariableBinSize));

    DEBUG_MSG("Adding wrapper for void TAxis::LabelsOption(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TAxis::LabelsOption(Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:146:23
    t.method("LabelsOption", static_cast<void (TAxis::*)(Option_t *) >(&TAxis::LabelsOption));
    t.method("LabelsOption", [](TAxis& a)->void { a.LabelsOption(); });
    t.method("LabelsOption", [](TAxis* a)->void { a->LabelsOption(); });

    DEBUG_MSG("Adding wrapper for void TAxis::RotateTitle(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TAxis::RotateTitle(Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:147:23
    t.method("RotateTitle", static_cast<void (TAxis::*)(Bool_t) >(&TAxis::RotateTitle));
    t.method("RotateTitle", [](TAxis& a)->void { a.RotateTitle(); });
    t.method("RotateTitle", [](TAxis* a)->void { a->RotateTitle(); });

    DEBUG_MSG("Adding wrapper for void TAxis::Set(Int_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TAxis::Set(Int_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:149:23
    t.method("Set", static_cast<void (TAxis::*)(Int_t, Double_t, Double_t) >(&TAxis::Set));

    DEBUG_MSG("Adding wrapper for void TAxis::Set(Int_t, const Float_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TAxis::Set(Int_t, const Float_t *)
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:150:23
    t.method("Set", static_cast<void (TAxis::*)(Int_t, const Float_t *) >(&TAxis::Set));

    DEBUG_MSG("Adding wrapper for void TAxis::Set(Int_t, const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TAxis::Set(Int_t, const Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:151:23
    t.method("Set", static_cast<void (TAxis::*)(Int_t, const Double_t *) >(&TAxis::Set));

    DEBUG_MSG("Adding wrapper for void TAxis::SetBinLabel(Int_t, const char *) (" __HERE__ ")");
    // signature to use in the veto list: void TAxis::SetBinLabel(Int_t, const char *)
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:152:23
    t.method("SetBinLabel", static_cast<void (TAxis::*)(Int_t, const char *) >(&TAxis::SetBinLabel));

    DEBUG_MSG("Adding wrapper for void TAxis::SetDecimals(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TAxis::SetDecimals(Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:153:23
    t.method("SetDecimals", static_cast<void (TAxis::*)(Bool_t) >(&TAxis::SetDecimals));
    t.method("SetDecimals", [](TAxis& a)->void { a.SetDecimals(); });
    t.method("SetDecimals", [](TAxis* a)->void { a->SetDecimals(); });

    DEBUG_MSG("Adding wrapper for void TAxis::SetDefaults() (" __HERE__ ")");
    // signature to use in the veto list: void TAxis::SetDefaults()
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:154:23
    t.method("SetDefaults", static_cast<void (TAxis::*)() >(&TAxis::SetDefaults));

    DEBUG_MSG("Adding wrapper for void TAxis::SetDrawOption(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TAxis::SetDrawOption(Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:155:15
    t.method("SetDrawOption", static_cast<void (TAxis::*)(Option_t *) >(&TAxis::SetDrawOption));
    t.method("SetDrawOption", [](TAxis& a)->void { a.SetDrawOption(); });
    t.method("SetDrawOption", [](TAxis* a)->void { a->SetDrawOption(); });

    DEBUG_MSG("Adding wrapper for void TAxis::ChangeLabel(Int_t, Double_t, Double_t, Int_t, Int_t, Int_t, const TString &) (" __HERE__ ")");
    // signature to use in the veto list: void TAxis::ChangeLabel(Int_t, Double_t, Double_t, Int_t, Int_t, Int_t, const TString &)
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:156:23
    t.method("ChangeLabel", static_cast<void (TAxis::*)(Int_t, Double_t, Double_t, Int_t, Int_t, Int_t, const TString &) >(&TAxis::ChangeLabel));
    t.method("ChangeLabel", [](TAxis& a)->void { a.ChangeLabel(); });
    t.method("ChangeLabel", [](TAxis& a, Int_t arg0)->void { a.ChangeLabel(arg0); });
    t.method("ChangeLabel", [](TAxis& a, Int_t arg0, Double_t arg1)->void { a.ChangeLabel(arg0, arg1); });
    t.method("ChangeLabel", [](TAxis& a, Int_t arg0, Double_t arg1, Double_t arg2)->void { a.ChangeLabel(arg0, arg1, arg2); });
    t.method("ChangeLabel", [](TAxis& a, Int_t arg0, Double_t arg1, Double_t arg2, Int_t arg3)->void { a.ChangeLabel(arg0, arg1, arg2, arg3); });
    t.method("ChangeLabel", [](TAxis& a, Int_t arg0, Double_t arg1, Double_t arg2, Int_t arg3, Int_t arg4)->void { a.ChangeLabel(arg0, arg1, arg2, arg3, arg4); });
    t.method("ChangeLabel", [](TAxis& a, Int_t arg0, Double_t arg1, Double_t arg2, Int_t arg3, Int_t arg4, Int_t arg5)->void { a.ChangeLabel(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("ChangeLabel", [](TAxis* a)->void { a->ChangeLabel(); });
    t.method("ChangeLabel", [](TAxis* a, Int_t arg0)->void { a->ChangeLabel(arg0); });
    t.method("ChangeLabel", [](TAxis* a, Int_t arg0, Double_t arg1)->void { a->ChangeLabel(arg0, arg1); });
    t.method("ChangeLabel", [](TAxis* a, Int_t arg0, Double_t arg1, Double_t arg2)->void { a->ChangeLabel(arg0, arg1, arg2); });
    t.method("ChangeLabel", [](TAxis* a, Int_t arg0, Double_t arg1, Double_t arg2, Int_t arg3)->void { a->ChangeLabel(arg0, arg1, arg2, arg3); });
    t.method("ChangeLabel", [](TAxis* a, Int_t arg0, Double_t arg1, Double_t arg2, Int_t arg3, Int_t arg4)->void { a->ChangeLabel(arg0, arg1, arg2, arg3, arg4); });
    t.method("ChangeLabel", [](TAxis* a, Int_t arg0, Double_t arg1, Double_t arg2, Int_t arg3, Int_t arg4, Int_t arg5)->void { a->ChangeLabel(arg0, arg1, arg2, arg3, arg4, arg5); });

    DEBUG_MSG("Adding wrapper for void TAxis::ChangeLabelByValue(Double_t, Double_t, Double_t, Int_t, Int_t, Int_t, const TString &) (" __HERE__ ")");
    // signature to use in the veto list: void TAxis::ChangeLabelByValue(Double_t, Double_t, Double_t, Int_t, Int_t, Int_t, const TString &)
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:160:23
    t.method("ChangeLabelByValue", static_cast<void (TAxis::*)(Double_t, Double_t, Double_t, Int_t, Int_t, Int_t, const TString &) >(&TAxis::ChangeLabelByValue));
    t.method("ChangeLabelByValue", [](TAxis& a, Double_t arg0)->void { a.ChangeLabelByValue(arg0); });
    t.method("ChangeLabelByValue", [](TAxis& a, Double_t arg0, Double_t arg1)->void { a.ChangeLabelByValue(arg0, arg1); });
    t.method("ChangeLabelByValue", [](TAxis& a, Double_t arg0, Double_t arg1, Double_t arg2)->void { a.ChangeLabelByValue(arg0, arg1, arg2); });
    t.method("ChangeLabelByValue", [](TAxis& a, Double_t arg0, Double_t arg1, Double_t arg2, Int_t arg3)->void { a.ChangeLabelByValue(arg0, arg1, arg2, arg3); });
    t.method("ChangeLabelByValue", [](TAxis& a, Double_t arg0, Double_t arg1, Double_t arg2, Int_t arg3, Int_t arg4)->void { a.ChangeLabelByValue(arg0, arg1, arg2, arg3, arg4); });
    t.method("ChangeLabelByValue", [](TAxis& a, Double_t arg0, Double_t arg1, Double_t arg2, Int_t arg3, Int_t arg4, Int_t arg5)->void { a.ChangeLabelByValue(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("ChangeLabelByValue", [](TAxis* a, Double_t arg0)->void { a->ChangeLabelByValue(arg0); });
    t.method("ChangeLabelByValue", [](TAxis* a, Double_t arg0, Double_t arg1)->void { a->ChangeLabelByValue(arg0, arg1); });
    t.method("ChangeLabelByValue", [](TAxis* a, Double_t arg0, Double_t arg1, Double_t arg2)->void { a->ChangeLabelByValue(arg0, arg1, arg2); });
    t.method("ChangeLabelByValue", [](TAxis* a, Double_t arg0, Double_t arg1, Double_t arg2, Int_t arg3)->void { a->ChangeLabelByValue(arg0, arg1, arg2, arg3); });
    t.method("ChangeLabelByValue", [](TAxis* a, Double_t arg0, Double_t arg1, Double_t arg2, Int_t arg3, Int_t arg4)->void { a->ChangeLabelByValue(arg0, arg1, arg2, arg3, arg4); });
    t.method("ChangeLabelByValue", [](TAxis* a, Double_t arg0, Double_t arg1, Double_t arg2, Int_t arg3, Int_t arg4, Int_t arg5)->void { a->ChangeLabelByValue(arg0, arg1, arg2, arg3, arg4, arg5); });

    DEBUG_MSG("Adding wrapper for void TAxis::SetLimits(Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TAxis::SetLimits(Double_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:164:23
    t.method("SetLimits", static_cast<void (TAxis::*)(Double_t, Double_t) >(&TAxis::SetLimits));

    DEBUG_MSG("Adding wrapper for void TAxis::SetMoreLogLabels(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TAxis::SetMoreLogLabels(Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:165:23
    t.method("SetMoreLogLabels", static_cast<void (TAxis::*)(Bool_t) >(&TAxis::SetMoreLogLabels));
    t.method("SetMoreLogLabels", [](TAxis& a)->void { a.SetMoreLogLabels(); });
    t.method("SetMoreLogLabels", [](TAxis* a)->void { a->SetMoreLogLabels(); });

    DEBUG_MSG("Adding wrapper for void TAxis::SetNoExponent(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TAxis::SetNoExponent(Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:166:23
    t.method("SetNoExponent", static_cast<void (TAxis::*)(Bool_t) >(&TAxis::SetNoExponent));
    t.method("SetNoExponent", [](TAxis& a)->void { a.SetNoExponent(); });
    t.method("SetNoExponent", [](TAxis* a)->void { a->SetNoExponent(); });

    DEBUG_MSG("Adding wrapper for void TAxis::SetParent(TObject *) (" __HERE__ ")");
    // signature to use in the veto list: void TAxis::SetParent(TObject *)
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:167:23
    t.method("SetParent", static_cast<void (TAxis::*)(TObject *) >(&TAxis::SetParent));

    DEBUG_MSG("Adding wrapper for void TAxis::SetRange(Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TAxis::SetRange(Int_t, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:168:23
    t.method("SetRange", static_cast<void (TAxis::*)(Int_t, Int_t) >(&TAxis::SetRange));
    t.method("SetRange", [](TAxis& a)->void { a.SetRange(); });
    t.method("SetRange", [](TAxis& a, Int_t arg0)->void { a.SetRange(arg0); });
    t.method("SetRange", [](TAxis* a)->void { a->SetRange(); });
    t.method("SetRange", [](TAxis* a, Int_t arg0)->void { a->SetRange(arg0); });

    DEBUG_MSG("Adding wrapper for void TAxis::SetRangeUser(Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TAxis::SetRangeUser(Double_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:169:23
    t.method("SetRangeUser", static_cast<void (TAxis::*)(Double_t, Double_t) >(&TAxis::SetRangeUser));

    DEBUG_MSG("Adding wrapper for void TAxis::SetTicks(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TAxis::SetTicks(Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:170:23
    t.method("SetTicks", static_cast<void (TAxis::*)(Option_t *) >(&TAxis::SetTicks));
    t.method("SetTicks", [](TAxis& a)->void { a.SetTicks(); });
    t.method("SetTicks", [](TAxis* a)->void { a->SetTicks(); });

    DEBUG_MSG("Adding wrapper for void TAxis::SetTimeDisplay(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TAxis::SetTimeDisplay(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:171:23
    t.method("SetTimeDisplay", static_cast<void (TAxis::*)(Int_t) >(&TAxis::SetTimeDisplay));

    DEBUG_MSG("Adding wrapper for void TAxis::SetTimeFormat(const char *) (" __HERE__ ")");
    // signature to use in the veto list: void TAxis::SetTimeFormat(const char *)
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:172:23
    t.method("SetTimeFormat", static_cast<void (TAxis::*)(const char *) >(&TAxis::SetTimeFormat));
    t.method("SetTimeFormat", [](TAxis& a)->void { a.SetTimeFormat(); });
    t.method("SetTimeFormat", [](TAxis* a)->void { a->SetTimeFormat(); });

    DEBUG_MSG("Adding wrapper for void TAxis::SetTimeOffset(Double_t, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TAxis::SetTimeOffset(Double_t, Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:173:23
    t.method("SetTimeOffset", static_cast<void (TAxis::*)(Double_t, Option_t *) >(&TAxis::SetTimeOffset));
    t.method("SetTimeOffset", [](TAxis& a, Double_t arg0)->void { a.SetTimeOffset(arg0); });
    t.method("SetTimeOffset", [](TAxis* a, Double_t arg0)->void { a->SetTimeOffset(arg0); });

    DEBUG_MSG("Adding wrapper for void TAxis::UnZoom() (" __HERE__ ")");
    // signature to use in the veto list: void TAxis::UnZoom()
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:174:23
    t.method("UnZoom", static_cast<void (TAxis::*)() >(&TAxis::UnZoom));

    DEBUG_MSG("Adding wrapper for void TAxis::ZoomOut(Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TAxis::ZoomOut(Double_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:175:23
    t.method("ZoomOut", static_cast<void (TAxis::*)(Double_t, Double_t) >(&TAxis::ZoomOut));
    t.method("ZoomOut", [](TAxis& a)->void { a.ZoomOut(); });
    t.method("ZoomOut", [](TAxis& a, Double_t arg0)->void { a.ZoomOut(arg0); });
    t.method("ZoomOut", [](TAxis* a)->void { a->ZoomOut(); });
    t.method("ZoomOut", [](TAxis* a, Double_t arg0)->void { a->ZoomOut(arg0); });

    DEBUG_MSG("Adding wrapper for Version_t TAxis::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TAxis::Class_Version()
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:177:4
    module_.method("TAxis!Class_Version", static_cast<Version_t (*)() >(&TAxis::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * TAxis::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TAxis::IsA()
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:177:4
    t.method("IsA", static_cast<TClass * (TAxis::*)()  const>(&TAxis::IsA));

    DEBUG_MSG("Adding wrapper for void TAxis::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TAxis::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:177:4
    t.method("StreamerNVirtual", static_cast<void (TAxis::*)(TBuffer &) >(&TAxis::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * TAxis::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TAxis::DeclFileName()
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:177:4
    module_.method("TAxis!DeclFileName", []() { return (std::string)TAxis::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TAxis::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TAxis::ImplFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:177:4
    module_.method("TAxis!ImplFileLine", static_cast<int (*)() >(&TAxis::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * TAxis::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TAxis::ImplFileName()
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:177:4
    module_.method("TAxis!ImplFileName", []() { return (std::string)TAxis::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TAxis::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TAxis::Class_Name()
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:177:4
    module_.method("TAxis!Class_Name", []() { return (std::string)TAxis::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TAxis::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TAxis::Dictionary()
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:177:4
    module_.method("TAxis!Dictionary", static_cast<TClass * (*)() >(&TAxis::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * TAxis::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TAxis::Class()
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:177:4
    module_.method("TAxis!Class", static_cast<TClass * (*)() >(&TAxis::Class));

    DEBUG_MSG("Adding wrapper for void TAxis::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TAxis::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:177:4
    t.method("Streamer", static_cast<void (TAxis::*)(TBuffer &) >(&TAxis::Streamer));

    DEBUG_MSG("Adding wrapper for int TAxis::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TAxis::DeclFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TAxis.h:177:4
    module_.method("TAxis!DeclFileLine", static_cast<int (*)() >(&TAxis::DeclFileLine));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TAxis>> type_;
};
std::shared_ptr<Wrapper> newJlTAxis(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTAxis(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TArrayD> : std::false_type { };
  template<> struct DefaultConstructible<TArrayD> : std::false_type { };
}

// Class generating the wrapper for type TArrayD
// signature to use in the veto file: TArrayD
struct JlTArrayD: public Wrapper {

  JlTArrayD(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TArrayD (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TArrayD.h:27:7
    jlcxx::TypeWrapper<TArrayD>  t = jlModule.add_type<TArrayD>("TArrayD");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TArrayD>>(new jlcxx::TypeWrapper<TArrayD>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TArrayD>> type_;
};
std::shared_ptr<Wrapper> newJlTArrayD(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTArrayD(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<Foption_t> : std::false_type { };
  template<> struct DefaultConstructible<Foption_t> : std::false_type { };
}

// Class generating the wrapper for type Foption_t
// signature to use in the veto file: Foption_t
struct JlFoption_t: public Wrapper {

  JlFoption_t(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type Foption_t (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/Foption.h:24:8
    jlcxx::TypeWrapper<Foption_t>  t = jlModule.add_type<Foption_t>("Foption_t");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<Foption_t>>(new jlcxx::TypeWrapper<Foption_t>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<Foption_t>> type_;
};
std::shared_ptr<Wrapper> newJlFoption_t(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlFoption_t(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TF1> : std::false_type { };
  template<> struct DefaultConstructible<TF1> : std::false_type { };
template<> struct SuperType<TF1> { typedef TNamed type; };
}

// Class generating the wrapper for type TF1
// signature to use in the veto file: TF1
struct JlTF1: public Wrapper {

  JlTF1(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TF1 (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:214:7
    jlcxx::TypeWrapper<TF1>  t = jlModule.add_type<TF1>("TF1",
      jlcxx::julia_base_type<TNamed>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TF1>>(new jlcxx::TypeWrapper<TF1>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TF1::TF1(const char *, const char *, Double_t, Double_t, TF1::EAddToList, bool) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:331:4
    t.constructor<const char *, const char *>(/*finalize=*/true);
    t.constructor<const char *, const char *, Double_t>(/*finalize=*/true);
    t.constructor<const char *, const char *, Double_t, Double_t>(/*finalize=*/true);
    t.constructor<const char *, const char *, Double_t, Double_t, TF1::EAddToList>(/*finalize=*/true);
    t.constructor<const char *, const char *, Double_t, Double_t, TF1::EAddToList, bool>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TF1::TF1(const char *, const char *, Double_t, Double_t, Option_t *) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:332:4
    t.constructor<const char *, const char *, Double_t, Double_t, Option_t *>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TF1::TF1(const char *, Double_t, Double_t, Int_t, Int_t, TF1::EAddToList) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:333:4
    t.constructor<const char *, Double_t, Double_t, Int_t>(/*finalize=*/true);
    t.constructor<const char *, Double_t, Double_t, Int_t, Int_t>(/*finalize=*/true);
    t.constructor<const char *, Double_t, Double_t, Int_t, Int_t, TF1::EAddToList>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TF1::TF1(const char *, Double_t (*)(const Double_t *, const Double_t *), Double_t, Double_t, Int_t, Int_t, TF1::EAddToList) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:335:4
    t.constructor<const char *, Double_t (*)(const Double_t *, const Double_t *)>(/*finalize=*/true);
    t.constructor<const char *, Double_t (*)(const Double_t *, const Double_t *), Double_t>(/*finalize=*/true);
    t.constructor<const char *, Double_t (*)(const Double_t *, const Double_t *), Double_t, Double_t>(/*finalize=*/true);
    t.constructor<const char *, Double_t (*)(const Double_t *, const Double_t *), Double_t, Double_t, Int_t>(/*finalize=*/true);
    t.constructor<const char *, Double_t (*)(const Double_t *, const Double_t *), Double_t, Double_t, Int_t, Int_t>(/*finalize=*/true);
    t.constructor<const char *, Double_t (*)(const Double_t *, const Double_t *), Double_t, Double_t, Int_t, Int_t, TF1::EAddToList>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TF1::TF1(const TF1 &) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:413:4
    t.constructor<const TF1 &>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for TF1 & TF1::operator=(const TF1 &) (" __HERE__ ")");
    // signature to use in the veto list: TF1 & TF1::operator=(const TF1 &)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:414:9
    t.method("assign", static_cast<TF1 & (TF1::*)(const TF1 &) >(&TF1::operator=));

    DEBUG_MSG("Adding wrapper for void TF1::AddParameter(const TString &, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::AddParameter(const TString &, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:416:21
    t.method("AddParameter", static_cast<void (TF1::*)(const TString &, Double_t) >(&TF1::AddParameter));

    DEBUG_MSG("Adding wrapper for Bool_t TF1::AddToGlobalList(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TF1::AddToGlobalList(Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:423:21
    t.method("AddToGlobalList", static_cast<Bool_t (TF1::*)(Bool_t) >(&TF1::AddToGlobalList));
    t.method("AddToGlobalList", [](TF1& a)->Bool_t { return a.AddToGlobalList(); });
    t.method("AddToGlobalList", [](TF1* a)->Bool_t { return a->AddToGlobalList(); });

    DEBUG_MSG("Adding wrapper for Bool_t TF1::DefaultAddToGlobalList(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TF1::DefaultAddToGlobalList(Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:424:21
    module_.method("TF1!DefaultAddToGlobalList", static_cast<Bool_t (*)(Bool_t) >(&TF1::DefaultAddToGlobalList));
    module_.method("TF1!DefaultAddToGlobalList", []()->Bool_t { return TF1::DefaultAddToGlobalList(); });

    DEBUG_MSG("Adding wrapper for void TF1::Copy(TObject &) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::Copy(TObject &)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:426:13
    t.method("Copy", static_cast<void (TF1::*)(TObject &)  const>(&TF1::Copy));

    DEBUG_MSG("Adding wrapper for TObject * TF1::Clone(const char *) (" __HERE__ ")");
    // signature to use in the veto list: TObject * TF1::Clone(const char *)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:427:21
    t.method("Clone", static_cast<TObject * (TF1::*)(const char *)  const>(&TF1::Clone));
    t.method("Clone", [](TF1 const& a)->TObject * { return a.Clone(); });
    t.method("Clone", [](TF1 const* a)->TObject * { return a->Clone(); });

    DEBUG_MSG("Adding wrapper for Double_t TF1::Derivative(Double_t, Double_t *, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::Derivative(Double_t, Double_t *, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:428:21
    t.method("Derivative", static_cast<Double_t (TF1::*)(Double_t, Double_t *, Double_t)  const>(&TF1::Derivative));
    t.method("Derivative", [](TF1 const& a, Double_t arg0)->Double_t { return a.Derivative(arg0); });
    t.method("Derivative", [](TF1 const& a, Double_t arg0, Double_t * arg1)->Double_t { return a.Derivative(arg0, arg1); });
    t.method("Derivative", [](TF1 const* a, Double_t arg0)->Double_t { return a->Derivative(arg0); });
    t.method("Derivative", [](TF1 const* a, Double_t arg0, Double_t * arg1)->Double_t { return a->Derivative(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for Double_t TF1::Derivative2(Double_t, Double_t *, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::Derivative2(Double_t, Double_t *, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:429:21
    t.method("Derivative2", static_cast<Double_t (TF1::*)(Double_t, Double_t *, Double_t)  const>(&TF1::Derivative2));
    t.method("Derivative2", [](TF1 const& a, Double_t arg0)->Double_t { return a.Derivative2(arg0); });
    t.method("Derivative2", [](TF1 const& a, Double_t arg0, Double_t * arg1)->Double_t { return a.Derivative2(arg0, arg1); });
    t.method("Derivative2", [](TF1 const* a, Double_t arg0)->Double_t { return a->Derivative2(arg0); });
    t.method("Derivative2", [](TF1 const* a, Double_t arg0, Double_t * arg1)->Double_t { return a->Derivative2(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for Double_t TF1::Derivative3(Double_t, Double_t *, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::Derivative3(Double_t, Double_t *, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:430:21
    t.method("Derivative3", static_cast<Double_t (TF1::*)(Double_t, Double_t *, Double_t)  const>(&TF1::Derivative3));
    t.method("Derivative3", [](TF1 const& a, Double_t arg0)->Double_t { return a.Derivative3(arg0); });
    t.method("Derivative3", [](TF1 const& a, Double_t arg0, Double_t * arg1)->Double_t { return a.Derivative3(arg0, arg1); });
    t.method("Derivative3", [](TF1 const* a, Double_t arg0)->Double_t { return a->Derivative3(arg0); });
    t.method("Derivative3", [](TF1 const* a, Double_t arg0, Double_t * arg1)->Double_t { return a->Derivative3(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for Double_t TF1::DerivativeError() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::DerivativeError()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:431:21
    module_.method("TF1!DerivativeError", static_cast<Double_t (*)() >(&TF1::DerivativeError));

    DEBUG_MSG("Adding wrapper for Int_t TF1::DistancetoPrimitive(Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TF1::DistancetoPrimitive(Int_t, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:432:13
    t.method("DistancetoPrimitive", static_cast<Int_t (TF1::*)(Int_t, Int_t) >(&TF1::DistancetoPrimitive));

    DEBUG_MSG("Adding wrapper for void TF1::Draw(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::Draw(Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:433:13
    t.method("Draw", static_cast<void (TF1::*)(Option_t *) >(&TF1::Draw));
    t.method("Draw", [](TF1& a)->void { a.Draw(); });
    t.method("Draw", [](TF1* a)->void { a->Draw(); });

    DEBUG_MSG("Adding wrapper for TF1 * TF1::DrawCopy(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: TF1 * TF1::DrawCopy(Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:434:21
    t.method("DrawCopy", static_cast<TF1 * (TF1::*)(Option_t *)  const>(&TF1::DrawCopy));
    t.method("DrawCopy", [](TF1 const& a)->TF1 * { return a.DrawCopy(); });
    t.method("DrawCopy", [](TF1 const* a)->TF1 * { return a->DrawCopy(); });

    DEBUG_MSG("Adding wrapper for TObject * TF1::DrawDerivative(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: TObject * TF1::DrawDerivative(Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:435:21
    t.method("DrawDerivative", static_cast<TObject * (TF1::*)(Option_t *) >(&TF1::DrawDerivative));
    t.method("DrawDerivative", [](TF1& a)->TObject * { return a.DrawDerivative(); });
    t.method("DrawDerivative", [](TF1* a)->TObject * { return a->DrawDerivative(); });

    DEBUG_MSG("Adding wrapper for TObject * TF1::DrawIntegral(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: TObject * TF1::DrawIntegral(Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:436:21
    t.method("DrawIntegral", static_cast<TObject * (TF1::*)(Option_t *) >(&TF1::DrawIntegral));
    t.method("DrawIntegral", [](TF1& a)->TObject * { return a.DrawIntegral(); });
    t.method("DrawIntegral", [](TF1* a)->TObject * { return a->DrawIntegral(); });

    DEBUG_MSG("Adding wrapper for void TF1::DrawF1(Double_t, Double_t, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::DrawF1(Double_t, Double_t, Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:437:21
    t.method("DrawF1", static_cast<void (TF1::*)(Double_t, Double_t, Option_t *) >(&TF1::DrawF1));
    t.method("DrawF1", [](TF1& a, Double_t arg0, Double_t arg1)->void { a.DrawF1(arg0, arg1); });
    t.method("DrawF1", [](TF1* a, Double_t arg0, Double_t arg1)->void { a->DrawF1(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for Double_t TF1::Eval(Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::Eval(Double_t, Double_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:438:21
    t.method("Eval", static_cast<Double_t (TF1::*)(Double_t, Double_t, Double_t, Double_t)  const>(&TF1::Eval));
    t.method("Eval", [](TF1 const& a, Double_t arg0)->Double_t { return a.Eval(arg0); });
    t.method("Eval", [](TF1 const& a, Double_t arg0, Double_t arg1)->Double_t { return a.Eval(arg0, arg1); });
    t.method("Eval", [](TF1 const& a, Double_t arg0, Double_t arg1, Double_t arg2)->Double_t { return a.Eval(arg0, arg1, arg2); });
    t.method("Eval", [](TF1 const* a, Double_t arg0)->Double_t { return a->Eval(arg0); });
    t.method("Eval", [](TF1 const* a, Double_t arg0, Double_t arg1)->Double_t { return a->Eval(arg0, arg1); });
    t.method("Eval", [](TF1 const* a, Double_t arg0, Double_t arg1, Double_t arg2)->Double_t { return a->Eval(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for Double_t TF1::EvalPar(const Double_t *, const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::EvalPar(const Double_t *, const Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:440:21
    t.method("EvalPar", static_cast<Double_t (TF1::*)(const Double_t *, const Double_t *) >(&TF1::EvalPar));
    t.method("EvalPar", [](TF1& a, const Double_t * arg0)->Double_t { return a.EvalPar(arg0); });
    t.method("EvalPar", [](TF1* a, const Double_t * arg0)->Double_t { return a->EvalPar(arg0); });

    DEBUG_MSG("Adding wrapper for Double_t TF1::operator()(Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::operator()(Double_t, Double_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:442:21
    t.method("paren", static_cast<Double_t (TF1::*)(Double_t, Double_t, Double_t, Double_t)  const>(&TF1::operator()));
    t.method("paren", [](TF1 const& a, Double_t arg0)->Double_t { return a.operator()(arg0); });
    t.method("paren", [](TF1 const& a, Double_t arg0, Double_t arg1)->Double_t { return a.operator()(arg0, arg1); });
    t.method("paren", [](TF1 const& a, Double_t arg0, Double_t arg1, Double_t arg2)->Double_t { return a.operator()(arg0, arg1, arg2); });
    t.method("paren", [](TF1 const* a, Double_t arg0)->Double_t { return a->operator()(arg0); });
    t.method("paren", [](TF1 const* a, Double_t arg0, Double_t arg1)->Double_t { return a->operator()(arg0, arg1); });
    t.method("paren", [](TF1 const* a, Double_t arg0, Double_t arg1, Double_t arg2)->Double_t { return a->operator()(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void TF1::ExecuteEvent(Int_t, Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::ExecuteEvent(Int_t, Int_t, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:444:13
    t.method("ExecuteEvent", static_cast<void (TF1::*)(Int_t, Int_t, Int_t) >(&TF1::ExecuteEvent));

    DEBUG_MSG("Adding wrapper for void TF1::FixParameter(Int_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::FixParameter(Int_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:445:21
    t.method("FixParameter", static_cast<void (TF1::*)(Int_t, Double_t) >(&TF1::FixParameter));

    DEBUG_MSG("Adding wrapper for bool TF1::IsVectorized() (" __HERE__ ")");
    // signature to use in the veto list: bool TF1::IsVectorized()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:446:14
    t.method("IsVectorized", static_cast<bool (TF1::*)() >(&TF1::IsVectorized));

    DEBUG_MSG("Adding wrapper for Double_t TF1::GetChisquare() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::GetChisquare()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:450:17
    t.method("GetChisquare", static_cast<Double_t (TF1::*)()  const>(&TF1::GetChisquare));

    DEBUG_MSG("Adding wrapper for TH1 * TF1::GetHistogram() (" __HERE__ ")");
    // signature to use in the veto list: TH1 * TF1::GetHistogram()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:454:21
    t.method("GetHistogram", static_cast<TH1 * (TF1::*)()  const>(&TF1::GetHistogram));

    DEBUG_MSG("Adding wrapper for TH1 * TF1::CreateHistogram() (" __HERE__ ")");
    // signature to use in the veto list: TH1 * TF1::CreateHistogram()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:455:21
    t.method("CreateHistogram", static_cast<TH1 * (TF1::*)() >(&TF1::CreateHistogram));

    DEBUG_MSG("Adding wrapper for TFormula * TF1::GetFormula() (" __HERE__ ")");
    // signature to use in the veto list: TFormula * TF1::GetFormula()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:459:22
    t.method("GetFormula", static_cast<TFormula * (TF1::*)() >(&TF1::GetFormula));

    DEBUG_MSG("Adding wrapper for const TFormula * TF1::GetFormula() (" __HERE__ ")");
    // signature to use in the veto list: const TFormula * TF1::GetFormula()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:463:28
    t.method("GetFormula", static_cast<const TFormula * (TF1::*)()  const>(&TF1::GetFormula));

    DEBUG_MSG("Adding wrapper for TString TF1::GetExpFormula(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: TString TF1::GetExpFormula(Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:467:21
    t.method("GetExpFormula", static_cast<TString (TF1::*)(Option_t *)  const>(&TF1::GetExpFormula));
    t.method("GetExpFormula", [](TF1 const& a)->TString { return a.GetExpFormula(); });
    t.method("GetExpFormula", [](TF1 const* a)->TString { return a->GetExpFormula(); });

    DEBUG_MSG("Adding wrapper for const TObject * TF1::GetLinearPart(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: const TObject * TF1::GetLinearPart(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:471:27
    t.method("GetLinearPart", static_cast<const TObject * (TF1::*)(Int_t)  const>(&TF1::GetLinearPart));

    DEBUG_MSG("Adding wrapper for Double_t TF1::GetMaximum(Double_t, Double_t, Double_t, Int_t, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::GetMaximum(Double_t, Double_t, Double_t, Int_t, Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:475:21
    t.method("GetMaximum", static_cast<Double_t (TF1::*)(Double_t, Double_t, Double_t, Int_t, Bool_t)  const>(&TF1::GetMaximum));
    t.method("GetMaximum", [](TF1 const& a)->Double_t { return a.GetMaximum(); });
    t.method("GetMaximum", [](TF1 const& a, Double_t arg0)->Double_t { return a.GetMaximum(arg0); });
    t.method("GetMaximum", [](TF1 const& a, Double_t arg0, Double_t arg1)->Double_t { return a.GetMaximum(arg0, arg1); });
    t.method("GetMaximum", [](TF1 const& a, Double_t arg0, Double_t arg1, Double_t arg2)->Double_t { return a.GetMaximum(arg0, arg1, arg2); });
    t.method("GetMaximum", [](TF1 const& a, Double_t arg0, Double_t arg1, Double_t arg2, Int_t arg3)->Double_t { return a.GetMaximum(arg0, arg1, arg2, arg3); });
    t.method("GetMaximum", [](TF1 const* a)->Double_t { return a->GetMaximum(); });
    t.method("GetMaximum", [](TF1 const* a, Double_t arg0)->Double_t { return a->GetMaximum(arg0); });
    t.method("GetMaximum", [](TF1 const* a, Double_t arg0, Double_t arg1)->Double_t { return a->GetMaximum(arg0, arg1); });
    t.method("GetMaximum", [](TF1 const* a, Double_t arg0, Double_t arg1, Double_t arg2)->Double_t { return a->GetMaximum(arg0, arg1, arg2); });
    t.method("GetMaximum", [](TF1 const* a, Double_t arg0, Double_t arg1, Double_t arg2, Int_t arg3)->Double_t { return a->GetMaximum(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for Double_t TF1::GetMinimum(Double_t, Double_t, Double_t, Int_t, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::GetMinimum(Double_t, Double_t, Double_t, Int_t, Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:476:21
    t.method("GetMinimum", static_cast<Double_t (TF1::*)(Double_t, Double_t, Double_t, Int_t, Bool_t)  const>(&TF1::GetMinimum));
    t.method("GetMinimum", [](TF1 const& a)->Double_t { return a.GetMinimum(); });
    t.method("GetMinimum", [](TF1 const& a, Double_t arg0)->Double_t { return a.GetMinimum(arg0); });
    t.method("GetMinimum", [](TF1 const& a, Double_t arg0, Double_t arg1)->Double_t { return a.GetMinimum(arg0, arg1); });
    t.method("GetMinimum", [](TF1 const& a, Double_t arg0, Double_t arg1, Double_t arg2)->Double_t { return a.GetMinimum(arg0, arg1, arg2); });
    t.method("GetMinimum", [](TF1 const& a, Double_t arg0, Double_t arg1, Double_t arg2, Int_t arg3)->Double_t { return a.GetMinimum(arg0, arg1, arg2, arg3); });
    t.method("GetMinimum", [](TF1 const* a)->Double_t { return a->GetMinimum(); });
    t.method("GetMinimum", [](TF1 const* a, Double_t arg0)->Double_t { return a->GetMinimum(arg0); });
    t.method("GetMinimum", [](TF1 const* a, Double_t arg0, Double_t arg1)->Double_t { return a->GetMinimum(arg0, arg1); });
    t.method("GetMinimum", [](TF1 const* a, Double_t arg0, Double_t arg1, Double_t arg2)->Double_t { return a->GetMinimum(arg0, arg1, arg2); });
    t.method("GetMinimum", [](TF1 const* a, Double_t arg0, Double_t arg1, Double_t arg2, Int_t arg3)->Double_t { return a->GetMinimum(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for Double_t TF1::GetMaximumX(Double_t, Double_t, Double_t, Int_t, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::GetMaximumX(Double_t, Double_t, Double_t, Int_t, Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:477:21
    t.method("GetMaximumX", static_cast<Double_t (TF1::*)(Double_t, Double_t, Double_t, Int_t, Bool_t)  const>(&TF1::GetMaximumX));
    t.method("GetMaximumX", [](TF1 const& a)->Double_t { return a.GetMaximumX(); });
    t.method("GetMaximumX", [](TF1 const& a, Double_t arg0)->Double_t { return a.GetMaximumX(arg0); });
    t.method("GetMaximumX", [](TF1 const& a, Double_t arg0, Double_t arg1)->Double_t { return a.GetMaximumX(arg0, arg1); });
    t.method("GetMaximumX", [](TF1 const& a, Double_t arg0, Double_t arg1, Double_t arg2)->Double_t { return a.GetMaximumX(arg0, arg1, arg2); });
    t.method("GetMaximumX", [](TF1 const& a, Double_t arg0, Double_t arg1, Double_t arg2, Int_t arg3)->Double_t { return a.GetMaximumX(arg0, arg1, arg2, arg3); });
    t.method("GetMaximumX", [](TF1 const* a)->Double_t { return a->GetMaximumX(); });
    t.method("GetMaximumX", [](TF1 const* a, Double_t arg0)->Double_t { return a->GetMaximumX(arg0); });
    t.method("GetMaximumX", [](TF1 const* a, Double_t arg0, Double_t arg1)->Double_t { return a->GetMaximumX(arg0, arg1); });
    t.method("GetMaximumX", [](TF1 const* a, Double_t arg0, Double_t arg1, Double_t arg2)->Double_t { return a->GetMaximumX(arg0, arg1, arg2); });
    t.method("GetMaximumX", [](TF1 const* a, Double_t arg0, Double_t arg1, Double_t arg2, Int_t arg3)->Double_t { return a->GetMaximumX(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for Double_t TF1::GetMinimumX(Double_t, Double_t, Double_t, Int_t, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::GetMinimumX(Double_t, Double_t, Double_t, Int_t, Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:478:21
    t.method("GetMinimumX", static_cast<Double_t (TF1::*)(Double_t, Double_t, Double_t, Int_t, Bool_t)  const>(&TF1::GetMinimumX));
    t.method("GetMinimumX", [](TF1 const& a)->Double_t { return a.GetMinimumX(); });
    t.method("GetMinimumX", [](TF1 const& a, Double_t arg0)->Double_t { return a.GetMinimumX(arg0); });
    t.method("GetMinimumX", [](TF1 const& a, Double_t arg0, Double_t arg1)->Double_t { return a.GetMinimumX(arg0, arg1); });
    t.method("GetMinimumX", [](TF1 const& a, Double_t arg0, Double_t arg1, Double_t arg2)->Double_t { return a.GetMinimumX(arg0, arg1, arg2); });
    t.method("GetMinimumX", [](TF1 const& a, Double_t arg0, Double_t arg1, Double_t arg2, Int_t arg3)->Double_t { return a.GetMinimumX(arg0, arg1, arg2, arg3); });
    t.method("GetMinimumX", [](TF1 const* a)->Double_t { return a->GetMinimumX(); });
    t.method("GetMinimumX", [](TF1 const* a, Double_t arg0)->Double_t { return a->GetMinimumX(arg0); });
    t.method("GetMinimumX", [](TF1 const* a, Double_t arg0, Double_t arg1)->Double_t { return a->GetMinimumX(arg0, arg1); });
    t.method("GetMinimumX", [](TF1 const* a, Double_t arg0, Double_t arg1, Double_t arg2)->Double_t { return a->GetMinimumX(arg0, arg1, arg2); });
    t.method("GetMinimumX", [](TF1 const* a, Double_t arg0, Double_t arg1, Double_t arg2, Int_t arg3)->Double_t { return a->GetMinimumX(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for Double_t TF1::GetMaximumStored() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::GetMaximumStored()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:479:21
    t.method("GetMaximumStored", static_cast<Double_t (TF1::*)()  const>(&TF1::GetMaximumStored));

    DEBUG_MSG("Adding wrapper for Double_t TF1::GetMinimumStored() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::GetMinimumStored()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:483:21
    t.method("GetMinimumStored", static_cast<Double_t (TF1::*)()  const>(&TF1::GetMinimumStored));

    DEBUG_MSG("Adding wrapper for Int_t TF1::GetNpar() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TF1::GetNpar()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:487:21
    t.method("GetNpar", static_cast<Int_t (TF1::*)()  const>(&TF1::GetNpar));

    DEBUG_MSG("Adding wrapper for Int_t TF1::GetNdim() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TF1::GetNdim()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:491:21
    t.method("GetNdim", static_cast<Int_t (TF1::*)()  const>(&TF1::GetNdim));

    DEBUG_MSG("Adding wrapper for Int_t TF1::GetNDF() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TF1::GetNDF()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:495:21
    t.method("GetNDF", static_cast<Int_t (TF1::*)()  const>(&TF1::GetNDF));

    DEBUG_MSG("Adding wrapper for Int_t TF1::GetNpx() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TF1::GetNpx()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:496:21
    t.method("GetNpx", static_cast<Int_t (TF1::*)()  const>(&TF1::GetNpx));

    DEBUG_MSG("Adding wrapper for TMethodCall * TF1::GetMethodCall() (" __HERE__ ")");
    // signature to use in the veto list: TMethodCall * TF1::GetMethodCall()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:500:20
    t.method("GetMethodCall", static_cast<TMethodCall * (TF1::*)()  const>(&TF1::GetMethodCall));

    DEBUG_MSG("Adding wrapper for Int_t TF1::GetNumber() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TF1::GetNumber()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:504:21
    t.method("GetNumber", static_cast<Int_t (TF1::*)()  const>(&TF1::GetNumber));

    DEBUG_MSG("Adding wrapper for Int_t TF1::GetNumberFreeParameters() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TF1::GetNumberFreeParameters()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:508:21
    t.method("GetNumberFreeParameters", static_cast<Int_t (TF1::*)()  const>(&TF1::GetNumberFreeParameters));

    DEBUG_MSG("Adding wrapper for Int_t TF1::GetNumberFitPoints() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TF1::GetNumberFitPoints()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:509:21
    t.method("GetNumberFitPoints", static_cast<Int_t (TF1::*)()  const>(&TF1::GetNumberFitPoints));

    DEBUG_MSG("Adding wrapper for char * TF1::GetObjectInfo(Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: char * TF1::GetObjectInfo(Int_t, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:513:13
    t.method("GetObjectInfo", static_cast<char * (TF1::*)(Int_t, Int_t)  const>(&TF1::GetObjectInfo));

    DEBUG_MSG("Adding wrapper for TObject * TF1::GetParent() (" __HERE__ ")");
    // signature to use in the veto list: TObject * TF1::GetParent()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:514:16
    t.method("GetParent", static_cast<TObject * (TF1::*)()  const>(&TF1::GetParent));

    DEBUG_MSG("Adding wrapper for Double_t TF1::GetParameter(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::GetParameter(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:518:21
    t.method("GetParameter", static_cast<Double_t (TF1::*)(Int_t)  const>(&TF1::GetParameter));

    DEBUG_MSG("Adding wrapper for Double_t TF1::GetParameter(const TString &) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::GetParameter(const TString &)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:522:21
    t.method("GetParameter", static_cast<Double_t (TF1::*)(const TString &)  const>(&TF1::GetParameter));

    DEBUG_MSG("Adding wrapper for Double_t * TF1::GetParameters() (" __HERE__ ")");
    // signature to use in the veto list: Double_t * TF1::GetParameters()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:526:22
    t.method("GetParameters", static_cast<Double_t * (TF1::*)()  const>(&TF1::GetParameters));

    DEBUG_MSG("Adding wrapper for void TF1::GetParameters(Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::GetParameters(Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:530:21
    t.method("GetParameters", static_cast<void (TF1::*)(Double_t *) >(&TF1::GetParameters));

    DEBUG_MSG("Adding wrapper for const char * TF1::GetParName(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: const char * TF1::GetParName(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:535:24
    t.method("GetParName", [](TF1 const& a, Int_t arg0) { return (std::string)a.GetParName(arg0); });
    t.method("GetParName", [](TF1 const* a, Int_t arg0) { return (std::string)a->GetParName(arg0); });

    DEBUG_MSG("Adding wrapper for Int_t TF1::GetParNumber(const char *) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TF1::GetParNumber(const char *)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:539:21
    t.method("GetParNumber", static_cast<Int_t (TF1::*)(const char *)  const>(&TF1::GetParNumber));

    DEBUG_MSG("Adding wrapper for Double_t TF1::GetParError(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::GetParError(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:543:21
    t.method("GetParError", static_cast<Double_t (TF1::*)(Int_t)  const>(&TF1::GetParError));

    DEBUG_MSG("Adding wrapper for const Double_t * TF1::GetParErrors() (" __HERE__ ")");
    // signature to use in the veto list: const Double_t * TF1::GetParErrors()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:544:28
    t.method("GetParErrors", static_cast<const Double_t * (TF1::*)()  const>(&TF1::GetParErrors));

    DEBUG_MSG("Adding wrapper for void TF1::GetParLimits(Int_t, Double_t &, Double_t &) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::GetParLimits(Int_t, Double_t &, Double_t &)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:548:21
    t.method("GetParLimits", static_cast<void (TF1::*)(Int_t, Double_t &, Double_t &)  const>(&TF1::GetParLimits));

    DEBUG_MSG("Adding wrapper for Double_t TF1::GetProb() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::GetProb()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:549:21
    t.method("GetProb", static_cast<Double_t (TF1::*)()  const>(&TF1::GetProb));

    DEBUG_MSG("Adding wrapper for Int_t TF1::GetQuantiles(Int_t, Double_t *, const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TF1::GetQuantiles(Int_t, Double_t *, const Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:550:21
    t.method("GetQuantiles", static_cast<Int_t (TF1::*)(Int_t, Double_t *, const Double_t *) >(&TF1::GetQuantiles));

    DEBUG_MSG("Adding wrapper for Double_t TF1::GetRandom(TRandom *, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::GetRandom(TRandom *, Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:551:21
    t.method("GetRandom", static_cast<Double_t (TF1::*)(TRandom *, Option_t *) >(&TF1::GetRandom));
    t.method("GetRandom", [](TF1& a)->Double_t { return a.GetRandom(); });
    t.method("GetRandom", [](TF1& a, TRandom * arg0)->Double_t { return a.GetRandom(arg0); });
    t.method("GetRandom", [](TF1* a)->Double_t { return a->GetRandom(); });
    t.method("GetRandom", [](TF1* a, TRandom * arg0)->Double_t { return a->GetRandom(arg0); });

    DEBUG_MSG("Adding wrapper for Double_t TF1::GetRandom(Double_t, Double_t, TRandom *, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::GetRandom(Double_t, Double_t, TRandom *, Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:552:21
    t.method("GetRandom", static_cast<Double_t (TF1::*)(Double_t, Double_t, TRandom *, Option_t *) >(&TF1::GetRandom));
    t.method("GetRandom", [](TF1& a, Double_t arg0, Double_t arg1)->Double_t { return a.GetRandom(arg0, arg1); });
    t.method("GetRandom", [](TF1& a, Double_t arg0, Double_t arg1, TRandom * arg2)->Double_t { return a.GetRandom(arg0, arg1, arg2); });
    t.method("GetRandom", [](TF1* a, Double_t arg0, Double_t arg1)->Double_t { return a->GetRandom(arg0, arg1); });
    t.method("GetRandom", [](TF1* a, Double_t arg0, Double_t arg1, TRandom * arg2)->Double_t { return a->GetRandom(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void TF1::GetRange(Double_t &, Double_t &) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::GetRange(Double_t &, Double_t &)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:553:21
    t.method("GetRange", static_cast<void (TF1::*)(Double_t &, Double_t &)  const>(&TF1::GetRange));

    DEBUG_MSG("Adding wrapper for void TF1::GetRange(Double_t &, Double_t &, Double_t &, Double_t &) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::GetRange(Double_t &, Double_t &, Double_t &, Double_t &)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:554:21
    t.method("GetRange", static_cast<void (TF1::*)(Double_t &, Double_t &, Double_t &, Double_t &)  const>(&TF1::GetRange));

    DEBUG_MSG("Adding wrapper for void TF1::GetRange(Double_t &, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::GetRange(Double_t &, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:555:21
    t.method("GetRange", static_cast<void (TF1::*)(Double_t &, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &)  const>(&TF1::GetRange));

    DEBUG_MSG("Adding wrapper for Double_t TF1::GetSave(const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::GetSave(const Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:556:21
    t.method("GetSave", static_cast<Double_t (TF1::*)(const Double_t *) >(&TF1::GetSave));

    DEBUG_MSG("Adding wrapper for Double_t TF1::GetX(Double_t, Double_t, Double_t, Double_t, Int_t, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::GetX(Double_t, Double_t, Double_t, Double_t, Int_t, Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:557:21
    t.method("GetX", static_cast<Double_t (TF1::*)(Double_t, Double_t, Double_t, Double_t, Int_t, Bool_t)  const>(&TF1::GetX));
    t.method("GetX", [](TF1 const& a, Double_t arg0)->Double_t { return a.GetX(arg0); });
    t.method("GetX", [](TF1 const& a, Double_t arg0, Double_t arg1)->Double_t { return a.GetX(arg0, arg1); });
    t.method("GetX", [](TF1 const& a, Double_t arg0, Double_t arg1, Double_t arg2)->Double_t { return a.GetX(arg0, arg1, arg2); });
    t.method("GetX", [](TF1 const& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3)->Double_t { return a.GetX(arg0, arg1, arg2, arg3); });
    t.method("GetX", [](TF1 const& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Int_t arg4)->Double_t { return a.GetX(arg0, arg1, arg2, arg3, arg4); });
    t.method("GetX", [](TF1 const* a, Double_t arg0)->Double_t { return a->GetX(arg0); });
    t.method("GetX", [](TF1 const* a, Double_t arg0, Double_t arg1)->Double_t { return a->GetX(arg0, arg1); });
    t.method("GetX", [](TF1 const* a, Double_t arg0, Double_t arg1, Double_t arg2)->Double_t { return a->GetX(arg0, arg1, arg2); });
    t.method("GetX", [](TF1 const* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3)->Double_t { return a->GetX(arg0, arg1, arg2, arg3); });
    t.method("GetX", [](TF1 const* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Int_t arg4)->Double_t { return a->GetX(arg0, arg1, arg2, arg3, arg4); });

    DEBUG_MSG("Adding wrapper for Double_t TF1::GetXmin() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::GetXmin()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:558:21
    t.method("GetXmin", static_cast<Double_t (TF1::*)()  const>(&TF1::GetXmin));

    DEBUG_MSG("Adding wrapper for Double_t TF1::GetXmax() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::GetXmax()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:562:21
    t.method("GetXmax", static_cast<Double_t (TF1::*)()  const>(&TF1::GetXmax));

    DEBUG_MSG("Adding wrapper for TAxis * TF1::GetXaxis() (" __HERE__ ")");
    // signature to use in the veto list: TAxis * TF1::GetXaxis()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:566:21
    t.method("GetXaxis", static_cast<TAxis * (TF1::*)()  const>(&TF1::GetXaxis));

    DEBUG_MSG("Adding wrapper for TAxis * TF1::GetYaxis() (" __HERE__ ")");
    // signature to use in the veto list: TAxis * TF1::GetYaxis()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:567:21
    t.method("GetYaxis", static_cast<TAxis * (TF1::*)()  const>(&TF1::GetYaxis));

    DEBUG_MSG("Adding wrapper for TAxis * TF1::GetZaxis() (" __HERE__ ")");
    // signature to use in the veto list: TAxis * TF1::GetZaxis()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:568:21
    t.method("GetZaxis", static_cast<TAxis * (TF1::*)()  const>(&TF1::GetZaxis));

    DEBUG_MSG("Adding wrapper for Double_t TF1::GetVariable(const TString &) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::GetVariable(const TString &)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:569:21
    t.method("GetVariable", static_cast<Double_t (TF1::*)(const TString &) >(&TF1::GetVariable));

    DEBUG_MSG("Adding wrapper for Double_t TF1::GradientPar(Int_t, const Double_t *, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::GradientPar(Int_t, const Double_t *, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:573:21
    t.method("GradientPar", static_cast<Double_t (TF1::*)(Int_t, const Double_t *, Double_t) >(&TF1::GradientPar));
    t.method("GradientPar", [](TF1& a, Int_t arg0, const Double_t * arg1)->Double_t { return a.GradientPar(arg0, arg1); });
    t.method("GradientPar", [](TF1* a, Int_t arg0, const Double_t * arg1)->Double_t { return a->GradientPar(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void TF1::GradientPar(const Double_t *, Double_t *, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::GradientPar(const Double_t *, Double_t *, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:579:21
    t.method("GradientPar", static_cast<void (TF1::*)(const Double_t *, Double_t *, Double_t) >(&TF1::GradientPar));
    t.method("GradientPar", [](TF1& a, const Double_t * arg0, Double_t * arg1)->void { a.GradientPar(arg0, arg1); });
    t.method("GradientPar", [](TF1* a, const Double_t * arg0, Double_t * arg1)->void { a->GradientPar(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void TF1::InitArgs(const Double_t *, const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::InitArgs(const Double_t *, const Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:585:21
    t.method("InitArgs", static_cast<void (TF1::*)(const Double_t *, const Double_t *) >(&TF1::InitArgs));

    DEBUG_MSG("Adding wrapper for void TF1::InitStandardFunctions() (" __HERE__ ")");
    // signature to use in the veto list: void TF1::InitStandardFunctions()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:586:21
    module_.method("TF1!InitStandardFunctions", static_cast<void (*)() >(&TF1::InitStandardFunctions));

    DEBUG_MSG("Adding wrapper for Double_t TF1::Integral(Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::Integral(Double_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:587:21
    t.method("Integral", static_cast<Double_t (TF1::*)(Double_t, Double_t, Double_t) >(&TF1::Integral));
    t.method("Integral", [](TF1& a, Double_t arg0, Double_t arg1)->Double_t { return a.Integral(arg0, arg1); });
    t.method("Integral", [](TF1* a, Double_t arg0, Double_t arg1)->Double_t { return a->Integral(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for Double_t TF1::IntegralOneDim(Double_t, Double_t, Double_t, Double_t, Double_t &) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::IntegralOneDim(Double_t, Double_t, Double_t, Double_t, Double_t &)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:588:21
    t.method("IntegralOneDim", static_cast<Double_t (TF1::*)(Double_t, Double_t, Double_t, Double_t, Double_t &) >(&TF1::IntegralOneDim));

    DEBUG_MSG("Adding wrapper for Double_t TF1::IntegralError(Double_t, Double_t, const Double_t *, const Double_t *, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::IntegralError(Double_t, Double_t, const Double_t *, const Double_t *, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:589:21
    t.method("IntegralError", static_cast<Double_t (TF1::*)(Double_t, Double_t, const Double_t *, const Double_t *, Double_t) >(&TF1::IntegralError));
    t.method("IntegralError", [](TF1& a, Double_t arg0, Double_t arg1)->Double_t { return a.IntegralError(arg0, arg1); });
    t.method("IntegralError", [](TF1& a, Double_t arg0, Double_t arg1, const Double_t * arg2)->Double_t { return a.IntegralError(arg0, arg1, arg2); });
    t.method("IntegralError", [](TF1& a, Double_t arg0, Double_t arg1, const Double_t * arg2, const Double_t * arg3)->Double_t { return a.IntegralError(arg0, arg1, arg2, arg3); });
    t.method("IntegralError", [](TF1* a, Double_t arg0, Double_t arg1)->Double_t { return a->IntegralError(arg0, arg1); });
    t.method("IntegralError", [](TF1* a, Double_t arg0, Double_t arg1, const Double_t * arg2)->Double_t { return a->IntegralError(arg0, arg1, arg2); });
    t.method("IntegralError", [](TF1* a, Double_t arg0, Double_t arg1, const Double_t * arg2, const Double_t * arg3)->Double_t { return a->IntegralError(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for Double_t TF1::IntegralError(Int_t, const Double_t *, const Double_t *, const Double_t *, const Double_t *, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::IntegralError(Int_t, const Double_t *, const Double_t *, const Double_t *, const Double_t *, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:590:21
    t.method("IntegralError", static_cast<Double_t (TF1::*)(Int_t, const Double_t *, const Double_t *, const Double_t *, const Double_t *, Double_t) >(&TF1::IntegralError));
    t.method("IntegralError", [](TF1& a, Int_t arg0, const Double_t * arg1, const Double_t * arg2)->Double_t { return a.IntegralError(arg0, arg1, arg2); });
    t.method("IntegralError", [](TF1& a, Int_t arg0, const Double_t * arg1, const Double_t * arg2, const Double_t * arg3)->Double_t { return a.IntegralError(arg0, arg1, arg2, arg3); });
    t.method("IntegralError", [](TF1& a, Int_t arg0, const Double_t * arg1, const Double_t * arg2, const Double_t * arg3, const Double_t * arg4)->Double_t { return a.IntegralError(arg0, arg1, arg2, arg3, arg4); });
    t.method("IntegralError", [](TF1* a, Int_t arg0, const Double_t * arg1, const Double_t * arg2)->Double_t { return a->IntegralError(arg0, arg1, arg2); });
    t.method("IntegralError", [](TF1* a, Int_t arg0, const Double_t * arg1, const Double_t * arg2, const Double_t * arg3)->Double_t { return a->IntegralError(arg0, arg1, arg2, arg3); });
    t.method("IntegralError", [](TF1* a, Int_t arg0, const Double_t * arg1, const Double_t * arg2, const Double_t * arg3, const Double_t * arg4)->Double_t { return a->IntegralError(arg0, arg1, arg2, arg3, arg4); });

    DEBUG_MSG("Adding wrapper for Double_t TF1::IntegralFast(Int_t, Double_t *, Double_t *, Double_t, Double_t, Double_t *, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::IntegralFast(Int_t, Double_t *, Double_t *, Double_t, Double_t, Double_t *, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:592:21
    t.method("IntegralFast", static_cast<Double_t (TF1::*)(Int_t, Double_t *, Double_t *, Double_t, Double_t, Double_t *, Double_t) >(&TF1::IntegralFast));
    t.method("IntegralFast", [](TF1& a, Int_t arg0, Double_t * arg1, Double_t * arg2, Double_t arg3, Double_t arg4)->Double_t { return a.IntegralFast(arg0, arg1, arg2, arg3, arg4); });
    t.method("IntegralFast", [](TF1& a, Int_t arg0, Double_t * arg1, Double_t * arg2, Double_t arg3, Double_t arg4, Double_t * arg5)->Double_t { return a.IntegralFast(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("IntegralFast", [](TF1* a, Int_t arg0, Double_t * arg1, Double_t * arg2, Double_t arg3, Double_t arg4)->Double_t { return a->IntegralFast(arg0, arg1, arg2, arg3, arg4); });
    t.method("IntegralFast", [](TF1* a, Int_t arg0, Double_t * arg1, Double_t * arg2, Double_t arg3, Double_t arg4, Double_t * arg5)->Double_t { return a->IntegralFast(arg0, arg1, arg2, arg3, arg4, arg5); });

    DEBUG_MSG("Adding wrapper for Double_t TF1::IntegralMultiple(Int_t, const Double_t *, const Double_t *, Int_t, Double_t, Double_t, Double_t &, Int_t &, Int_t &) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::IntegralMultiple(Int_t, const Double_t *, const Double_t *, Int_t, Double_t, Double_t, Double_t &, Int_t &, Int_t &)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:593:21
    t.method("IntegralMultiple", static_cast<Double_t (TF1::*)(Int_t, const Double_t *, const Double_t *, Int_t, Double_t, Double_t, Double_t &, Int_t &, Int_t &) >(&TF1::IntegralMultiple));

    DEBUG_MSG("Adding wrapper for Double_t TF1::IntegralMultiple(Int_t, const Double_t *, const Double_t *, Int_t, Int_t, Double_t, Double_t &, Int_t &, Int_t &) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::IntegralMultiple(Int_t, const Double_t *, const Double_t *, Int_t, Int_t, Double_t, Double_t &, Int_t &, Int_t &)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:594:21
    t.method("IntegralMultiple", static_cast<Double_t (TF1::*)(Int_t, const Double_t *, const Double_t *, Int_t, Int_t, Double_t, Double_t &, Int_t &, Int_t &) >(&TF1::IntegralMultiple));

    DEBUG_MSG("Adding wrapper for Double_t TF1::IntegralMultiple(Int_t, const Double_t *, const Double_t *, Double_t, Double_t &) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::IntegralMultiple(Int_t, const Double_t *, const Double_t *, Double_t, Double_t &)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:598:21
    t.method("IntegralMultiple", static_cast<Double_t (TF1::*)(Int_t, const Double_t *, const Double_t *, Double_t, Double_t &) >(&TF1::IntegralMultiple));

    DEBUG_MSG("Adding wrapper for Bool_t TF1::IsEvalNormalized() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TF1::IsEvalNormalized()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:599:21
    t.method("IsEvalNormalized", static_cast<Bool_t (TF1::*)()  const>(&TF1::IsEvalNormalized));

    DEBUG_MSG("Adding wrapper for Bool_t TF1::IsInside(const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TF1::IsInside(const Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:604:21
    t.method("IsInside", static_cast<Bool_t (TF1::*)(const Double_t *)  const>(&TF1::IsInside));

    DEBUG_MSG("Adding wrapper for Bool_t TF1::IsLinear() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TF1::IsLinear()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:608:21
    t.method("IsLinear", static_cast<Bool_t (TF1::*)()  const>(&TF1::IsLinear));

    DEBUG_MSG("Adding wrapper for Bool_t TF1::IsValid() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TF1::IsValid()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:612:21
    t.method("IsValid", static_cast<Bool_t (TF1::*)()  const>(&TF1::IsValid));

    DEBUG_MSG("Adding wrapper for void TF1::Print(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::Print(Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:613:13
    t.method("Print", static_cast<void (TF1::*)(Option_t *)  const>(&TF1::Print));
    t.method("Print", [](TF1 const& a)->void { a.Print(); });
    t.method("Print", [](TF1 const* a)->void { a->Print(); });

    DEBUG_MSG("Adding wrapper for void TF1::Paint(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::Paint(Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:614:13
    t.method("Paint", static_cast<void (TF1::*)(Option_t *) >(&TF1::Paint));
    t.method("Paint", [](TF1& a)->void { a.Paint(); });
    t.method("Paint", [](TF1* a)->void { a->Paint(); });

    DEBUG_MSG("Adding wrapper for void TF1::ReleaseParameter(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::ReleaseParameter(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:615:21
    t.method("ReleaseParameter", static_cast<void (TF1::*)(Int_t) >(&TF1::ReleaseParameter));

    DEBUG_MSG("Adding wrapper for void TF1::Save(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::Save(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:616:21
    t.method("Save", static_cast<void (TF1::*)(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t) >(&TF1::Save));

    DEBUG_MSG("Adding wrapper for void TF1::SetChisquare(Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::SetChisquare(Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:618:21
    t.method("SetChisquare", static_cast<void (TF1::*)(Double_t) >(&TF1::SetChisquare));

    DEBUG_MSG("Adding wrapper for void TF1::SetMaximum(Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::SetMaximum(Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:627:21
    t.method("SetMaximum", static_cast<void (TF1::*)(Double_t) >(&TF1::SetMaximum));
    t.method("SetMaximum", [](TF1& a)->void { a.SetMaximum(); });
    t.method("SetMaximum", [](TF1* a)->void { a->SetMaximum(); });

    DEBUG_MSG("Adding wrapper for void TF1::SetMinimum(Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::SetMinimum(Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:628:21
    t.method("SetMinimum", static_cast<void (TF1::*)(Double_t) >(&TF1::SetMinimum));
    t.method("SetMinimum", [](TF1& a)->void { a.SetMinimum(); });
    t.method("SetMinimum", [](TF1* a)->void { a->SetMinimum(); });

    DEBUG_MSG("Adding wrapper for void TF1::SetNDF(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::SetNDF(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:629:21
    t.method("SetNDF", static_cast<void (TF1::*)(Int_t) >(&TF1::SetNDF));

    DEBUG_MSG("Adding wrapper for void TF1::SetNumberFitPoints(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::SetNumberFitPoints(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:630:21
    t.method("SetNumberFitPoints", static_cast<void (TF1::*)(Int_t) >(&TF1::SetNumberFitPoints));

    DEBUG_MSG("Adding wrapper for void TF1::SetNormalized(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::SetNormalized(Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:634:21
    t.method("SetNormalized", static_cast<void (TF1::*)(Bool_t) >(&TF1::SetNormalized));

    DEBUG_MSG("Adding wrapper for void TF1::SetNpx(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::SetNpx(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:639:21
    t.method("SetNpx", static_cast<void (TF1::*)(Int_t) >(&TF1::SetNpx));
    t.method("SetNpx", [](TF1& a)->void { a.SetNpx(); });
    t.method("SetNpx", [](TF1* a)->void { a->SetNpx(); });

    DEBUG_MSG("Adding wrapper for void TF1::SetParameter(Int_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::SetParameter(Int_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:640:21
    t.method("SetParameter", static_cast<void (TF1::*)(Int_t, Double_t) >(&TF1::SetParameter));

    DEBUG_MSG("Adding wrapper for void TF1::SetParameter(const TString &, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::SetParameter(const TString &, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:645:21
    t.method("SetParameter", static_cast<void (TF1::*)(const TString &, Double_t) >(&TF1::SetParameter));

    DEBUG_MSG("Adding wrapper for void TF1::SetParameters(const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::SetParameters(const Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:650:21
    t.method("SetParameters", static_cast<void (TF1::*)(const Double_t *) >(&TF1::SetParameters));

    DEBUG_MSG("Adding wrapper for void TF1::SetParameters(double, double, double, double, double, double, double, double, double, double, double) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::SetParameters(double, double, double, double, double, double, double, double, double, double, double)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:655:21
    t.method("SetParameters", static_cast<void (TF1::*)(double, double, double, double, double, double, double, double, double, double, double) >(&TF1::SetParameters));
    t.method("SetParameters", [](TF1& a, double arg0)->void { a.SetParameters(arg0); });
    t.method("SetParameters", [](TF1& a, double arg0, double arg1)->void { a.SetParameters(arg0, arg1); });
    t.method("SetParameters", [](TF1& a, double arg0, double arg1, double arg2)->void { a.SetParameters(arg0, arg1, arg2); });
    t.method("SetParameters", [](TF1& a, double arg0, double arg1, double arg2, double arg3)->void { a.SetParameters(arg0, arg1, arg2, arg3); });
    t.method("SetParameters", [](TF1& a, double arg0, double arg1, double arg2, double arg3, double arg4)->void { a.SetParameters(arg0, arg1, arg2, arg3, arg4); });
    t.method("SetParameters", [](TF1& a, double arg0, double arg1, double arg2, double arg3, double arg4, double arg5)->void { a.SetParameters(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("SetParameters", [](TF1& a, double arg0, double arg1, double arg2, double arg3, double arg4, double arg5, double arg6)->void { a.SetParameters(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });
    t.method("SetParameters", [](TF1& a, double arg0, double arg1, double arg2, double arg3, double arg4, double arg5, double arg6, double arg7)->void { a.SetParameters(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7); });
    t.method("SetParameters", [](TF1& a, double arg0, double arg1, double arg2, double arg3, double arg4, double arg5, double arg6, double arg7, double arg8)->void { a.SetParameters(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8); });
    t.method("SetParameters", [](TF1& a, double arg0, double arg1, double arg2, double arg3, double arg4, double arg5, double arg6, double arg7, double arg8, double arg9)->void { a.SetParameters(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9); });
    t.method("SetParameters", [](TF1* a, double arg0)->void { a->SetParameters(arg0); });
    t.method("SetParameters", [](TF1* a, double arg0, double arg1)->void { a->SetParameters(arg0, arg1); });
    t.method("SetParameters", [](TF1* a, double arg0, double arg1, double arg2)->void { a->SetParameters(arg0, arg1, arg2); });
    t.method("SetParameters", [](TF1* a, double arg0, double arg1, double arg2, double arg3)->void { a->SetParameters(arg0, arg1, arg2, arg3); });
    t.method("SetParameters", [](TF1* a, double arg0, double arg1, double arg2, double arg3, double arg4)->void { a->SetParameters(arg0, arg1, arg2, arg3, arg4); });
    t.method("SetParameters", [](TF1* a, double arg0, double arg1, double arg2, double arg3, double arg4, double arg5)->void { a->SetParameters(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("SetParameters", [](TF1* a, double arg0, double arg1, double arg2, double arg3, double arg4, double arg5, double arg6)->void { a->SetParameters(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });
    t.method("SetParameters", [](TF1* a, double arg0, double arg1, double arg2, double arg3, double arg4, double arg5, double arg6, double arg7)->void { a->SetParameters(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7); });
    t.method("SetParameters", [](TF1* a, double arg0, double arg1, double arg2, double arg3, double arg4, double arg5, double arg6, double arg7, double arg8)->void { a->SetParameters(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8); });
    t.method("SetParameters", [](TF1* a, double arg0, double arg1, double arg2, double arg3, double arg4, double arg5, double arg6, double arg7, double arg8, double arg9)->void { a->SetParameters(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9); });

    DEBUG_MSG("Adding wrapper for void TF1::SetParName(Int_t, const char *) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::SetParName(Int_t, const char *)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:663:21
    t.method("SetParName", static_cast<void (TF1::*)(Int_t, const char *) >(&TF1::SetParName));

    DEBUG_MSG("Adding wrapper for void TF1::SetParNames(const char *, const char *, const char *, const char *, const char *, const char *, const char *, const char *, const char *, const char *, const char *) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::SetParNames(const char *, const char *, const char *, const char *, const char *, const char *, const char *, const char *, const char *, const char *, const char *)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:664:21
    t.method("SetParNames", static_cast<void (TF1::*)(const char *, const char *, const char *, const char *, const char *, const char *, const char *, const char *, const char *, const char *, const char *) >(&TF1::SetParNames));
    t.method("SetParNames", [](TF1& a)->void { a.SetParNames(); });
    t.method("SetParNames", [](TF1& a, const char * arg0)->void { a.SetParNames(arg0); });
    t.method("SetParNames", [](TF1& a, const char * arg0, const char * arg1)->void { a.SetParNames(arg0, arg1); });
    t.method("SetParNames", [](TF1& a, const char * arg0, const char * arg1, const char * arg2)->void { a.SetParNames(arg0, arg1, arg2); });
    t.method("SetParNames", [](TF1& a, const char * arg0, const char * arg1, const char * arg2, const char * arg3)->void { a.SetParNames(arg0, arg1, arg2, arg3); });
    t.method("SetParNames", [](TF1& a, const char * arg0, const char * arg1, const char * arg2, const char * arg3, const char * arg4)->void { a.SetParNames(arg0, arg1, arg2, arg3, arg4); });
    t.method("SetParNames", [](TF1& a, const char * arg0, const char * arg1, const char * arg2, const char * arg3, const char * arg4, const char * arg5)->void { a.SetParNames(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("SetParNames", [](TF1& a, const char * arg0, const char * arg1, const char * arg2, const char * arg3, const char * arg4, const char * arg5, const char * arg6)->void { a.SetParNames(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });
    t.method("SetParNames", [](TF1& a, const char * arg0, const char * arg1, const char * arg2, const char * arg3, const char * arg4, const char * arg5, const char * arg6, const char * arg7)->void { a.SetParNames(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7); });
    t.method("SetParNames", [](TF1& a, const char * arg0, const char * arg1, const char * arg2, const char * arg3, const char * arg4, const char * arg5, const char * arg6, const char * arg7, const char * arg8)->void { a.SetParNames(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8); });
    t.method("SetParNames", [](TF1& a, const char * arg0, const char * arg1, const char * arg2, const char * arg3, const char * arg4, const char * arg5, const char * arg6, const char * arg7, const char * arg8, const char * arg9)->void { a.SetParNames(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9); });
    t.method("SetParNames", [](TF1* a)->void { a->SetParNames(); });
    t.method("SetParNames", [](TF1* a, const char * arg0)->void { a->SetParNames(arg0); });
    t.method("SetParNames", [](TF1* a, const char * arg0, const char * arg1)->void { a->SetParNames(arg0, arg1); });
    t.method("SetParNames", [](TF1* a, const char * arg0, const char * arg1, const char * arg2)->void { a->SetParNames(arg0, arg1, arg2); });
    t.method("SetParNames", [](TF1* a, const char * arg0, const char * arg1, const char * arg2, const char * arg3)->void { a->SetParNames(arg0, arg1, arg2, arg3); });
    t.method("SetParNames", [](TF1* a, const char * arg0, const char * arg1, const char * arg2, const char * arg3, const char * arg4)->void { a->SetParNames(arg0, arg1, arg2, arg3, arg4); });
    t.method("SetParNames", [](TF1* a, const char * arg0, const char * arg1, const char * arg2, const char * arg3, const char * arg4, const char * arg5)->void { a->SetParNames(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("SetParNames", [](TF1* a, const char * arg0, const char * arg1, const char * arg2, const char * arg3, const char * arg4, const char * arg5, const char * arg6)->void { a->SetParNames(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });
    t.method("SetParNames", [](TF1* a, const char * arg0, const char * arg1, const char * arg2, const char * arg3, const char * arg4, const char * arg5, const char * arg6, const char * arg7)->void { a->SetParNames(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7); });
    t.method("SetParNames", [](TF1* a, const char * arg0, const char * arg1, const char * arg2, const char * arg3, const char * arg4, const char * arg5, const char * arg6, const char * arg7, const char * arg8)->void { a->SetParNames(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8); });
    t.method("SetParNames", [](TF1* a, const char * arg0, const char * arg1, const char * arg2, const char * arg3, const char * arg4, const char * arg5, const char * arg6, const char * arg7, const char * arg8, const char * arg9)->void { a->SetParNames(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9); });

    DEBUG_MSG("Adding wrapper for void TF1::SetParError(Int_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::SetParError(Int_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:668:21
    t.method("SetParError", static_cast<void (TF1::*)(Int_t, Double_t) >(&TF1::SetParError));

    DEBUG_MSG("Adding wrapper for void TF1::SetParErrors(const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::SetParErrors(const Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:669:21
    t.method("SetParErrors", static_cast<void (TF1::*)(const Double_t *) >(&TF1::SetParErrors));

    DEBUG_MSG("Adding wrapper for void TF1::SetParLimits(Int_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::SetParLimits(Int_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:670:21
    t.method("SetParLimits", static_cast<void (TF1::*)(Int_t, Double_t, Double_t) >(&TF1::SetParLimits));

    DEBUG_MSG("Adding wrapper for void TF1::SetParent(TObject *) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::SetParent(TObject *)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:671:21
    t.method("SetParent", static_cast<void (TF1::*)(TObject *) >(&TF1::SetParent));
    t.method("SetParent", [](TF1& a)->void { a.SetParent(); });
    t.method("SetParent", [](TF1* a)->void { a->SetParent(); });

    DEBUG_MSG("Adding wrapper for void TF1::SetRange(Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::SetRange(Double_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:675:21
    t.method("SetRange", static_cast<void (TF1::*)(Double_t, Double_t) >(&TF1::SetRange));

    DEBUG_MSG("Adding wrapper for void TF1::SetRange(Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::SetRange(Double_t, Double_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:676:21
    t.method("SetRange", static_cast<void (TF1::*)(Double_t, Double_t, Double_t, Double_t) >(&TF1::SetRange));

    DEBUG_MSG("Adding wrapper for void TF1::SetRange(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::SetRange(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:677:21
    t.method("SetRange", static_cast<void (TF1::*)(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t) >(&TF1::SetRange));

    DEBUG_MSG("Adding wrapper for void TF1::SetSavedPoint(Int_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::SetSavedPoint(Int_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:678:21
    t.method("SetSavedPoint", static_cast<void (TF1::*)(Int_t, Double_t) >(&TF1::SetSavedPoint));

    DEBUG_MSG("Adding wrapper for void TF1::SetTitle(const char *) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::SetTitle(const char *)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:679:13
    t.method("SetTitle", static_cast<void (TF1::*)(const char *) >(&TF1::SetTitle));
    t.method("SetTitle", [](TF1& a)->void { a.SetTitle(); });
    t.method("SetTitle", [](TF1* a)->void { a->SetTitle(); });

    DEBUG_MSG("Adding wrapper for void TF1::SetVectorized(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::SetVectorized(Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:680:21
    t.method("SetVectorized", static_cast<void (TF1::*)(Bool_t) >(&TF1::SetVectorized));

    DEBUG_MSG("Adding wrapper for void TF1::Update() (" __HERE__ ")");
    // signature to use in the veto list: void TF1::Update()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:687:21
    t.method("Update", static_cast<void (TF1::*)() >(&TF1::Update));

    DEBUG_MSG("Adding wrapper for TF1 * TF1::GetCurrent() (" __HERE__ ")");
    // signature to use in the veto list: TF1 * TF1::GetCurrent()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:689:21
    module_.method("TF1!GetCurrent", static_cast<TF1 * (*)() >(&TF1::GetCurrent));

    DEBUG_MSG("Adding wrapper for void TF1::AbsValue(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::AbsValue(Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:690:21
    module_.method("TF1!AbsValue", static_cast<void (*)(Bool_t) >(&TF1::AbsValue));
    module_.method("TF1!AbsValue", []()->void { TF1::AbsValue(); });

    DEBUG_MSG("Adding wrapper for void TF1::RejectPoint(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::RejectPoint(Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:691:21
    module_.method("TF1!RejectPoint", static_cast<void (*)(Bool_t) >(&TF1::RejectPoint));
    module_.method("TF1!RejectPoint", []()->void { TF1::RejectPoint(); });

    DEBUG_MSG("Adding wrapper for Bool_t TF1::RejectedPoint() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TF1::RejectedPoint()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:692:21
    module_.method("TF1!RejectedPoint", static_cast<Bool_t (*)() >(&TF1::RejectedPoint));

    DEBUG_MSG("Adding wrapper for void TF1::SetCurrent(TF1 *) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::SetCurrent(TF1 *)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:693:21
    module_.method("TF1!SetCurrent", static_cast<void (*)(TF1 *) >(&TF1::SetCurrent));

    DEBUG_MSG("Adding wrapper for Double_t TF1::Moment(Double_t, Double_t, Double_t, const Double_t *, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::Moment(Double_t, Double_t, Double_t, const Double_t *, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:696:21
    t.method("Moment", static_cast<Double_t (TF1::*)(Double_t, Double_t, Double_t, const Double_t *, Double_t) >(&TF1::Moment));
    t.method("Moment", [](TF1& a, Double_t arg0, Double_t arg1, Double_t arg2)->Double_t { return a.Moment(arg0, arg1, arg2); });
    t.method("Moment", [](TF1& a, Double_t arg0, Double_t arg1, Double_t arg2, const Double_t * arg3)->Double_t { return a.Moment(arg0, arg1, arg2, arg3); });
    t.method("Moment", [](TF1* a, Double_t arg0, Double_t arg1, Double_t arg2)->Double_t { return a->Moment(arg0, arg1, arg2); });
    t.method("Moment", [](TF1* a, Double_t arg0, Double_t arg1, Double_t arg2, const Double_t * arg3)->Double_t { return a->Moment(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for Double_t TF1::CentralMoment(Double_t, Double_t, Double_t, const Double_t *, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::CentralMoment(Double_t, Double_t, Double_t, const Double_t *, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:697:21
    t.method("CentralMoment", static_cast<Double_t (TF1::*)(Double_t, Double_t, Double_t, const Double_t *, Double_t) >(&TF1::CentralMoment));
    t.method("CentralMoment", [](TF1& a, Double_t arg0, Double_t arg1, Double_t arg2)->Double_t { return a.CentralMoment(arg0, arg1, arg2); });
    t.method("CentralMoment", [](TF1& a, Double_t arg0, Double_t arg1, Double_t arg2, const Double_t * arg3)->Double_t { return a.CentralMoment(arg0, arg1, arg2, arg3); });
    t.method("CentralMoment", [](TF1* a, Double_t arg0, Double_t arg1, Double_t arg2)->Double_t { return a->CentralMoment(arg0, arg1, arg2); });
    t.method("CentralMoment", [](TF1* a, Double_t arg0, Double_t arg1, Double_t arg2, const Double_t * arg3)->Double_t { return a->CentralMoment(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for Double_t TF1::Mean(Double_t, Double_t, const Double_t *, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::Mean(Double_t, Double_t, const Double_t *, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:698:21
    t.method("Mean", static_cast<Double_t (TF1::*)(Double_t, Double_t, const Double_t *, Double_t) >(&TF1::Mean));
    t.method("Mean", [](TF1& a, Double_t arg0, Double_t arg1)->Double_t { return a.Mean(arg0, arg1); });
    t.method("Mean", [](TF1& a, Double_t arg0, Double_t arg1, const Double_t * arg2)->Double_t { return a.Mean(arg0, arg1, arg2); });
    t.method("Mean", [](TF1* a, Double_t arg0, Double_t arg1)->Double_t { return a->Mean(arg0, arg1); });
    t.method("Mean", [](TF1* a, Double_t arg0, Double_t arg1, const Double_t * arg2)->Double_t { return a->Mean(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for Double_t TF1::Variance(Double_t, Double_t, const Double_t *, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::Variance(Double_t, Double_t, const Double_t *, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:702:21
    t.method("Variance", static_cast<Double_t (TF1::*)(Double_t, Double_t, const Double_t *, Double_t) >(&TF1::Variance));
    t.method("Variance", [](TF1& a, Double_t arg0, Double_t arg1)->Double_t { return a.Variance(arg0, arg1); });
    t.method("Variance", [](TF1& a, Double_t arg0, Double_t arg1, const Double_t * arg2)->Double_t { return a.Variance(arg0, arg1, arg2); });
    t.method("Variance", [](TF1* a, Double_t arg0, Double_t arg1)->Double_t { return a->Variance(arg0, arg1); });
    t.method("Variance", [](TF1* a, Double_t arg0, Double_t arg1, const Double_t * arg2)->Double_t { return a->Variance(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void TF1::CalcGaussLegendreSamplingPoints(Int_t, Double_t *, Double_t *, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::CalcGaussLegendreSamplingPoints(Int_t, Double_t *, Double_t *, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:710:21
    module_.method("TF1!CalcGaussLegendreSamplingPoints", static_cast<void (*)(Int_t, Double_t *, Double_t *, Double_t) >(&TF1::CalcGaussLegendreSamplingPoints));
    module_.method("TF1!CalcGaussLegendreSamplingPoints", [](Int_t arg0, Double_t * arg1, Double_t * arg2)->void { TF1::CalcGaussLegendreSamplingPoints(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for Version_t TF1::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TF1::Class_Version()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:720:4
    module_.method("TF1!Class_Version", static_cast<Version_t (*)() >(&TF1::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * TF1::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TF1::IsA()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:720:4
    t.method("IsA", static_cast<TClass * (TF1::*)()  const>(&TF1::IsA));

    DEBUG_MSG("Adding wrapper for void TF1::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:720:4
    t.method("StreamerNVirtual", static_cast<void (TF1::*)(TBuffer &) >(&TF1::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * TF1::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TF1::DeclFileName()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:720:4
    module_.method("TF1!DeclFileName", []() { return (std::string)TF1::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TF1::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TF1::ImplFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:720:4
    module_.method("TF1!ImplFileLine", static_cast<int (*)() >(&TF1::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * TF1::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TF1::ImplFileName()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:720:4
    module_.method("TF1!ImplFileName", []() { return (std::string)TF1::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TF1::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TF1::Class_Name()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:720:4
    module_.method("TF1!Class_Name", []() { return (std::string)TF1::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TF1::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TF1::Dictionary()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:720:4
    module_.method("TF1!Dictionary", static_cast<TClass * (*)() >(&TF1::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * TF1::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TF1::Class()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:720:4
    module_.method("TF1!Class", static_cast<TClass * (*)() >(&TF1::Class));

    DEBUG_MSG("Adding wrapper for void TF1::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:720:4
    t.method("Streamer", static_cast<void (TF1::*)(TBuffer &) >(&TF1::Streamer));

    DEBUG_MSG("Adding wrapper for int TF1::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TF1::DeclFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:720:4
    module_.method("TF1!DeclFileLine", static_cast<int (*)() >(&TF1::DeclFileLine));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TF1>> type_;
};
std::shared_ptr<Wrapper> newJlTF1(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTF1(module));
}
