// this file was auto-generated by wrapit v1.3.1-dirty
#include "Wrapper.h"

#include "jlROOT2.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {

  template<typename Element>
  struct BuildParameterList<TVectorT<Element>>
  {
    typedef ParameterList<Element> type;
  };

  template<typename Element> struct IsMirroredType<TVectorT<Element>> : std::false_type { };
  template<typename Element> struct DefaultConstructible<TVectorT<Element>> : std::false_type { };
}

// Class generating the wrapper for type TVectorT
// signature to use in the veto file: TVectorT
struct JlTVectorT: public Wrapper {

  JlTVectorT(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TVectorT (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TVectorDfwd.h:22:31
    jlcxx::TypeWrapper<jlcxx::Parametric<jlcxx::TypeVar<1>>>  t =  jlModule.add_type<jlcxx::Parametric<jlcxx::TypeVar<1>>>("TVectorT");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<jlcxx::Parametric<jlcxx::TypeVar<1>>>>(new jlcxx::TypeWrapper<jlcxx::Parametric<jlcxx::TypeVar<1>>>(jlModule, t));
    t.constructor<>(/*finalize=*/true);
    auto t12_decl_methods = [this]<typename Element> (jlcxx::TypeWrapper<TVectorT<Element>> wrapped){
      auto module_ = this->module_;
      wrapped.template constructor<>(/*finalize=*/true);
    };
    t.apply<TVectorT<double>>(t12_decl_methods);
  }

  void add_methods() const{
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<jlcxx::Parametric<jlcxx::TypeVar<1>>>> type_;
};
std::shared_ptr<Wrapper> newJlTVectorT(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTVectorT(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TString> : std::false_type { };
  template<> struct DefaultConstructible<TString> : std::false_type { };
}

// Class generating the wrapper for type TString
// signature to use in the veto file: TString
struct JlTString: public Wrapper {

  JlTString(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TString (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TString.h:139:7
    jlcxx::TypeWrapper<TString>  t = jlModule.add_type<TString>("TString");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TString>>(new jlcxx::TypeWrapper<TString>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TString>> type_;
};
std::shared_ptr<Wrapper> newJlTString(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTString(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TTree> : std::false_type { };
  template<> struct DefaultConstructible<TTree> : std::false_type { };
template<> struct SuperType<TTree> { typedef TNamed type; };
}

// Class generating the wrapper for type TTree
// signature to use in the veto file: TTree
struct JlTTree: public Wrapper {

  JlTTree(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TTree (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:79:7
    jlcxx::TypeWrapper<TTree>  t = jlModule.add_type<TTree>("TTree",
      jlcxx::julia_base_type<TNamed>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TTree>>(new jlcxx::TypeWrapper<TTree>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/false);


    DEBUG_MSG("Adding wrapper for void TTree::TTree(const char *, const char *, Int_t, TDirectory *) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:315:4
    t.constructor<const char *, const char *>(/*finalize=*/false);
    t.constructor<const char *, const char *, Int_t>(/*finalize=*/false);
    t.constructor<const char *, const char *, Int_t, TDirectory *>(/*finalize=*/false);

    DEBUG_MSG("Adding wrapper for Int_t TTree::AddBranchToCache(const char *, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TTree::AddBranchToCache(const char *, Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:321:28
    t.method("AddBranchToCache", static_cast<Int_t (TTree::*)(const char *, Bool_t) >(&TTree::AddBranchToCache));
    t.method("AddBranchToCache", [](TTree& a, const char * arg0)->Int_t { return a.AddBranchToCache(arg0); });
    t.method("AddBranchToCache", [](TTree* a, const char * arg0)->Int_t { return a->AddBranchToCache(arg0); });

    DEBUG_MSG("Adding wrapper for Int_t TTree::AddBranchToCache(TBranch *, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TTree::AddBranchToCache(TBranch *, Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:322:28
    t.method("AddBranchToCache", static_cast<Int_t (TTree::*)(TBranch *, Bool_t) >(&TTree::AddBranchToCache));
    t.method("AddBranchToCache", [](TTree& a, TBranch * arg0)->Int_t { return a.AddBranchToCache(arg0); });
    t.method("AddBranchToCache", [](TTree* a, TBranch * arg0)->Int_t { return a->AddBranchToCache(arg0); });

    DEBUG_MSG("Adding wrapper for Int_t TTree::DropBranchFromCache(const char *, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TTree::DropBranchFromCache(const char *, Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:323:28
    t.method("DropBranchFromCache", static_cast<Int_t (TTree::*)(const char *, Bool_t) >(&TTree::DropBranchFromCache));
    t.method("DropBranchFromCache", [](TTree& a, const char * arg0)->Int_t { return a.DropBranchFromCache(arg0); });
    t.method("DropBranchFromCache", [](TTree* a, const char * arg0)->Int_t { return a->DropBranchFromCache(arg0); });

    DEBUG_MSG("Adding wrapper for Int_t TTree::DropBranchFromCache(TBranch *, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TTree::DropBranchFromCache(TBranch *, Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:324:28
    t.method("DropBranchFromCache", static_cast<Int_t (TTree::*)(TBranch *, Bool_t) >(&TTree::DropBranchFromCache));
    t.method("DropBranchFromCache", [](TTree& a, TBranch * arg0)->Int_t { return a.DropBranchFromCache(arg0); });
    t.method("DropBranchFromCache", [](TTree* a, TBranch * arg0)->Int_t { return a->DropBranchFromCache(arg0); });

    DEBUG_MSG("Adding wrapper for void TTree::AddClone(TTree *) (" __HERE__ ")");
    // signature to use in the veto list: void TTree::AddClone(TTree *)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:325:28
    t.method("AddClone", static_cast<void (TTree::*)(TTree *) >(&TTree::AddClone));

    DEBUG_MSG("Adding wrapper for void TTree::AddTotBytes(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TTree::AddTotBytes(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:331:28
    t.method("AddTotBytes", static_cast<void (TTree::*)(Int_t) >(&TTree::AddTotBytes));

    DEBUG_MSG("Adding wrapper for void TTree::AddZipBytes(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TTree::AddZipBytes(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:332:28
    t.method("AddZipBytes", static_cast<void (TTree::*)(Int_t) >(&TTree::AddZipBytes));

    DEBUG_MSG("Adding wrapper for void TTree::AddAllocationCount(UInt_t) (" __HERE__ ")");
    // signature to use in the veto list: void TTree::AddAllocationCount(UInt_t)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:337:9
    t.method("AddAllocationCount", static_cast<void (TTree::*)(UInt_t) >(&TTree::AddAllocationCount));

    DEBUG_MSG("Adding wrapper for Long64_t TTree::AutoSave(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: Long64_t TTree::AutoSave(Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:338:28
    t.method("AutoSave", static_cast<Long64_t (TTree::*)(Option_t *) >(&TTree::AutoSave));
    t.method("AutoSave", [](TTree& a)->Long64_t { return a.AutoSave(); });
    t.method("AutoSave", [](TTree* a)->Long64_t { return a->AutoSave(); });

    DEBUG_MSG("Adding wrapper for Int_t TTree::Branch(TCollection *, Int_t, Int_t, const char *) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TTree::Branch(TCollection *, Int_t, Int_t, const char *)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:375:28
    t.method("Branch", static_cast<Int_t (TTree::*)(TCollection *, Int_t, Int_t, const char *) >(&TTree::Branch));
    t.method("Branch", [](TTree& a, TCollection * arg0)->Int_t { return a.Branch(arg0); });
    t.method("Branch", [](TTree& a, TCollection * arg0, Int_t arg1)->Int_t { return a.Branch(arg0, arg1); });
    t.method("Branch", [](TTree& a, TCollection * arg0, Int_t arg1, Int_t arg2)->Int_t { return a.Branch(arg0, arg1, arg2); });
    t.method("Branch", [](TTree* a, TCollection * arg0)->Int_t { return a->Branch(arg0); });
    t.method("Branch", [](TTree* a, TCollection * arg0, Int_t arg1)->Int_t { return a->Branch(arg0, arg1); });
    t.method("Branch", [](TTree* a, TCollection * arg0, Int_t arg1, Int_t arg2)->Int_t { return a->Branch(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for Int_t TTree::Branch(TList *, Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TTree::Branch(TList *, Int_t, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:376:28
    t.method("Branch", static_cast<Int_t (TTree::*)(TList *, Int_t, Int_t) >(&TTree::Branch));
    t.method("Branch", [](TTree& a, TList * arg0)->Int_t { return a.Branch(arg0); });
    t.method("Branch", [](TTree& a, TList * arg0, Int_t arg1)->Int_t { return a.Branch(arg0, arg1); });
    t.method("Branch", [](TTree* a, TList * arg0)->Int_t { return a->Branch(arg0); });
    t.method("Branch", [](TTree* a, TList * arg0, Int_t arg1)->Int_t { return a->Branch(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for Int_t TTree::Branch(const char *, Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TTree::Branch(const char *, Int_t, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:377:28
    t.method("Branch", static_cast<Int_t (TTree::*)(const char *, Int_t, Int_t) >(&TTree::Branch));
    t.method("Branch", [](TTree& a, const char * arg0)->Int_t { return a.Branch(arg0); });
    t.method("Branch", [](TTree& a, const char * arg0, Int_t arg1)->Int_t { return a.Branch(arg0, arg1); });
    t.method("Branch", [](TTree* a, const char * arg0)->Int_t { return a->Branch(arg0); });
    t.method("Branch", [](TTree* a, const char * arg0, Int_t arg1)->Int_t { return a->Branch(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for TBranch * TTree::Branch(const char *, void *, const char *, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: TBranch * TTree::Branch(const char *, void *, const char *, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:378:28
    t.method("Branch", static_cast<TBranch * (TTree::*)(const char *, void *, const char *, Int_t) >(&TTree::Branch));
    t.method("Branch", [](TTree& a, const char * arg0, void * arg1, const char * arg2)->TBranch * { return a.Branch(arg0, arg1, arg2); });
    t.method("Branch", [](TTree* a, const char * arg0, void * arg1, const char * arg2)->TBranch * { return a->Branch(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for TBranch * TTree::Branch(const char *, char *, const char *, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: TBranch * TTree::Branch(const char *, char *, const char *, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:379:28
    t.method("Branch", static_cast<TBranch * (TTree::*)(const char *, char *, const char *, Int_t) >(&TTree::Branch));
    t.method("Branch", [](TTree& a, const char * arg0, char * arg1, const char * arg2)->TBranch * { return a.Branch(arg0, arg1, arg2); });
    t.method("Branch", [](TTree* a, const char * arg0, char * arg1, const char * arg2)->TBranch * { return a->Branch(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for TBranch * TTree::Branch(const char *, const char *, void *, Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: TBranch * TTree::Branch(const char *, const char *, void *, Int_t, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:394:28
    t.method("Branch", static_cast<TBranch * (TTree::*)(const char *, const char *, void *, Int_t, Int_t) >(&TTree::Branch));
    t.method("Branch", [](TTree& a, const char * arg0, const char * arg1, void * arg2)->TBranch * { return a.Branch(arg0, arg1, arg2); });
    t.method("Branch", [](TTree& a, const char * arg0, const char * arg1, void * arg2, Int_t arg3)->TBranch * { return a.Branch(arg0, arg1, arg2, arg3); });
    t.method("Branch", [](TTree* a, const char * arg0, const char * arg1, void * arg2)->TBranch * { return a->Branch(arg0, arg1, arg2); });
    t.method("Branch", [](TTree* a, const char * arg0, const char * arg1, void * arg2, Int_t arg3)->TBranch * { return a->Branch(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for TBranch * TTree::Bronch(const char *, const char *, void *, Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: TBranch * TTree::Bronch(const char *, const char *, void *, Int_t, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:416:28
    t.method("Bronch", static_cast<TBranch * (TTree::*)(const char *, const char *, void *, Int_t, Int_t) >(&TTree::Bronch));
    t.method("Bronch", [](TTree& a, const char * arg0, const char * arg1, void * arg2)->TBranch * { return a.Bronch(arg0, arg1, arg2); });
    t.method("Bronch", [](TTree& a, const char * arg0, const char * arg1, void * arg2, Int_t arg3)->TBranch * { return a.Bronch(arg0, arg1, arg2, arg3); });
    t.method("Bronch", [](TTree* a, const char * arg0, const char * arg1, void * arg2)->TBranch * { return a->Bronch(arg0, arg1, arg2); });
    t.method("Bronch", [](TTree* a, const char * arg0, const char * arg1, void * arg2, Int_t arg3)->TBranch * { return a->Bronch(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for TBranch * TTree::BranchOld(const char *, const char *, void *, Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: TBranch * TTree::BranchOld(const char *, const char *, void *, Int_t, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:417:28
    t.method("BranchOld", static_cast<TBranch * (TTree::*)(const char *, const char *, void *, Int_t, Int_t) >(&TTree::BranchOld));
    t.method("BranchOld", [](TTree& a, const char * arg0, const char * arg1, void * arg2)->TBranch * { return a.BranchOld(arg0, arg1, arg2); });
    t.method("BranchOld", [](TTree& a, const char * arg0, const char * arg1, void * arg2, Int_t arg3)->TBranch * { return a.BranchOld(arg0, arg1, arg2, arg3); });
    t.method("BranchOld", [](TTree* a, const char * arg0, const char * arg1, void * arg2)->TBranch * { return a->BranchOld(arg0, arg1, arg2); });
    t.method("BranchOld", [](TTree* a, const char * arg0, const char * arg1, void * arg2, Int_t arg3)->TBranch * { return a->BranchOld(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for TBranch * TTree::BranchRef() (" __HERE__ ")");
    // signature to use in the veto list: TBranch * TTree::BranchRef()
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:418:28
    t.method("BranchRef", static_cast<TBranch * (TTree::*)() >(&TTree::BranchRef));

    DEBUG_MSG("Adding wrapper for Int_t TTree::BuildIndex(const char *, const char *) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TTree::BuildIndex(const char *, const char *)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:420:28
    t.method("BuildIndex", static_cast<Int_t (TTree::*)(const char *, const char *) >(&TTree::BuildIndex));
    t.method("BuildIndex", [](TTree& a, const char * arg0)->Int_t { return a.BuildIndex(arg0); });
    t.method("BuildIndex", [](TTree* a, const char * arg0)->Int_t { return a->BuildIndex(arg0); });

    DEBUG_MSG("Adding wrapper for TStreamerInfo * TTree::BuildStreamerInfo(TClass *, void *, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: TStreamerInfo * TTree::BuildStreamerInfo(TClass *, void *, Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:421:28
    t.method("BuildStreamerInfo", static_cast<TStreamerInfo * (TTree::*)(TClass *, void *, Bool_t) >(&TTree::BuildStreamerInfo));
    t.method("BuildStreamerInfo", [](TTree& a, TClass * arg0)->TStreamerInfo * { return a.BuildStreamerInfo(arg0); });
    t.method("BuildStreamerInfo", [](TTree& a, TClass * arg0, void * arg1)->TStreamerInfo * { return a.BuildStreamerInfo(arg0, arg1); });
    t.method("BuildStreamerInfo", [](TTree* a, TClass * arg0)->TStreamerInfo * { return a->BuildStreamerInfo(arg0); });
    t.method("BuildStreamerInfo", [](TTree* a, TClass * arg0, void * arg1)->TStreamerInfo * { return a->BuildStreamerInfo(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for TFile * TTree::ChangeFile(TFile *) (" __HERE__ ")");
    // signature to use in the veto list: TFile * TTree::ChangeFile(TFile *)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:422:28
    t.method("ChangeFile", static_cast<TFile * (TTree::*)(TFile *) >(&TTree::ChangeFile));

    DEBUG_MSG("Adding wrapper for TTree * TTree::CloneTree(Long64_t, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: TTree * TTree::CloneTree(Long64_t, Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:423:28
    t.method("CloneTree", static_cast<TTree * (TTree::*)(Long64_t, Option_t *) >(&TTree::CloneTree));
    t.method("CloneTree", [](TTree& a)->TTree * { return a.CloneTree(); });
    t.method("CloneTree", [](TTree& a, Long64_t arg0)->TTree * { return a.CloneTree(arg0); });
    t.method("CloneTree", [](TTree* a)->TTree * { return a->CloneTree(); });
    t.method("CloneTree", [](TTree* a, Long64_t arg0)->TTree * { return a->CloneTree(arg0); });

    DEBUG_MSG("Adding wrapper for void TTree::CopyAddresses(TTree *, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TTree::CopyAddresses(TTree *, Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:424:28
    t.method("CopyAddresses", static_cast<void (TTree::*)(TTree *, Bool_t) >(&TTree::CopyAddresses));
    t.method("CopyAddresses", [](TTree& a, TTree * arg0)->void { a.CopyAddresses(arg0); });
    t.method("CopyAddresses", [](TTree* a, TTree * arg0)->void { a->CopyAddresses(arg0); });

    DEBUG_MSG("Adding wrapper for Long64_t TTree::CopyEntries(TTree *, Long64_t, Option_t *, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: Long64_t TTree::CopyEntries(TTree *, Long64_t, Option_t *, Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:425:28
    t.method("CopyEntries", static_cast<Long64_t (TTree::*)(TTree *, Long64_t, Option_t *, Bool_t) >(&TTree::CopyEntries));
    t.method("CopyEntries", [](TTree& a, TTree * arg0)->Long64_t { return a.CopyEntries(arg0); });
    t.method("CopyEntries", [](TTree& a, TTree * arg0, Long64_t arg1)->Long64_t { return a.CopyEntries(arg0, arg1); });
    t.method("CopyEntries", [](TTree& a, TTree * arg0, Long64_t arg1, Option_t * arg2)->Long64_t { return a.CopyEntries(arg0, arg1, arg2); });
    t.method("CopyEntries", [](TTree* a, TTree * arg0)->Long64_t { return a->CopyEntries(arg0); });
    t.method("CopyEntries", [](TTree* a, TTree * arg0, Long64_t arg1)->Long64_t { return a->CopyEntries(arg0, arg1); });
    t.method("CopyEntries", [](TTree* a, TTree * arg0, Long64_t arg1, Option_t * arg2)->Long64_t { return a->CopyEntries(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for TTree * TTree::CopyTree(const char *, Option_t *, Long64_t, Long64_t) (" __HERE__ ")");
    // signature to use in the veto list: TTree * TTree::CopyTree(const char *, Option_t *, Long64_t, Long64_t)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:426:28
    t.method("CopyTree", static_cast<TTree * (TTree::*)(const char *, Option_t *, Long64_t, Long64_t) >(&TTree::CopyTree));
    t.method("CopyTree", [](TTree& a, const char * arg0)->TTree * { return a.CopyTree(arg0); });
    t.method("CopyTree", [](TTree& a, const char * arg0, Option_t * arg1)->TTree * { return a.CopyTree(arg0, arg1); });
    t.method("CopyTree", [](TTree& a, const char * arg0, Option_t * arg1, Long64_t arg2)->TTree * { return a.CopyTree(arg0, arg1, arg2); });
    t.method("CopyTree", [](TTree* a, const char * arg0)->TTree * { return a->CopyTree(arg0); });
    t.method("CopyTree", [](TTree* a, const char * arg0, Option_t * arg1)->TTree * { return a->CopyTree(arg0, arg1); });
    t.method("CopyTree", [](TTree* a, const char * arg0, Option_t * arg1, Long64_t arg2)->TTree * { return a->CopyTree(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void TTree::DirectoryAutoAdd(TDirectory *) (" __HERE__ ")");
    // signature to use in the veto list: void TTree::DirectoryAutoAdd(TDirectory *)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:428:28
    t.method("DirectoryAutoAdd", static_cast<void (TTree::*)(TDirectory *) >(&TTree::DirectoryAutoAdd));

    DEBUG_MSG("Adding wrapper for Int_t TTree::Debug() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TTree::Debug()
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:429:28
    t.method("Debug", static_cast<Int_t (TTree::*)()  const>(&TTree::Debug));

    DEBUG_MSG("Adding wrapper for void TTree::Delete(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TTree::Delete(Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:430:28
    t.method("Delete", static_cast<void (TTree::*)(Option_t *) >(&TTree::Delete));
    t.method("Delete", [](TTree& a)->void { a.Delete(); });
    t.method("Delete", [](TTree* a)->void { a->Delete(); });

    DEBUG_MSG("Adding wrapper for void TTree::Draw(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TTree::Draw(Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:431:28
    t.method("Draw", static_cast<void (TTree::*)(Option_t *) >(&TTree::Draw));

    DEBUG_MSG("Adding wrapper for Long64_t TTree::Draw(const char *, const char *, Option_t *, Long64_t, Long64_t) (" __HERE__ ")");
    // signature to use in the veto list: Long64_t TTree::Draw(const char *, const char *, Option_t *, Long64_t, Long64_t)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:433:28
    t.method("Draw", static_cast<Long64_t (TTree::*)(const char *, const char *, Option_t *, Long64_t, Long64_t) >(&TTree::Draw));
    t.method("Draw", [](TTree& a, const char * arg0, const char * arg1)->Long64_t { return a.Draw(arg0, arg1); });
    t.method("Draw", [](TTree& a, const char * arg0, const char * arg1, Option_t * arg2)->Long64_t { return a.Draw(arg0, arg1, arg2); });
    t.method("Draw", [](TTree& a, const char * arg0, const char * arg1, Option_t * arg2, Long64_t arg3)->Long64_t { return a.Draw(arg0, arg1, arg2, arg3); });
    t.method("Draw", [](TTree* a, const char * arg0, const char * arg1)->Long64_t { return a->Draw(arg0, arg1); });
    t.method("Draw", [](TTree* a, const char * arg0, const char * arg1, Option_t * arg2)->Long64_t { return a->Draw(arg0, arg1, arg2); });
    t.method("Draw", [](TTree* a, const char * arg0, const char * arg1, Option_t * arg2, Long64_t arg3)->Long64_t { return a->Draw(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for void TTree::DropBaskets() (" __HERE__ ")");
    // signature to use in the veto list: void TTree::DropBaskets()
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:434:28
    t.method("DropBaskets", static_cast<void (TTree::*)() >(&TTree::DropBaskets));

    DEBUG_MSG("Adding wrapper for void TTree::DropBuffers(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TTree::DropBuffers(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:435:28
    t.method("DropBuffers", static_cast<void (TTree::*)(Int_t) >(&TTree::DropBuffers));

    DEBUG_MSG("Adding wrapper for Bool_t TTree::EnableCache() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TTree::EnableCache()
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:436:28
    t.method("EnableCache", static_cast<Bool_t (TTree::*)() >(&TTree::EnableCache));

    DEBUG_MSG("Adding wrapper for Int_t TTree::Fill() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TTree::Fill()
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:437:28
    t.method("Fill", static_cast<Int_t (TTree::*)() >(&TTree::Fill));

    DEBUG_MSG("Adding wrapper for TBranch * TTree::FindBranch(const char *) (" __HERE__ ")");
    // signature to use in the veto list: TBranch * TTree::FindBranch(const char *)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:438:28
    t.method("FindBranch", static_cast<TBranch * (TTree::*)(const char *) >(&TTree::FindBranch));

    DEBUG_MSG("Adding wrapper for TLeaf * TTree::FindLeaf(const char *) (" __HERE__ ")");
    // signature to use in the veto list: TLeaf * TTree::FindLeaf(const char *)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:439:28
    t.method("FindLeaf", static_cast<TLeaf * (TTree::*)(const char *) >(&TTree::FindLeaf));

    DEBUG_MSG("Adding wrapper for Int_t TTree::Fit(const char *, const char *, const char *, Option_t *, Option_t *, Long64_t, Long64_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TTree::Fit(const char *, const char *, const char *, Option_t *, Option_t *, Long64_t, Long64_t)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:440:28
    t.method("Fit", static_cast<Int_t (TTree::*)(const char *, const char *, const char *, Option_t *, Option_t *, Long64_t, Long64_t) >(&TTree::Fit));
    t.method("Fit", [](TTree& a, const char * arg0, const char * arg1)->Int_t { return a.Fit(arg0, arg1); });
    t.method("Fit", [](TTree& a, const char * arg0, const char * arg1, const char * arg2)->Int_t { return a.Fit(arg0, arg1, arg2); });
    t.method("Fit", [](TTree& a, const char * arg0, const char * arg1, const char * arg2, Option_t * arg3)->Int_t { return a.Fit(arg0, arg1, arg2, arg3); });
    t.method("Fit", [](TTree& a, const char * arg0, const char * arg1, const char * arg2, Option_t * arg3, Option_t * arg4)->Int_t { return a.Fit(arg0, arg1, arg2, arg3, arg4); });
    t.method("Fit", [](TTree& a, const char * arg0, const char * arg1, const char * arg2, Option_t * arg3, Option_t * arg4, Long64_t arg5)->Int_t { return a.Fit(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("Fit", [](TTree* a, const char * arg0, const char * arg1)->Int_t { return a->Fit(arg0, arg1); });
    t.method("Fit", [](TTree* a, const char * arg0, const char * arg1, const char * arg2)->Int_t { return a->Fit(arg0, arg1, arg2); });
    t.method("Fit", [](TTree* a, const char * arg0, const char * arg1, const char * arg2, Option_t * arg3)->Int_t { return a->Fit(arg0, arg1, arg2, arg3); });
    t.method("Fit", [](TTree* a, const char * arg0, const char * arg1, const char * arg2, Option_t * arg3, Option_t * arg4)->Int_t { return a->Fit(arg0, arg1, arg2, arg3, arg4); });
    t.method("Fit", [](TTree* a, const char * arg0, const char * arg1, const char * arg2, Option_t * arg3, Option_t * arg4, Long64_t arg5)->Int_t { return a->Fit(arg0, arg1, arg2, arg3, arg4, arg5); });

    DEBUG_MSG("Adding wrapper for Int_t TTree::FlushBaskets(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TTree::FlushBaskets(Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:441:28
    t.method("FlushBaskets", static_cast<Int_t (TTree::*)(Bool_t)  const>(&TTree::FlushBaskets));
    t.method("FlushBaskets", [](TTree const& a)->Int_t { return a.FlushBaskets(); });
    t.method("FlushBaskets", [](TTree const* a)->Int_t { return a->FlushBaskets(); });

    DEBUG_MSG("Adding wrapper for const char * TTree::GetAlias(const char *) (" __HERE__ ")");
    // signature to use in the veto list: const char * TTree::GetAlias(const char *)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:442:28
    t.method("GetAlias", [](TTree const& a, const char * arg0) { return (std::string)a.GetAlias(arg0); });
    t.method("GetAlias", [](TTree const* a, const char * arg0) { return (std::string)a->GetAlias(arg0); });

    DEBUG_MSG("Adding wrapper for UInt_t TTree::GetAllocationCount() (" __HERE__ ")");
    // signature to use in the veto list: UInt_t TTree::GetAllocationCount()
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:443:28
    t.method("GetAllocationCount", static_cast<UInt_t (TTree::*)()  const>(&TTree::GetAllocationCount));

    DEBUG_MSG("Adding wrapper for Long64_t TTree::GetAutoFlush() (" __HERE__ ")");
    // signature to use in the veto list: Long64_t TTree::GetAutoFlush()
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:447:28
    t.method("GetAutoFlush", static_cast<Long64_t (TTree::*)()  const>(&TTree::GetAutoFlush));

    DEBUG_MSG("Adding wrapper for Long64_t TTree::GetAutoSave() (" __HERE__ ")");
    // signature to use in the veto list: Long64_t TTree::GetAutoSave()
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:448:28
    t.method("GetAutoSave", static_cast<Long64_t (TTree::*)()  const>(&TTree::GetAutoSave));

    DEBUG_MSG("Adding wrapper for TBranch * TTree::GetBranch(const char *) (" __HERE__ ")");
    // signature to use in the veto list: TBranch * TTree::GetBranch(const char *)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:449:28
    t.method("GetBranch", static_cast<TBranch * (TTree::*)(const char *) >(&TTree::GetBranch));

    DEBUG_MSG("Adding wrapper for Bool_t TTree::GetBranchStatus(const char *) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TTree::GetBranchStatus(const char *)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:451:28
    t.method("GetBranchStatus", static_cast<Bool_t (TTree::*)(const char *)  const>(&TTree::GetBranchStatus));

    DEBUG_MSG("Adding wrapper for Int_t TTree::GetBranchStyle() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TTree::GetBranchStyle()
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:452:28
    module_.method("TTree!GetBranchStyle", static_cast<Int_t (*)() >(&TTree::GetBranchStyle));

    DEBUG_MSG("Adding wrapper for Long64_t TTree::GetCacheSize() (" __HERE__ ")");
    // signature to use in the veto list: Long64_t TTree::GetCacheSize()
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:453:28
    t.method("GetCacheSize", static_cast<Long64_t (TTree::*)()  const>(&TTree::GetCacheSize));

    DEBUG_MSG("Adding wrapper for TTree::TClusterIterator TTree::GetClusterIterator(Long64_t) (" __HERE__ ")");
    // signature to use in the veto list: TTree::TClusterIterator TTree::GetClusterIterator(Long64_t)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:454:29
    t.method("GetClusterIterator", static_cast<TTree::TClusterIterator (TTree::*)(Long64_t) >(&TTree::GetClusterIterator));

    DEBUG_MSG("Adding wrapper for Long64_t TTree::GetChainEntryNumber(Long64_t) (" __HERE__ ")");
    // signature to use in the veto list: Long64_t TTree::GetChainEntryNumber(Long64_t)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:455:28
    t.method("GetChainEntryNumber", static_cast<Long64_t (TTree::*)(Long64_t)  const>(&TTree::GetChainEntryNumber));

    DEBUG_MSG("Adding wrapper for Long64_t TTree::GetChainOffset() (" __HERE__ ")");
    // signature to use in the veto list: Long64_t TTree::GetChainOffset()
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:456:28
    t.method("GetChainOffset", static_cast<Long64_t (TTree::*)()  const>(&TTree::GetChainOffset));

    DEBUG_MSG("Adding wrapper for Bool_t TTree::GetClusterPrefetch() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TTree::GetClusterPrefetch()
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:457:28
    t.method("GetClusterPrefetch", static_cast<Bool_t (TTree::*)()  const>(&TTree::GetClusterPrefetch));

    DEBUG_MSG("Adding wrapper for TFile * TTree::GetCurrentFile() (" __HERE__ ")");
    // signature to use in the veto list: TFile * TTree::GetCurrentFile()
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:458:28
    t.method("GetCurrentFile", static_cast<TFile * (TTree::*)()  const>(&TTree::GetCurrentFile));

    DEBUG_MSG("Adding wrapper for Int_t TTree::GetDefaultEntryOffsetLen() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TTree::GetDefaultEntryOffsetLen()
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:459:28
    t.method("GetDefaultEntryOffsetLen", static_cast<Int_t (TTree::*)()  const>(&TTree::GetDefaultEntryOffsetLen));

    DEBUG_MSG("Adding wrapper for Long64_t TTree::GetDebugMax() (" __HERE__ ")");
    // signature to use in the veto list: Long64_t TTree::GetDebugMax()
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:460:28
    t.method("GetDebugMax", static_cast<Long64_t (TTree::*)()  const>(&TTree::GetDebugMax));

    DEBUG_MSG("Adding wrapper for Long64_t TTree::GetDebugMin() (" __HERE__ ")");
    // signature to use in the veto list: Long64_t TTree::GetDebugMin()
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:461:28
    t.method("GetDebugMin", static_cast<Long64_t (TTree::*)()  const>(&TTree::GetDebugMin));

    DEBUG_MSG("Adding wrapper for TDirectory * TTree::GetDirectory() (" __HERE__ ")");
    // signature to use in the veto list: TDirectory * TTree::GetDirectory()
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:462:28
    t.method("GetDirectory", static_cast<TDirectory * (TTree::*)()  const>(&TTree::GetDirectory));

    DEBUG_MSG("Adding wrapper for Long64_t TTree::GetEntries() (" __HERE__ ")");
    // signature to use in the veto list: Long64_t TTree::GetEntries()
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:463:28
    t.method("GetEntries", static_cast<Long64_t (TTree::*)()  const>(&TTree::GetEntries));

    DEBUG_MSG("Adding wrapper for Long64_t TTree::GetEntries(const char *) (" __HERE__ ")");
    // signature to use in the veto list: Long64_t TTree::GetEntries(const char *)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:464:28
    t.method("GetEntries", static_cast<Long64_t (TTree::*)(const char *) >(&TTree::GetEntries));

    DEBUG_MSG("Adding wrapper for Long64_t TTree::GetEntriesFast() (" __HERE__ ")");
    // signature to use in the veto list: Long64_t TTree::GetEntriesFast()
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:465:28
    t.method("GetEntriesFast", static_cast<Long64_t (TTree::*)()  const>(&TTree::GetEntriesFast));

    DEBUG_MSG("Adding wrapper for Long64_t TTree::GetEntriesFriend() (" __HERE__ ")");
    // signature to use in the veto list: Long64_t TTree::GetEntriesFriend()
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:466:28
    t.method("GetEntriesFriend", static_cast<Long64_t (TTree::*)()  const>(&TTree::GetEntriesFriend));

    DEBUG_MSG("Adding wrapper for Long64_t TTree::GetEstimate() (" __HERE__ ")");
    // signature to use in the veto list: Long64_t TTree::GetEstimate()
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:467:28
    t.method("GetEstimate", static_cast<Long64_t (TTree::*)()  const>(&TTree::GetEstimate));

    DEBUG_MSG("Adding wrapper for Int_t TTree::GetEntry(Long64_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TTree::GetEntry(Long64_t, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:468:28
    t.method("GetEntry", static_cast<Int_t (TTree::*)(Long64_t, Int_t) >(&TTree::GetEntry));
    t.method("GetEntry", [](TTree& a, Long64_t arg0)->Int_t { return a.GetEntry(arg0); });
    t.method("GetEntry", [](TTree* a, Long64_t arg0)->Int_t { return a->GetEntry(arg0); });

    DEBUG_MSG("Adding wrapper for Int_t TTree::GetEvent(Long64_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TTree::GetEvent(Long64_t, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:469:28
    t.method("GetEvent", static_cast<Int_t (TTree::*)(Long64_t, Int_t) >(&TTree::GetEvent));
    t.method("GetEvent", [](TTree& a, Long64_t arg0)->Int_t { return a.GetEvent(arg0); });
    t.method("GetEvent", [](TTree* a, Long64_t arg0)->Int_t { return a->GetEvent(arg0); });

    DEBUG_MSG("Adding wrapper for Int_t TTree::GetEntryWithIndex(Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TTree::GetEntryWithIndex(Int_t, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:470:28
    t.method("GetEntryWithIndex", static_cast<Int_t (TTree::*)(Int_t, Int_t) >(&TTree::GetEntryWithIndex));
    t.method("GetEntryWithIndex", [](TTree& a, Int_t arg0)->Int_t { return a.GetEntryWithIndex(arg0); });
    t.method("GetEntryWithIndex", [](TTree* a, Int_t arg0)->Int_t { return a->GetEntryWithIndex(arg0); });

    DEBUG_MSG("Adding wrapper for Long64_t TTree::GetEntryNumberWithBestIndex(Long64_t, Long64_t) (" __HERE__ ")");
    // signature to use in the veto list: Long64_t TTree::GetEntryNumberWithBestIndex(Long64_t, Long64_t)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:471:28
    t.method("GetEntryNumberWithBestIndex", static_cast<Long64_t (TTree::*)(Long64_t, Long64_t)  const>(&TTree::GetEntryNumberWithBestIndex));
    t.method("GetEntryNumberWithBestIndex", [](TTree const& a, Long64_t arg0)->Long64_t { return a.GetEntryNumberWithBestIndex(arg0); });
    t.method("GetEntryNumberWithBestIndex", [](TTree const* a, Long64_t arg0)->Long64_t { return a->GetEntryNumberWithBestIndex(arg0); });

    DEBUG_MSG("Adding wrapper for Long64_t TTree::GetEntryNumberWithIndex(Long64_t, Long64_t) (" __HERE__ ")");
    // signature to use in the veto list: Long64_t TTree::GetEntryNumberWithIndex(Long64_t, Long64_t)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:472:28
    t.method("GetEntryNumberWithIndex", static_cast<Long64_t (TTree::*)(Long64_t, Long64_t)  const>(&TTree::GetEntryNumberWithIndex));
    t.method("GetEntryNumberWithIndex", [](TTree const& a, Long64_t arg0)->Long64_t { return a.GetEntryNumberWithIndex(arg0); });
    t.method("GetEntryNumberWithIndex", [](TTree const* a, Long64_t arg0)->Long64_t { return a->GetEntryNumberWithIndex(arg0); });

    DEBUG_MSG("Adding wrapper for TEntryList * TTree::GetEntryList() (" __HERE__ ")");
    // signature to use in the veto list: TEntryList * TTree::GetEntryList()
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:474:28
    t.method("GetEntryList", static_cast<TEntryList * (TTree::*)() >(&TTree::GetEntryList));

    DEBUG_MSG("Adding wrapper for Long64_t TTree::GetEntryNumber(Long64_t) (" __HERE__ ")");
    // signature to use in the veto list: Long64_t TTree::GetEntryNumber(Long64_t)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:475:28
    t.method("GetEntryNumber", static_cast<Long64_t (TTree::*)(Long64_t)  const>(&TTree::GetEntryNumber));

    DEBUG_MSG("Adding wrapper for Int_t TTree::GetFileNumber() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TTree::GetFileNumber()
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:476:28
    t.method("GetFileNumber", static_cast<Int_t (TTree::*)()  const>(&TTree::GetFileNumber));

    DEBUG_MSG("Adding wrapper for TTree * TTree::GetFriend(const char *) (" __HERE__ ")");
    // signature to use in the veto list: TTree * TTree::GetFriend(const char *)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:477:28
    t.method("GetFriend", static_cast<TTree * (TTree::*)(const char *)  const>(&TTree::GetFriend));

    DEBUG_MSG("Adding wrapper for const char * TTree::GetFriendAlias(TTree *) (" __HERE__ ")");
    // signature to use in the veto list: const char * TTree::GetFriendAlias(TTree *)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:478:28
    t.method("GetFriendAlias", [](TTree const& a, TTree * arg0) { return (std::string)a.GetFriendAlias(arg0); });
    t.method("GetFriendAlias", [](TTree const* a, TTree * arg0) { return (std::string)a->GetFriendAlias(arg0); });

    DEBUG_MSG("Adding wrapper for TH1 * TTree::GetHistogram() (" __HERE__ ")");
    // signature to use in the veto list: TH1 * TTree::GetHistogram()
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:479:28
    t.method("GetHistogram", static_cast<TH1 * (TTree::*)() >(&TTree::GetHistogram));

    DEBUG_MSG("Adding wrapper for Bool_t TTree::GetImplicitMT() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TTree::GetImplicitMT()
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:480:28
    t.method("GetImplicitMT", static_cast<Bool_t (TTree::*)() >(&TTree::GetImplicitMT));

    DEBUG_MSG("Adding wrapper for Int_t * TTree::GetIndex() (" __HERE__ ")");
    // signature to use in the veto list: Int_t * TTree::GetIndex()
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:481:28
    t.method("GetIndex", static_cast<Int_t * (TTree::*)() >(&TTree::GetIndex));

    DEBUG_MSG("Adding wrapper for Double_t * TTree::GetIndexValues() (" __HERE__ ")");
    // signature to use in the veto list: Double_t * TTree::GetIndexValues()
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:482:28
    t.method("GetIndexValues", static_cast<Double_t * (TTree::*)() >(&TTree::GetIndexValues));

    DEBUG_MSG("Adding wrapper for ROOT::TIOFeatures TTree::GetIOFeatures() (" __HERE__ ")");
    // signature to use in the veto list: ROOT::TIOFeatures TTree::GetIOFeatures()
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:483:30
    t.method("GetIOFeatures", static_cast<ROOT::TIOFeatures (TTree::*)()  const>(&TTree::GetIOFeatures));

    DEBUG_MSG("Adding wrapper for TIterator * TTree::GetIteratorOnAllLeaves(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: TIterator * TTree::GetIteratorOnAllLeaves(Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:484:28
    t.method("GetIteratorOnAllLeaves", static_cast<TIterator * (TTree::*)(Bool_t) >(&TTree::GetIteratorOnAllLeaves));
    t.method("GetIteratorOnAllLeaves", [](TTree& a)->TIterator * { return a.GetIteratorOnAllLeaves(); });
    t.method("GetIteratorOnAllLeaves", [](TTree* a)->TIterator * { return a->GetIteratorOnAllLeaves(); });

    DEBUG_MSG("Adding wrapper for TLeaf * TTree::GetLeaf(const char *, const char *) (" __HERE__ ")");
    // signature to use in the veto list: TLeaf * TTree::GetLeaf(const char *, const char *)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:485:28
    t.method("GetLeaf", static_cast<TLeaf * (TTree::*)(const char *, const char *) >(&TTree::GetLeaf));

    DEBUG_MSG("Adding wrapper for TLeaf * TTree::GetLeaf(const char *) (" __HERE__ ")");
    // signature to use in the veto list: TLeaf * TTree::GetLeaf(const char *)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:486:28
    t.method("GetLeaf", static_cast<TLeaf * (TTree::*)(const char *) >(&TTree::GetLeaf));

    DEBUG_MSG("Adding wrapper for TList * TTree::GetListOfClones() (" __HERE__ ")");
    // signature to use in the veto list: TList * TTree::GetListOfClones()
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:487:28
    t.method("GetListOfClones", static_cast<TList * (TTree::*)() >(&TTree::GetListOfClones));

    DEBUG_MSG("Adding wrapper for TObjArray * TTree::GetListOfBranches() (" __HERE__ ")");
    // signature to use in the veto list: TObjArray * TTree::GetListOfBranches()
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:488:28
    t.method("GetListOfBranches", static_cast<TObjArray * (TTree::*)() >(&TTree::GetListOfBranches));

    DEBUG_MSG("Adding wrapper for TObjArray * TTree::GetListOfLeaves() (" __HERE__ ")");
    // signature to use in the veto list: TObjArray * TTree::GetListOfLeaves()
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:489:28
    t.method("GetListOfLeaves", static_cast<TObjArray * (TTree::*)() >(&TTree::GetListOfLeaves));

    DEBUG_MSG("Adding wrapper for TList * TTree::GetListOfFriends() (" __HERE__ ")");
    // signature to use in the veto list: TList * TTree::GetListOfFriends()
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:490:28
    t.method("GetListOfFriends", static_cast<TList * (TTree::*)()  const>(&TTree::GetListOfFriends));

    DEBUG_MSG("Adding wrapper for TList * TTree::GetListOfAliases() (" __HERE__ ")");
    // signature to use in the veto list: TList * TTree::GetListOfAliases()
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:491:28
    t.method("GetListOfAliases", static_cast<TList * (TTree::*)()  const>(&TTree::GetListOfAliases));

    DEBUG_MSG("Adding wrapper for Int_t TTree::GetMakeClass() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TTree::GetMakeClass()
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:495:28
    t.method("GetMakeClass", static_cast<Int_t (TTree::*)()  const>(&TTree::GetMakeClass));

    DEBUG_MSG("Adding wrapper for Long64_t TTree::GetMaxEntryLoop() (" __HERE__ ")");
    // signature to use in the veto list: Long64_t TTree::GetMaxEntryLoop()
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:497:28
    t.method("GetMaxEntryLoop", static_cast<Long64_t (TTree::*)()  const>(&TTree::GetMaxEntryLoop));

    DEBUG_MSG("Adding wrapper for Double_t TTree::GetMaximum(const char *) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TTree::GetMaximum(const char *)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:498:28
    t.method("GetMaximum", static_cast<Double_t (TTree::*)(const char *) >(&TTree::GetMaximum));

    DEBUG_MSG("Adding wrapper for Long64_t TTree::GetMaxTreeSize() (" __HERE__ ")");
    // signature to use in the veto list: Long64_t TTree::GetMaxTreeSize()
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:499:28
    module_.method("TTree!GetMaxTreeSize", static_cast<Long64_t (*)() >(&TTree::GetMaxTreeSize));

    DEBUG_MSG("Adding wrapper for Long64_t TTree::GetMaxVirtualSize() (" __HERE__ ")");
    // signature to use in the veto list: Long64_t TTree::GetMaxVirtualSize()
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:500:28
    t.method("GetMaxVirtualSize", static_cast<Long64_t (TTree::*)()  const>(&TTree::GetMaxVirtualSize));

    DEBUG_MSG("Adding wrapper for Double_t TTree::GetMinimum(const char *) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TTree::GetMinimum(const char *)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:501:28
    t.method("GetMinimum", static_cast<Double_t (TTree::*)(const char *) >(&TTree::GetMinimum));

    DEBUG_MSG("Adding wrapper for Int_t TTree::GetNbranches() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TTree::GetNbranches()
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:502:28
    t.method("GetNbranches", static_cast<Int_t (TTree::*)() >(&TTree::GetNbranches));

    DEBUG_MSG("Adding wrapper for TObject * TTree::GetNotify() (" __HERE__ ")");
    // signature to use in the veto list: TObject * TTree::GetNotify()
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:503:28
    t.method("GetNotify", static_cast<TObject * (TTree::*)()  const>(&TTree::GetNotify));

    DEBUG_MSG("Adding wrapper for TVirtualTreePlayer * TTree::GetPlayer() (" __HERE__ ")");
    // signature to use in the veto list: TVirtualTreePlayer * TTree::GetPlayer()
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:504:28
    t.method("GetPlayer", static_cast<TVirtualTreePlayer * (TTree::*)() >(&TTree::GetPlayer));

    DEBUG_MSG("Adding wrapper for Int_t TTree::GetPacketSize() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TTree::GetPacketSize()
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:505:28
    t.method("GetPacketSize", static_cast<Int_t (TTree::*)()  const>(&TTree::GetPacketSize));

    DEBUG_MSG("Adding wrapper for Long64_t TTree::GetReadEntry() (" __HERE__ ")");
    // signature to use in the veto list: Long64_t TTree::GetReadEntry()
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:509:28
    t.method("GetReadEntry", static_cast<Long64_t (TTree::*)()  const>(&TTree::GetReadEntry));

    DEBUG_MSG("Adding wrapper for Long64_t TTree::GetReadEvent() (" __HERE__ ")");
    // signature to use in the veto list: Long64_t TTree::GetReadEvent()
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:510:28
    t.method("GetReadEvent", static_cast<Long64_t (TTree::*)()  const>(&TTree::GetReadEvent));

    DEBUG_MSG("Adding wrapper for Int_t TTree::GetScanField() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TTree::GetScanField()
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:511:28
    t.method("GetScanField", static_cast<Int_t (TTree::*)()  const>(&TTree::GetScanField));

    DEBUG_MSG("Adding wrapper for Long64_t TTree::GetSelectedRows() (" __HERE__ ")");
    // signature to use in the veto list: Long64_t TTree::GetSelectedRows()
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:513:28
    t.method("GetSelectedRows", static_cast<Long64_t (TTree::*)() >(&TTree::GetSelectedRows));

    DEBUG_MSG("Adding wrapper for Int_t TTree::GetTimerInterval() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TTree::GetTimerInterval()
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:514:28
    t.method("GetTimerInterval", static_cast<Int_t (TTree::*)()  const>(&TTree::GetTimerInterval));

    DEBUG_MSG("Adding wrapper for TBuffer * TTree::GetTransientBuffer(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: TBuffer * TTree::GetTransientBuffer(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:515:28
    t.method("GetTransientBuffer", static_cast<TBuffer * (TTree::*)(Int_t) >(&TTree::GetTransientBuffer));

    DEBUG_MSG("Adding wrapper for Long64_t TTree::GetTotBytes() (" __HERE__ ")");
    // signature to use in the veto list: Long64_t TTree::GetTotBytes()
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:516:28
    t.method("GetTotBytes", static_cast<Long64_t (TTree::*)()  const>(&TTree::GetTotBytes));

    DEBUG_MSG("Adding wrapper for TTree * TTree::GetTree() (" __HERE__ ")");
    // signature to use in the veto list: TTree * TTree::GetTree()
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:517:28
    t.method("GetTree", static_cast<TTree * (TTree::*)()  const>(&TTree::GetTree));

    DEBUG_MSG("Adding wrapper for Int_t TTree::GetTreeNumber() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TTree::GetTreeNumber()
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:519:28
    t.method("GetTreeNumber", static_cast<Int_t (TTree::*)()  const>(&TTree::GetTreeNumber));

    DEBUG_MSG("Adding wrapper for Float_t TTree::GetTargetMemoryRatio() (" __HERE__ ")");
    // signature to use in the veto list: Float_t TTree::GetTargetMemoryRatio()
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:520:12
    t.method("GetTargetMemoryRatio", static_cast<Float_t (TTree::*)()  const>(&TTree::GetTargetMemoryRatio));

    DEBUG_MSG("Adding wrapper for Int_t TTree::GetUpdate() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TTree::GetUpdate()
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:521:28
    t.method("GetUpdate", static_cast<Int_t (TTree::*)()  const>(&TTree::GetUpdate));

    DEBUG_MSG("Adding wrapper for TList * TTree::GetUserInfo() (" __HERE__ ")");
    // signature to use in the veto list: TList * TTree::GetUserInfo()
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:522:28
    t.method("GetUserInfo", static_cast<TList * (TTree::*)() >(&TTree::GetUserInfo));

    DEBUG_MSG("Adding wrapper for Double_t * TTree::GetVal(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t * TTree::GetVal(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:534:28
    t.method("GetVal", static_cast<Double_t * (TTree::*)(Int_t) >(&TTree::GetVal));

    DEBUG_MSG("Adding wrapper for Double_t * TTree::GetV1() (" __HERE__ ")");
    // signature to use in the veto list: Double_t * TTree::GetV1()
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:536:28
    t.method("GetV1", static_cast<Double_t * (TTree::*)() >(&TTree::GetV1));

    DEBUG_MSG("Adding wrapper for Double_t * TTree::GetV2() (" __HERE__ ")");
    // signature to use in the veto list: Double_t * TTree::GetV2()
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:538:28
    t.method("GetV2", static_cast<Double_t * (TTree::*)() >(&TTree::GetV2));

    DEBUG_MSG("Adding wrapper for Double_t * TTree::GetV3() (" __HERE__ ")");
    // signature to use in the veto list: Double_t * TTree::GetV3()
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:540:28
    t.method("GetV3", static_cast<Double_t * (TTree::*)() >(&TTree::GetV3));

    DEBUG_MSG("Adding wrapper for Double_t * TTree::GetV4() (" __HERE__ ")");
    // signature to use in the veto list: Double_t * TTree::GetV4()
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:542:28
    t.method("GetV4", static_cast<Double_t * (TTree::*)() >(&TTree::GetV4));

    DEBUG_MSG("Adding wrapper for Double_t * TTree::GetW() (" __HERE__ ")");
    // signature to use in the veto list: Double_t * TTree::GetW()
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:543:28
    t.method("GetW", static_cast<Double_t * (TTree::*)() >(&TTree::GetW));

    DEBUG_MSG("Adding wrapper for Double_t TTree::GetWeight() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TTree::GetWeight()
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:544:28
    t.method("GetWeight", static_cast<Double_t (TTree::*)()  const>(&TTree::GetWeight));

    DEBUG_MSG("Adding wrapper for Long64_t TTree::GetZipBytes() (" __HERE__ ")");
    // signature to use in the veto list: Long64_t TTree::GetZipBytes()
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:545:28
    t.method("GetZipBytes", static_cast<Long64_t (TTree::*)()  const>(&TTree::GetZipBytes));

    DEBUG_MSG("Adding wrapper for void TTree::IncrementTotalBuffers(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TTree::IncrementTotalBuffers(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:546:28
    t.method("IncrementTotalBuffers", static_cast<void (TTree::*)(Int_t) >(&TTree::IncrementTotalBuffers));

    DEBUG_MSG("Adding wrapper for Bool_t TTree::IsFolder() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TTree::IsFolder()
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:547:28
    t.method("IsFolder", static_cast<Bool_t (TTree::*)()  const>(&TTree::IsFolder));

    DEBUG_MSG("Adding wrapper for Bool_t TTree::InPlaceClone(TDirectory *, const char *) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TTree::InPlaceClone(TDirectory *, const char *)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:548:28
    t.method("InPlaceClone", static_cast<Bool_t (TTree::*)(TDirectory *, const char *) >(&TTree::InPlaceClone));
    t.method("InPlaceClone", [](TTree& a, TDirectory * arg0)->Bool_t { return a.InPlaceClone(arg0); });
    t.method("InPlaceClone", [](TTree* a, TDirectory * arg0)->Bool_t { return a->InPlaceClone(arg0); });

    DEBUG_MSG("Adding wrapper for Int_t TTree::LoadBaskets(Long64_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TTree::LoadBaskets(Long64_t)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:549:28
    t.method("LoadBaskets", static_cast<Int_t (TTree::*)(Long64_t) >(&TTree::LoadBaskets));
    t.method("LoadBaskets", [](TTree& a)->Int_t { return a.LoadBaskets(); });
    t.method("LoadBaskets", [](TTree* a)->Int_t { return a->LoadBaskets(); });

    DEBUG_MSG("Adding wrapper for Long64_t TTree::LoadTree(Long64_t) (" __HERE__ ")");
    // signature to use in the veto list: Long64_t TTree::LoadTree(Long64_t)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:550:28
    t.method("LoadTree", static_cast<Long64_t (TTree::*)(Long64_t) >(&TTree::LoadTree));

    DEBUG_MSG("Adding wrapper for Long64_t TTree::LoadTreeFriend(Long64_t, TTree *) (" __HERE__ ")");
    // signature to use in the veto list: Long64_t TTree::LoadTreeFriend(Long64_t, TTree *)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:551:28
    t.method("LoadTreeFriend", static_cast<Long64_t (TTree::*)(Long64_t, TTree *) >(&TTree::LoadTreeFriend));

    DEBUG_MSG("Adding wrapper for Int_t TTree::MakeClass(const char *, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TTree::MakeClass(const char *, Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:552:28
    t.method("MakeClass", static_cast<Int_t (TTree::*)(const char *, Option_t *) >(&TTree::MakeClass));
    t.method("MakeClass", [](TTree& a)->Int_t { return a.MakeClass(); });
    t.method("MakeClass", [](TTree& a, const char * arg0)->Int_t { return a.MakeClass(arg0); });
    t.method("MakeClass", [](TTree* a)->Int_t { return a->MakeClass(); });
    t.method("MakeClass", [](TTree* a, const char * arg0)->Int_t { return a->MakeClass(arg0); });

    DEBUG_MSG("Adding wrapper for Int_t TTree::MakeCode(const char *) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TTree::MakeCode(const char *)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:553:28
    t.method("MakeCode", static_cast<Int_t (TTree::*)(const char *) >(&TTree::MakeCode));
    t.method("MakeCode", [](TTree& a)->Int_t { return a.MakeCode(); });
    t.method("MakeCode", [](TTree* a)->Int_t { return a->MakeCode(); });

    DEBUG_MSG("Adding wrapper for Int_t TTree::MakeProxy(const char *, const char *, const char *, const char *, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TTree::MakeProxy(const char *, const char *, const char *, const char *, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:554:28
    t.method("MakeProxy", static_cast<Int_t (TTree::*)(const char *, const char *, const char *, const char *, Int_t) >(&TTree::MakeProxy));
    t.method("MakeProxy", [](TTree& a, const char * arg0)->Int_t { return a.MakeProxy(arg0); });
    t.method("MakeProxy", [](TTree& a, const char * arg0, const char * arg1)->Int_t { return a.MakeProxy(arg0, arg1); });
    t.method("MakeProxy", [](TTree& a, const char * arg0, const char * arg1, const char * arg2)->Int_t { return a.MakeProxy(arg0, arg1, arg2); });
    t.method("MakeProxy", [](TTree& a, const char * arg0, const char * arg1, const char * arg2, const char * arg3)->Int_t { return a.MakeProxy(arg0, arg1, arg2, arg3); });
    t.method("MakeProxy", [](TTree* a, const char * arg0)->Int_t { return a->MakeProxy(arg0); });
    t.method("MakeProxy", [](TTree* a, const char * arg0, const char * arg1)->Int_t { return a->MakeProxy(arg0, arg1); });
    t.method("MakeProxy", [](TTree* a, const char * arg0, const char * arg1, const char * arg2)->Int_t { return a->MakeProxy(arg0, arg1, arg2); });
    t.method("MakeProxy", [](TTree* a, const char * arg0, const char * arg1, const char * arg2, const char * arg3)->Int_t { return a->MakeProxy(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for Int_t TTree::MakeSelector(const char *, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TTree::MakeSelector(const char *, Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:555:28
    t.method("MakeSelector", static_cast<Int_t (TTree::*)(const char *, Option_t *) >(&TTree::MakeSelector));
    t.method("MakeSelector", [](TTree& a)->Int_t { return a.MakeSelector(); });
    t.method("MakeSelector", [](TTree& a, const char * arg0)->Int_t { return a.MakeSelector(arg0); });
    t.method("MakeSelector", [](TTree* a)->Int_t { return a->MakeSelector(); });
    t.method("MakeSelector", [](TTree* a, const char * arg0)->Int_t { return a->MakeSelector(arg0); });

    DEBUG_MSG("Adding wrapper for Bool_t TTree::MemoryFull(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TTree::MemoryFull(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:556:28
    t.method("MemoryFull", static_cast<Bool_t (TTree::*)(Int_t) >(&TTree::MemoryFull));

    DEBUG_MSG("Adding wrapper for Long64_t TTree::Merge(TCollection *, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: Long64_t TTree::Merge(TCollection *, Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:557:28
    t.method("Merge", static_cast<Long64_t (TTree::*)(TCollection *, Option_t *) >(&TTree::Merge));
    t.method("Merge", [](TTree& a, TCollection * arg0)->Long64_t { return a.Merge(arg0); });
    t.method("Merge", [](TTree* a, TCollection * arg0)->Long64_t { return a->Merge(arg0); });

    DEBUG_MSG("Adding wrapper for TTree * TTree::MergeTrees(TList *, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: TTree * TTree::MergeTrees(TList *, Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:559:28
    module_.method("TTree!MergeTrees", static_cast<TTree * (*)(TList *, Option_t *) >(&TTree::MergeTrees));
    module_.method("TTree!MergeTrees", [](TList * arg0)->TTree * { return TTree::MergeTrees(arg0); });

    DEBUG_MSG("Adding wrapper for Bool_t TTree::Notify() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TTree::Notify()
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:560:28
    t.method("Notify", static_cast<Bool_t (TTree::*)() >(&TTree::Notify));

    DEBUG_MSG("Adding wrapper for void TTree::OptimizeBaskets(ULong64_t, Float_t, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TTree::OptimizeBaskets(ULong64_t, Float_t, Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:561:28
    t.method("OptimizeBaskets", static_cast<void (TTree::*)(ULong64_t, Float_t, Option_t *) >(&TTree::OptimizeBaskets));
    t.method("OptimizeBaskets", [](TTree& a)->void { a.OptimizeBaskets(); });
    t.method("OptimizeBaskets", [](TTree& a, ULong64_t arg0)->void { a.OptimizeBaskets(arg0); });
    t.method("OptimizeBaskets", [](TTree& a, ULong64_t arg0, Float_t arg1)->void { a.OptimizeBaskets(arg0, arg1); });
    t.method("OptimizeBaskets", [](TTree* a)->void { a->OptimizeBaskets(); });
    t.method("OptimizeBaskets", [](TTree* a, ULong64_t arg0)->void { a->OptimizeBaskets(arg0); });
    t.method("OptimizeBaskets", [](TTree* a, ULong64_t arg0, Float_t arg1)->void { a->OptimizeBaskets(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void TTree::Print(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TTree::Print(Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:563:28
    t.method("Print", static_cast<void (TTree::*)(Option_t *)  const>(&TTree::Print));
    t.method("Print", [](TTree const& a)->void { a.Print(); });
    t.method("Print", [](TTree const* a)->void { a->Print(); });

    DEBUG_MSG("Adding wrapper for void TTree::PrintCacheStats(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TTree::PrintCacheStats(Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:564:28
    t.method("PrintCacheStats", static_cast<void (TTree::*)(Option_t *)  const>(&TTree::PrintCacheStats));
    t.method("PrintCacheStats", [](TTree const& a)->void { a.PrintCacheStats(); });
    t.method("PrintCacheStats", [](TTree const* a)->void { a->PrintCacheStats(); });

    DEBUG_MSG("Adding wrapper for Long64_t TTree::Process(const char *, Option_t *, Long64_t, Long64_t) (" __HERE__ ")");
    // signature to use in the veto list: Long64_t TTree::Process(const char *, Option_t *, Long64_t, Long64_t)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:565:28
    t.method("Process", static_cast<Long64_t (TTree::*)(const char *, Option_t *, Long64_t, Long64_t) >(&TTree::Process));
    t.method("Process", [](TTree& a, const char * arg0)->Long64_t { return a.Process(arg0); });
    t.method("Process", [](TTree& a, const char * arg0, Option_t * arg1)->Long64_t { return a.Process(arg0, arg1); });
    t.method("Process", [](TTree& a, const char * arg0, Option_t * arg1, Long64_t arg2)->Long64_t { return a.Process(arg0, arg1, arg2); });
    t.method("Process", [](TTree* a, const char * arg0)->Long64_t { return a->Process(arg0); });
    t.method("Process", [](TTree* a, const char * arg0, Option_t * arg1)->Long64_t { return a->Process(arg0, arg1); });
    t.method("Process", [](TTree* a, const char * arg0, Option_t * arg1, Long64_t arg2)->Long64_t { return a->Process(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for Long64_t TTree::Project(const char *, const char *, const char *, Option_t *, Long64_t, Long64_t) (" __HERE__ ")");
    // signature to use in the veto list: Long64_t TTree::Project(const char *, const char *, const char *, Option_t *, Long64_t, Long64_t)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:567:28
    t.method("Project", static_cast<Long64_t (TTree::*)(const char *, const char *, const char *, Option_t *, Long64_t, Long64_t) >(&TTree::Project));
    t.method("Project", [](TTree& a, const char * arg0, const char * arg1)->Long64_t { return a.Project(arg0, arg1); });
    t.method("Project", [](TTree& a, const char * arg0, const char * arg1, const char * arg2)->Long64_t { return a.Project(arg0, arg1, arg2); });
    t.method("Project", [](TTree& a, const char * arg0, const char * arg1, const char * arg2, Option_t * arg3)->Long64_t { return a.Project(arg0, arg1, arg2, arg3); });
    t.method("Project", [](TTree& a, const char * arg0, const char * arg1, const char * arg2, Option_t * arg3, Long64_t arg4)->Long64_t { return a.Project(arg0, arg1, arg2, arg3, arg4); });
    t.method("Project", [](TTree* a, const char * arg0, const char * arg1)->Long64_t { return a->Project(arg0, arg1); });
    t.method("Project", [](TTree* a, const char * arg0, const char * arg1, const char * arg2)->Long64_t { return a->Project(arg0, arg1, arg2); });
    t.method("Project", [](TTree* a, const char * arg0, const char * arg1, const char * arg2, Option_t * arg3)->Long64_t { return a->Project(arg0, arg1, arg2, arg3); });
    t.method("Project", [](TTree* a, const char * arg0, const char * arg1, const char * arg2, Option_t * arg3, Long64_t arg4)->Long64_t { return a->Project(arg0, arg1, arg2, arg3, arg4); });

    DEBUG_MSG("Adding wrapper for Long64_t TTree::ReadFile(const char *, const char *, char) (" __HERE__ ")");
    // signature to use in the veto list: Long64_t TTree::ReadFile(const char *, const char *, char)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:569:28
    t.method("ReadFile", static_cast<Long64_t (TTree::*)(const char *, const char *, char) >(&TTree::ReadFile));
    t.method("ReadFile", [](TTree& a, const char * arg0)->Long64_t { return a.ReadFile(arg0); });
    t.method("ReadFile", [](TTree& a, const char * arg0, const char * arg1)->Long64_t { return a.ReadFile(arg0, arg1); });
    t.method("ReadFile", [](TTree* a, const char * arg0)->Long64_t { return a->ReadFile(arg0); });
    t.method("ReadFile", [](TTree* a, const char * arg0, const char * arg1)->Long64_t { return a->ReadFile(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void TTree::Refresh() (" __HERE__ ")");
    // signature to use in the veto list: void TTree::Refresh()
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:571:28
    t.method("Refresh", static_cast<void (TTree::*)() >(&TTree::Refresh));

    DEBUG_MSG("Adding wrapper for void TTree::RemoveFriend(TTree *) (" __HERE__ ")");
    // signature to use in the veto list: void TTree::RemoveFriend(TTree *)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:574:28
    t.method("RemoveFriend", static_cast<void (TTree::*)(TTree *) >(&TTree::RemoveFriend));

    DEBUG_MSG("Adding wrapper for void TTree::RecursiveRemove(TObject *) (" __HERE__ ")");
    // signature to use in the veto list: void TTree::RecursiveRemove(TObject *)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:575:28
    t.method("RecursiveRemove", static_cast<void (TTree::*)(TObject *) >(&TTree::RecursiveRemove));

    DEBUG_MSG("Adding wrapper for void TTree::Reset(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TTree::Reset(Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:576:28
    t.method("Reset", static_cast<void (TTree::*)(Option_t *) >(&TTree::Reset));
    t.method("Reset", [](TTree& a)->void { a.Reset(); });
    t.method("Reset", [](TTree* a)->void { a->Reset(); });

    DEBUG_MSG("Adding wrapper for void TTree::ResetBranchAddress(TBranch *) (" __HERE__ ")");
    // signature to use in the veto list: void TTree::ResetBranchAddress(TBranch *)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:578:28
    t.method("ResetBranchAddress", static_cast<void (TTree::*)(TBranch *) >(&TTree::ResetBranchAddress));

    DEBUG_MSG("Adding wrapper for void TTree::ResetBranchAddresses() (" __HERE__ ")");
    // signature to use in the veto list: void TTree::ResetBranchAddresses()
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:579:28
    t.method("ResetBranchAddresses", static_cast<void (TTree::*)() >(&TTree::ResetBranchAddresses));

    DEBUG_MSG("Adding wrapper for Long64_t TTree::Scan(const char *, const char *, Option_t *, Long64_t, Long64_t) (" __HERE__ ")");
    // signature to use in the veto list: Long64_t TTree::Scan(const char *, const char *, Option_t *, Long64_t, Long64_t)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:580:28
    t.method("Scan", static_cast<Long64_t (TTree::*)(const char *, const char *, Option_t *, Long64_t, Long64_t) >(&TTree::Scan));
    t.method("Scan", [](TTree& a)->Long64_t { return a.Scan(); });
    t.method("Scan", [](TTree& a, const char * arg0)->Long64_t { return a.Scan(arg0); });
    t.method("Scan", [](TTree& a, const char * arg0, const char * arg1)->Long64_t { return a.Scan(arg0, arg1); });
    t.method("Scan", [](TTree& a, const char * arg0, const char * arg1, Option_t * arg2)->Long64_t { return a.Scan(arg0, arg1, arg2); });
    t.method("Scan", [](TTree& a, const char * arg0, const char * arg1, Option_t * arg2, Long64_t arg3)->Long64_t { return a.Scan(arg0, arg1, arg2, arg3); });
    t.method("Scan", [](TTree* a)->Long64_t { return a->Scan(); });
    t.method("Scan", [](TTree* a, const char * arg0)->Long64_t { return a->Scan(arg0); });
    t.method("Scan", [](TTree* a, const char * arg0, const char * arg1)->Long64_t { return a->Scan(arg0, arg1); });
    t.method("Scan", [](TTree* a, const char * arg0, const char * arg1, Option_t * arg2)->Long64_t { return a->Scan(arg0, arg1, arg2); });
    t.method("Scan", [](TTree* a, const char * arg0, const char * arg1, Option_t * arg2, Long64_t arg3)->Long64_t { return a->Scan(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for Bool_t TTree::SetAlias(const char *, const char *) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TTree::SetAlias(const char *, const char *)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:581:28
    t.method("SetAlias", static_cast<Bool_t (TTree::*)(const char *, const char *) >(&TTree::SetAlias));

    DEBUG_MSG("Adding wrapper for void TTree::SetAutoSave(Long64_t) (" __HERE__ ")");
    // signature to use in the veto list: void TTree::SetAutoSave(Long64_t)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:582:28
    t.method("SetAutoSave", static_cast<void (TTree::*)(Long64_t) >(&TTree::SetAutoSave));
    t.method("SetAutoSave", [](TTree& a)->void { a.SetAutoSave(); });
    t.method("SetAutoSave", [](TTree* a)->void { a->SetAutoSave(); });

    DEBUG_MSG("Adding wrapper for void TTree::SetAutoFlush(Long64_t) (" __HERE__ ")");
    // signature to use in the veto list: void TTree::SetAutoFlush(Long64_t)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:583:28
    t.method("SetAutoFlush", static_cast<void (TTree::*)(Long64_t) >(&TTree::SetAutoFlush));
    t.method("SetAutoFlush", [](TTree& a)->void { a.SetAutoFlush(); });
    t.method("SetAutoFlush", [](TTree* a)->void { a->SetAutoFlush(); });

    DEBUG_MSG("Adding wrapper for void TTree::SetBasketSize(const char *, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TTree::SetBasketSize(const char *, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:584:28
    t.method("SetBasketSize", static_cast<void (TTree::*)(const char *, Int_t) >(&TTree::SetBasketSize));
    t.method("SetBasketSize", [](TTree& a, const char * arg0)->void { a.SetBasketSize(arg0); });
    t.method("SetBasketSize", [](TTree* a, const char * arg0)->void { a->SetBasketSize(arg0); });

    DEBUG_MSG("Adding wrapper for Int_t TTree::SetBranchAddress(const char *, void *, TBranch **) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TTree::SetBranchAddress(const char *, void *, TBranch **)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:585:28
    t.method("SetBranchAddress", static_cast<Int_t (TTree::*)(const char *, void *, TBranch **) >(&TTree::SetBranchAddress));
    t.method("SetBranchAddress", [](TTree& a, const char * arg0, void * arg1)->Int_t { return a.SetBranchAddress(arg0, arg1); });
    t.method("SetBranchAddress", [](TTree* a, const char * arg0, void * arg1)->Int_t { return a->SetBranchAddress(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for Int_t TTree::SetBranchAddress(const char *, void *, TClass *, EDataType, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TTree::SetBranchAddress(const char *, void *, TClass *, EDataType, Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:586:28
    t.method("SetBranchAddress", static_cast<Int_t (TTree::*)(const char *, void *, TClass *, EDataType, Bool_t) >(&TTree::SetBranchAddress));

    DEBUG_MSG("Adding wrapper for Int_t TTree::SetBranchAddress(const char *, void *, TBranch **, TClass *, EDataType, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TTree::SetBranchAddress(const char *, void *, TBranch **, TClass *, EDataType, Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:587:28
    t.method("SetBranchAddress", static_cast<Int_t (TTree::*)(const char *, void *, TBranch **, TClass *, EDataType, Bool_t) >(&TTree::SetBranchAddress));

    DEBUG_MSG("Adding wrapper for void TTree::SetBranchStatus(const char *, Bool_t, UInt_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TTree::SetBranchStatus(const char *, Bool_t, UInt_t *)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:604:28
    t.method("SetBranchStatus", static_cast<void (TTree::*)(const char *, Bool_t, UInt_t *) >(&TTree::SetBranchStatus));
    t.method("SetBranchStatus", [](TTree& a, const char * arg0)->void { a.SetBranchStatus(arg0); });
    t.method("SetBranchStatus", [](TTree& a, const char * arg0, Bool_t arg1)->void { a.SetBranchStatus(arg0, arg1); });
    t.method("SetBranchStatus", [](TTree* a, const char * arg0)->void { a->SetBranchStatus(arg0); });
    t.method("SetBranchStatus", [](TTree* a, const char * arg0, Bool_t arg1)->void { a->SetBranchStatus(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void TTree::SetBranchStyle(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TTree::SetBranchStyle(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:605:28
    module_.method("TTree!SetBranchStyle", static_cast<void (*)(Int_t) >(&TTree::SetBranchStyle));
    module_.method("TTree!SetBranchStyle", []()->void { TTree::SetBranchStyle(); });

    DEBUG_MSG("Adding wrapper for Int_t TTree::SetCacheSize(Long64_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TTree::SetCacheSize(Long64_t)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:606:28
    t.method("SetCacheSize", static_cast<Int_t (TTree::*)(Long64_t) >(&TTree::SetCacheSize));
    t.method("SetCacheSize", [](TTree& a)->Int_t { return a.SetCacheSize(); });
    t.method("SetCacheSize", [](TTree* a)->Int_t { return a->SetCacheSize(); });

    DEBUG_MSG("Adding wrapper for Int_t TTree::SetCacheEntryRange(Long64_t, Long64_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TTree::SetCacheEntryRange(Long64_t, Long64_t)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:607:28
    t.method("SetCacheEntryRange", static_cast<Int_t (TTree::*)(Long64_t, Long64_t) >(&TTree::SetCacheEntryRange));

    DEBUG_MSG("Adding wrapper for void TTree::SetCacheLearnEntries(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TTree::SetCacheLearnEntries(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:608:28
    t.method("SetCacheLearnEntries", static_cast<void (TTree::*)(Int_t) >(&TTree::SetCacheLearnEntries));
    t.method("SetCacheLearnEntries", [](TTree& a)->void { a.SetCacheLearnEntries(); });
    t.method("SetCacheLearnEntries", [](TTree* a)->void { a->SetCacheLearnEntries(); });

    DEBUG_MSG("Adding wrapper for void TTree::SetChainOffset(Long64_t) (" __HERE__ ")");
    // signature to use in the veto list: void TTree::SetChainOffset(Long64_t)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:609:28
    t.method("SetChainOffset", static_cast<void (TTree::*)(Long64_t) >(&TTree::SetChainOffset));
    t.method("SetChainOffset", [](TTree& a)->void { a.SetChainOffset(); });
    t.method("SetChainOffset", [](TTree* a)->void { a->SetChainOffset(); });

    DEBUG_MSG("Adding wrapper for void TTree::SetCircular(Long64_t) (" __HERE__ ")");
    // signature to use in the veto list: void TTree::SetCircular(Long64_t)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:610:28
    t.method("SetCircular", static_cast<void (TTree::*)(Long64_t) >(&TTree::SetCircular));

    DEBUG_MSG("Adding wrapper for void TTree::SetClusterPrefetch(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TTree::SetClusterPrefetch(Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:611:28
    t.method("SetClusterPrefetch", static_cast<void (TTree::*)(Bool_t) >(&TTree::SetClusterPrefetch));

    DEBUG_MSG("Adding wrapper for void TTree::SetDebug(Int_t, Long64_t, Long64_t) (" __HERE__ ")");
    // signature to use in the veto list: void TTree::SetDebug(Int_t, Long64_t, Long64_t)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:612:28
    t.method("SetDebug", static_cast<void (TTree::*)(Int_t, Long64_t, Long64_t) >(&TTree::SetDebug));
    t.method("SetDebug", [](TTree& a)->void { a.SetDebug(); });
    t.method("SetDebug", [](TTree& a, Int_t arg0)->void { a.SetDebug(arg0); });
    t.method("SetDebug", [](TTree& a, Int_t arg0, Long64_t arg1)->void { a.SetDebug(arg0, arg1); });
    t.method("SetDebug", [](TTree* a)->void { a->SetDebug(); });
    t.method("SetDebug", [](TTree* a, Int_t arg0)->void { a->SetDebug(arg0); });
    t.method("SetDebug", [](TTree* a, Int_t arg0, Long64_t arg1)->void { a->SetDebug(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void TTree::SetDefaultEntryOffsetLen(Int_t, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TTree::SetDefaultEntryOffsetLen(Int_t, Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:613:28
    t.method("SetDefaultEntryOffsetLen", static_cast<void (TTree::*)(Int_t, Bool_t) >(&TTree::SetDefaultEntryOffsetLen));
    t.method("SetDefaultEntryOffsetLen", [](TTree& a, Int_t arg0)->void { a.SetDefaultEntryOffsetLen(arg0); });
    t.method("SetDefaultEntryOffsetLen", [](TTree* a, Int_t arg0)->void { a->SetDefaultEntryOffsetLen(arg0); });

    DEBUG_MSG("Adding wrapper for void TTree::SetDirectory(TDirectory *) (" __HERE__ ")");
    // signature to use in the veto list: void TTree::SetDirectory(TDirectory *)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:614:28
    t.method("SetDirectory", static_cast<void (TTree::*)(TDirectory *) >(&TTree::SetDirectory));

    DEBUG_MSG("Adding wrapper for Long64_t TTree::SetEntries(Long64_t) (" __HERE__ ")");
    // signature to use in the veto list: Long64_t TTree::SetEntries(Long64_t)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:615:28
    t.method("SetEntries", static_cast<Long64_t (TTree::*)(Long64_t) >(&TTree::SetEntries));
    t.method("SetEntries", [](TTree& a)->Long64_t { return a.SetEntries(); });
    t.method("SetEntries", [](TTree* a)->Long64_t { return a->SetEntries(); });

    DEBUG_MSG("Adding wrapper for void TTree::SetEstimate(Long64_t) (" __HERE__ ")");
    // signature to use in the veto list: void TTree::SetEstimate(Long64_t)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:616:28
    t.method("SetEstimate", static_cast<void (TTree::*)(Long64_t) >(&TTree::SetEstimate));
    t.method("SetEstimate", [](TTree& a)->void { a.SetEstimate(); });
    t.method("SetEstimate", [](TTree* a)->void { a->SetEstimate(); });

    DEBUG_MSG("Adding wrapper for ROOT::TIOFeatures TTree::SetIOFeatures(const ROOT::TIOFeatures &) (" __HERE__ ")");
    // signature to use in the veto list: ROOT::TIOFeatures TTree::SetIOFeatures(const ROOT::TIOFeatures &)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:617:30
    t.method("SetIOFeatures", static_cast<ROOT::TIOFeatures (TTree::*)(const ROOT::TIOFeatures &) >(&TTree::SetIOFeatures));

    DEBUG_MSG("Adding wrapper for void TTree::SetFileNumber(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TTree::SetFileNumber(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:618:28
    t.method("SetFileNumber", static_cast<void (TTree::*)(Int_t) >(&TTree::SetFileNumber));
    t.method("SetFileNumber", [](TTree& a)->void { a.SetFileNumber(); });
    t.method("SetFileNumber", [](TTree* a)->void { a->SetFileNumber(); });

    DEBUG_MSG("Adding wrapper for void TTree::SetEntryList(TEntryList *, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TTree::SetEntryList(TEntryList *, Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:620:28
    t.method("SetEntryList", static_cast<void (TTree::*)(TEntryList *, Option_t *) >(&TTree::SetEntryList));
    t.method("SetEntryList", [](TTree& a, TEntryList * arg0)->void { a.SetEntryList(arg0); });
    t.method("SetEntryList", [](TTree* a, TEntryList * arg0)->void { a->SetEntryList(arg0); });

    DEBUG_MSG("Adding wrapper for void TTree::SetImplicitMT(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TTree::SetImplicitMT(Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:621:28
    t.method("SetImplicitMT", static_cast<void (TTree::*)(Bool_t) >(&TTree::SetImplicitMT));

    DEBUG_MSG("Adding wrapper for void TTree::SetMakeClass(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TTree::SetMakeClass(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:622:28
    t.method("SetMakeClass", static_cast<void (TTree::*)(Int_t) >(&TTree::SetMakeClass));

    DEBUG_MSG("Adding wrapper for void TTree::SetMaxEntryLoop(Long64_t) (" __HERE__ ")");
    // signature to use in the veto list: void TTree::SetMaxEntryLoop(Long64_t)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:623:28
    t.method("SetMaxEntryLoop", static_cast<void (TTree::*)(Long64_t) >(&TTree::SetMaxEntryLoop));
    t.method("SetMaxEntryLoop", [](TTree& a)->void { a.SetMaxEntryLoop(); });
    t.method("SetMaxEntryLoop", [](TTree* a)->void { a->SetMaxEntryLoop(); });

    DEBUG_MSG("Adding wrapper for void TTree::SetMaxTreeSize(Long64_t) (" __HERE__ ")");
    // signature to use in the veto list: void TTree::SetMaxTreeSize(Long64_t)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:624:28
    module_.method("TTree!SetMaxTreeSize", static_cast<void (*)(Long64_t) >(&TTree::SetMaxTreeSize));
    module_.method("TTree!SetMaxTreeSize", []()->void { TTree::SetMaxTreeSize(); });

    DEBUG_MSG("Adding wrapper for void TTree::SetMaxVirtualSize(Long64_t) (" __HERE__ ")");
    // signature to use in the veto list: void TTree::SetMaxVirtualSize(Long64_t)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:625:28
    t.method("SetMaxVirtualSize", static_cast<void (TTree::*)(Long64_t) >(&TTree::SetMaxVirtualSize));
    t.method("SetMaxVirtualSize", [](TTree& a)->void { a.SetMaxVirtualSize(); });
    t.method("SetMaxVirtualSize", [](TTree* a)->void { a->SetMaxVirtualSize(); });

    DEBUG_MSG("Adding wrapper for void TTree::SetName(const char *) (" __HERE__ ")");
    // signature to use in the veto list: void TTree::SetName(const char *)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:626:28
    t.method("SetName", static_cast<void (TTree::*)(const char *) >(&TTree::SetName));

    DEBUG_MSG("Adding wrapper for void TTree::SetNotify(TObject *) (" __HERE__ ")");
    // signature to use in the veto list: void TTree::SetNotify(TObject *)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:640:28
    t.method("SetNotify", static_cast<void (TTree::*)(TObject *) >(&TTree::SetNotify));

    DEBUG_MSG("Adding wrapper for void TTree::SetObject(const char *, const char *) (" __HERE__ ")");
    // signature to use in the veto list: void TTree::SetObject(const char *, const char *)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:642:28
    t.method("SetObject", static_cast<void (TTree::*)(const char *, const char *) >(&TTree::SetObject));

    DEBUG_MSG("Adding wrapper for void TTree::SetParallelUnzip(Bool_t, Float_t) (" __HERE__ ")");
    // signature to use in the veto list: void TTree::SetParallelUnzip(Bool_t, Float_t)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:643:28
    t.method("SetParallelUnzip", static_cast<void (TTree::*)(Bool_t, Float_t) >(&TTree::SetParallelUnzip));
    t.method("SetParallelUnzip", [](TTree& a)->void { a.SetParallelUnzip(); });
    t.method("SetParallelUnzip", [](TTree& a, Bool_t arg0)->void { a.SetParallelUnzip(arg0); });
    t.method("SetParallelUnzip", [](TTree* a)->void { a->SetParallelUnzip(); });
    t.method("SetParallelUnzip", [](TTree* a, Bool_t arg0)->void { a->SetParallelUnzip(arg0); });

    DEBUG_MSG("Adding wrapper for void TTree::SetScanField(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TTree::SetScanField(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:645:28
    t.method("SetScanField", static_cast<void (TTree::*)(Int_t) >(&TTree::SetScanField));
    t.method("SetScanField", [](TTree& a)->void { a.SetScanField(); });
    t.method("SetScanField", [](TTree* a)->void { a->SetScanField(); });

    DEBUG_MSG("Adding wrapper for void TTree::SetTargetMemoryRatio(Float_t) (" __HERE__ ")");
    // signature to use in the veto list: void TTree::SetTargetMemoryRatio(Float_t)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:646:9
    t.method("SetTargetMemoryRatio", static_cast<void (TTree::*)(Float_t) >(&TTree::SetTargetMemoryRatio));

    DEBUG_MSG("Adding wrapper for void TTree::SetTimerInterval(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TTree::SetTimerInterval(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:647:28
    t.method("SetTimerInterval", static_cast<void (TTree::*)(Int_t) >(&TTree::SetTimerInterval));
    t.method("SetTimerInterval", [](TTree& a)->void { a.SetTimerInterval(); });
    t.method("SetTimerInterval", [](TTree* a)->void { a->SetTimerInterval(); });

    DEBUG_MSG("Adding wrapper for void TTree::SetWeight(Double_t, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TTree::SetWeight(Double_t, Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:649:28
    t.method("SetWeight", static_cast<void (TTree::*)(Double_t, Option_t *) >(&TTree::SetWeight));
    t.method("SetWeight", [](TTree& a)->void { a.SetWeight(); });
    t.method("SetWeight", [](TTree& a, Double_t arg0)->void { a.SetWeight(arg0); });
    t.method("SetWeight", [](TTree* a)->void { a->SetWeight(); });
    t.method("SetWeight", [](TTree* a, Double_t arg0)->void { a->SetWeight(arg0); });

    DEBUG_MSG("Adding wrapper for void TTree::SetUpdate(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TTree::SetUpdate(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:650:28
    t.method("SetUpdate", static_cast<void (TTree::*)(Int_t) >(&TTree::SetUpdate));
    t.method("SetUpdate", [](TTree& a)->void { a.SetUpdate(); });
    t.method("SetUpdate", [](TTree* a)->void { a->SetUpdate(); });

    DEBUG_MSG("Adding wrapper for void TTree::Show(Long64_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TTree::Show(Long64_t, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:651:28
    t.method("Show", static_cast<void (TTree::*)(Long64_t, Int_t) >(&TTree::Show));
    t.method("Show", [](TTree& a)->void { a.Show(); });
    t.method("Show", [](TTree& a, Long64_t arg0)->void { a.Show(arg0); });
    t.method("Show", [](TTree* a)->void { a->Show(); });
    t.method("Show", [](TTree* a, Long64_t arg0)->void { a->Show(arg0); });

    DEBUG_MSG("Adding wrapper for void TTree::StartViewer() (" __HERE__ ")");
    // signature to use in the veto list: void TTree::StartViewer()
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:652:28
    t.method("StartViewer", static_cast<void (TTree::*)() >(&TTree::StartViewer));

    DEBUG_MSG("Adding wrapper for Int_t TTree::StopCacheLearningPhase() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TTree::StopCacheLearningPhase()
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:653:28
    t.method("StopCacheLearningPhase", static_cast<Int_t (TTree::*)() >(&TTree::StopCacheLearningPhase));

    DEBUG_MSG("Adding wrapper for Int_t TTree::UnbinnedFit(const char *, const char *, const char *, Option_t *, Long64_t, Long64_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TTree::UnbinnedFit(const char *, const char *, const char *, Option_t *, Long64_t, Long64_t)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:654:28
    t.method("UnbinnedFit", static_cast<Int_t (TTree::*)(const char *, const char *, const char *, Option_t *, Long64_t, Long64_t) >(&TTree::UnbinnedFit));
    t.method("UnbinnedFit", [](TTree& a, const char * arg0, const char * arg1)->Int_t { return a.UnbinnedFit(arg0, arg1); });
    t.method("UnbinnedFit", [](TTree& a, const char * arg0, const char * arg1, const char * arg2)->Int_t { return a.UnbinnedFit(arg0, arg1, arg2); });
    t.method("UnbinnedFit", [](TTree& a, const char * arg0, const char * arg1, const char * arg2, Option_t * arg3)->Int_t { return a.UnbinnedFit(arg0, arg1, arg2, arg3); });
    t.method("UnbinnedFit", [](TTree& a, const char * arg0, const char * arg1, const char * arg2, Option_t * arg3, Long64_t arg4)->Int_t { return a.UnbinnedFit(arg0, arg1, arg2, arg3, arg4); });
    t.method("UnbinnedFit", [](TTree* a, const char * arg0, const char * arg1)->Int_t { return a->UnbinnedFit(arg0, arg1); });
    t.method("UnbinnedFit", [](TTree* a, const char * arg0, const char * arg1, const char * arg2)->Int_t { return a->UnbinnedFit(arg0, arg1, arg2); });
    t.method("UnbinnedFit", [](TTree* a, const char * arg0, const char * arg1, const char * arg2, Option_t * arg3)->Int_t { return a->UnbinnedFit(arg0, arg1, arg2, arg3); });
    t.method("UnbinnedFit", [](TTree* a, const char * arg0, const char * arg1, const char * arg2, Option_t * arg3, Long64_t arg4)->Int_t { return a->UnbinnedFit(arg0, arg1, arg2, arg3, arg4); });

    DEBUG_MSG("Adding wrapper for void TTree::UseCurrentStyle() (" __HERE__ ")");
    // signature to use in the veto list: void TTree::UseCurrentStyle()
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:655:28
    t.method("UseCurrentStyle", static_cast<void (TTree::*)() >(&TTree::UseCurrentStyle));

    DEBUG_MSG("Adding wrapper for Int_t TTree::Write(const char *, Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TTree::Write(const char *, Int_t, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:656:28
    t.method("Write", static_cast<Int_t (TTree::*)(const char *, Int_t, Int_t) >(&TTree::Write));
    t.method("Write", [](TTree& a)->Int_t { return a.Write(); });
    t.method("Write", [](TTree& a, const char * arg0)->Int_t { return a.Write(arg0); });
    t.method("Write", [](TTree& a, const char * arg0, Int_t arg1)->Int_t { return a.Write(arg0, arg1); });
    t.method("Write", [](TTree* a)->Int_t { return a->Write(); });
    t.method("Write", [](TTree* a, const char * arg0)->Int_t { return a->Write(arg0); });
    t.method("Write", [](TTree* a, const char * arg0, Int_t arg1)->Int_t { return a->Write(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for Int_t TTree::Write(const char *, Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TTree::Write(const char *, Int_t, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:657:28
    t.method("Write", static_cast<Int_t (TTree::*)(const char *, Int_t, Int_t)  const>(&TTree::Write));
    t.method("Write", [](TTree const& a)->Int_t { return a.Write(); });
    t.method("Write", [](TTree const& a, const char * arg0)->Int_t { return a.Write(arg0); });
    t.method("Write", [](TTree const& a, const char * arg0, Int_t arg1)->Int_t { return a.Write(arg0, arg1); });
    t.method("Write", [](TTree const* a)->Int_t { return a->Write(); });
    t.method("Write", [](TTree const* a, const char * arg0)->Int_t { return a->Write(arg0); });
    t.method("Write", [](TTree const* a, const char * arg0, Int_t arg1)->Int_t { return a->Write(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for Version_t TTree::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TTree::Class_Version()
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:659:4
    module_.method("TTree!Class_Version", static_cast<Version_t (*)() >(&TTree::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * TTree::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TTree::IsA()
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:659:4
    t.method("IsA", static_cast<TClass * (TTree::*)()  const>(&TTree::IsA));

    DEBUG_MSG("Adding wrapper for void TTree::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TTree::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:659:4
    t.method("StreamerNVirtual", static_cast<void (TTree::*)(TBuffer &) >(&TTree::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * TTree::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TTree::DeclFileName()
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:659:4
    module_.method("TTree!DeclFileName", []() { return (std::string)TTree::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TTree::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TTree::ImplFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:659:4
    module_.method("TTree!ImplFileLine", static_cast<int (*)() >(&TTree::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * TTree::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TTree::ImplFileName()
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:659:4
    module_.method("TTree!ImplFileName", []() { return (std::string)TTree::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TTree::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TTree::Class_Name()
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:659:4
    module_.method("TTree!Class_Name", []() { return (std::string)TTree::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TTree::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TTree::Dictionary()
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:659:4
    module_.method("TTree!Dictionary", static_cast<TClass * (*)() >(&TTree::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * TTree::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TTree::Class()
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:659:4
    module_.method("TTree!Class", static_cast<TClass * (*)() >(&TTree::Class));

    DEBUG_MSG("Adding wrapper for void TTree::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TTree::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:659:4
    t.method("Streamer", static_cast<void (TTree::*)(TBuffer &) >(&TTree::Streamer));

    DEBUG_MSG("Adding wrapper for int TTree::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TTree::DeclFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:659:4
    module_.method("TTree!DeclFileLine", static_cast<int (*)() >(&TTree::DeclFileLine));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TTree>> type_;
};
std::shared_ptr<Wrapper> newJlTTree(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTTree(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TTree::TClusterIterator> : std::false_type { };
  template<> struct DefaultConstructible<TTree::TClusterIterator> : std::false_type { };
}

// Class generating the wrapper for type TTree::TClusterIterator
// signature to use in the veto file: TTree::TClusterIterator
struct JlTTree_TClusterIterator: public Wrapper {

  JlTTree_TClusterIterator(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TTree::TClusterIterator (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:269:10
    jlcxx::TypeWrapper<TTree::TClusterIterator>  t = jlModule.add_type<TTree::TClusterIterator>("TTree!TClusterIterator");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TTree::TClusterIterator>>(new jlcxx::TypeWrapper<TTree::TClusterIterator>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;

    DEBUG_MSG("Adding wrapper for Long64_t TTree::TClusterIterator::Next() (" __HERE__ ")");
    // signature to use in the veto list: Long64_t TTree::TClusterIterator::Next()
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:295:16
    t.method("Next", static_cast<Long64_t (TTree::TClusterIterator::*)() >(&TTree::TClusterIterator::Next));

    DEBUG_MSG("Adding wrapper for Long64_t TTree::TClusterIterator::Previous() (" __HERE__ ")");
    // signature to use in the veto list: Long64_t TTree::TClusterIterator::Previous()
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:299:16
    t.method("Previous", static_cast<Long64_t (TTree::TClusterIterator::*)() >(&TTree::TClusterIterator::Previous));

    DEBUG_MSG("Adding wrapper for Long64_t TTree::TClusterIterator::GetStartEntry() (" __HERE__ ")");
    // signature to use in the veto list: Long64_t TTree::TClusterIterator::GetStartEntry()
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:302:16
    t.method("GetStartEntry", static_cast<Long64_t (TTree::TClusterIterator::*)() >(&TTree::TClusterIterator::GetStartEntry));

    DEBUG_MSG("Adding wrapper for Long64_t TTree::TClusterIterator::GetNextEntry() (" __HERE__ ")");
    // signature to use in the veto list: Long64_t TTree::TClusterIterator::GetNextEntry()
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:307:16
    t.method("GetNextEntry", static_cast<Long64_t (TTree::TClusterIterator::*)() >(&TTree::TClusterIterator::GetNextEntry));

    DEBUG_MSG("Adding wrapper for Long64_t TTree::TClusterIterator::operator()() (" __HERE__ ")");
    // signature to use in the veto list: Long64_t TTree::TClusterIterator::operator()()
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:311:16
    t.method("paren", static_cast<Long64_t (TTree::TClusterIterator::*)() >(&TTree::TClusterIterator::operator()));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TTree::TClusterIterator>> type_;
};
std::shared_ptr<Wrapper> newJlTTree_TClusterIterator(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTTree_TClusterIterator(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TDirectory> : std::false_type { };
  template<> struct DefaultConstructible<TDirectory> : std::false_type { };
template<> struct SuperType<TDirectory> { typedef TNamed type; };
}

// Class generating the wrapper for type TDirectory
// signature to use in the veto file: TDirectory
struct JlTDirectory: public Wrapper {

  JlTDirectory(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TDirectory (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TDirectory.h:45:7
    jlcxx::TypeWrapper<TDirectory>  t = jlModule.add_type<TDirectory>("TDirectory",
      jlcxx::julia_base_type<TNamed>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TDirectory>>(new jlcxx::TypeWrapper<TDirectory>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TDirectory>> type_;
};
std::shared_ptr<Wrapper> newJlTDirectory(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTDirectory(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TBranch> : std::false_type { };
  template<> struct DefaultConstructible<TBranch> : std::false_type { };
template<> struct SuperType<TBranch> { typedef TNamed type; };
}

// Class generating the wrapper for type TBranch
// signature to use in the veto file: TBranch
struct JlTBranch: public Wrapper {

  JlTBranch(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TBranch (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TBranch.h:93:7
    jlcxx::TypeWrapper<TBranch>  t = jlModule.add_type<TBranch>("TBranch",
      jlcxx::julia_base_type<TNamed>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TBranch>>(new jlcxx::TypeWrapper<TBranch>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TBranch>> type_;
};
std::shared_ptr<Wrapper> newJlTBranch(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTBranch(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TDirectoryFile> : std::false_type { };
  template<> struct DefaultConstructible<TDirectoryFile> : std::false_type { };
template<> struct SuperType<TDirectoryFile> { typedef TDirectory type; };
}

// Class generating the wrapper for type TDirectoryFile
// signature to use in the veto file: TDirectoryFile
struct JlTDirectoryFile: public Wrapper {

  JlTDirectoryFile(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TDirectoryFile (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TDirectoryFile.h:32:7
    jlcxx::TypeWrapper<TDirectoryFile>  t = jlModule.add_type<TDirectoryFile>("TDirectoryFile",
      jlcxx::julia_base_type<TDirectory>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TDirectoryFile>>(new jlcxx::TypeWrapper<TDirectoryFile>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TDirectoryFile::TDirectoryFile(const char *, const char *, Option_t *, TDirectory *) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TDirectoryFile.h:61:4
    t.constructor<const char *, const char *>(/*finalize=*/true);
    t.constructor<const char *, const char *, Option_t *>(/*finalize=*/true);
    t.constructor<const char *, const char *, Option_t *, TDirectory *>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for void TDirectoryFile::Append(TObject *, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TDirectoryFile::Append(TObject *, Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TDirectoryFile.h:64:23
    t.method("Append", static_cast<void (TDirectoryFile::*)(TObject *, Bool_t) >(&TDirectoryFile::Append));
    t.method("Append", [](TDirectoryFile& a, TObject * arg0)->void { a.Append(arg0); });
    t.method("Append", [](TDirectoryFile* a, TObject * arg0)->void { a->Append(arg0); });

    DEBUG_MSG("Adding wrapper for void TDirectoryFile::Add(TObject *, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TDirectoryFile::Add(TObject *, Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TDirectoryFile.h:65:23
    t.method("Add", static_cast<void (TDirectoryFile::*)(TObject *, Bool_t) >(&TDirectoryFile::Add));
    t.method("Add", [](TDirectoryFile& a, TObject * arg0)->void { a.Add(arg0); });
    t.method("Add", [](TDirectoryFile* a, TObject * arg0)->void { a->Add(arg0); });

    DEBUG_MSG("Adding wrapper for void TDirectoryFile::Build(TFile *, TDirectory *) (" __HERE__ ")");
    // signature to use in the veto list: void TDirectoryFile::Build(TFile *, TDirectory *)
    // defined in /home/pgras/.julia/conda/3/include/TDirectoryFile.h:68:23
    t.method("Build", static_cast<void (TDirectoryFile::*)(TFile *, TDirectory *) >(&TDirectoryFile::Build));
    t.method("Build", [](TDirectoryFile& a)->void { a.Build(); });
    t.method("Build", [](TDirectoryFile& a, TFile * arg0)->void { a.Build(arg0); });
    t.method("Build", [](TDirectoryFile* a)->void { a->Build(); });
    t.method("Build", [](TDirectoryFile* a, TFile * arg0)->void { a->Build(arg0); });

    DEBUG_MSG("Adding wrapper for TObject * TDirectoryFile::CloneObject(const TObject *, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: TObject * TDirectoryFile::CloneObject(const TObject *, Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TDirectoryFile.h:69:23
    t.method("CloneObject", static_cast<TObject * (TDirectoryFile::*)(const TObject *, Bool_t) >(&TDirectoryFile::CloneObject));
    t.method("CloneObject", [](TDirectoryFile& a, const TObject * arg0)->TObject * { return a.CloneObject(arg0); });
    t.method("CloneObject", [](TDirectoryFile* a, const TObject * arg0)->TObject * { return a->CloneObject(arg0); });

    DEBUG_MSG("Adding wrapper for void TDirectoryFile::Close(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TDirectoryFile::Close(Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TDirectoryFile.h:70:23
    t.method("Close", static_cast<void (TDirectoryFile::*)(Option_t *) >(&TDirectoryFile::Close));
    t.method("Close", [](TDirectoryFile& a)->void { a.Close(); });
    t.method("Close", [](TDirectoryFile* a)->void { a->Close(); });

    DEBUG_MSG("Adding wrapper for void TDirectoryFile::Copy(TObject &) (" __HERE__ ")");
    // signature to use in the veto list: void TDirectoryFile::Copy(TObject &)
    // defined in /home/pgras/.julia/conda/3/include/TDirectoryFile.h:71:23
    t.method("Copy", static_cast<void (TDirectoryFile::*)(TObject &)  const>(&TDirectoryFile::Copy));

    DEBUG_MSG("Adding wrapper for Bool_t TDirectoryFile::cd() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TDirectoryFile::cd()
    // defined in /home/pgras/.julia/conda/3/include/TDirectoryFile.h:72:23
    t.method("cd", static_cast<Bool_t (TDirectoryFile::*)() >(&TDirectoryFile::cd));

    DEBUG_MSG("Adding wrapper for Bool_t TDirectoryFile::cd(const char *) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TDirectoryFile::cd(const char *)
    // defined in /home/pgras/.julia/conda/3/include/TDirectoryFile.h:73:23
    t.method("cd", static_cast<Bool_t (TDirectoryFile::*)(const char *) >(&TDirectoryFile::cd));

    DEBUG_MSG("Adding wrapper for void TDirectoryFile::Delete(const char *) (" __HERE__ ")");
    // signature to use in the veto list: void TDirectoryFile::Delete(const char *)
    // defined in /home/pgras/.julia/conda/3/include/TDirectoryFile.h:74:23
    t.method("Delete", static_cast<void (TDirectoryFile::*)(const char *) >(&TDirectoryFile::Delete));
    t.method("Delete", [](TDirectoryFile& a)->void { a.Delete(); });
    t.method("Delete", [](TDirectoryFile* a)->void { a->Delete(); });

    DEBUG_MSG("Adding wrapper for void TDirectoryFile::FillBuffer(char *&) (" __HERE__ ")");
    // signature to use in the veto list: void TDirectoryFile::FillBuffer(char *&)
    // defined in /home/pgras/.julia/conda/3/include/TDirectoryFile.h:75:23
    t.method("FillBuffer", static_cast<void (TDirectoryFile::*)(char *&) >(&TDirectoryFile::FillBuffer));

    DEBUG_MSG("Adding wrapper for TObject * TDirectoryFile::FindObjectAny(const char *) (" __HERE__ ")");
    // signature to use in the veto list: TObject * TDirectoryFile::FindObjectAny(const char *)
    // defined in /home/pgras/.julia/conda/3/include/TDirectoryFile.h:78:23
    t.method("FindObjectAny", static_cast<TObject * (TDirectoryFile::*)(const char *)  const>(&TDirectoryFile::FindObjectAny));

    DEBUG_MSG("Adding wrapper for TObject * TDirectoryFile::FindObjectAnyFile(const char *) (" __HERE__ ")");
    // signature to use in the veto list: TObject * TDirectoryFile::FindObjectAnyFile(const char *)
    // defined in /home/pgras/.julia/conda/3/include/TDirectoryFile.h:79:23
    t.method("FindObjectAnyFile", static_cast<TObject * (TDirectoryFile::*)(const char *)  const>(&TDirectoryFile::FindObjectAnyFile));

    DEBUG_MSG("Adding wrapper for TObject * TDirectoryFile::Get(const char *) (" __HERE__ ")");
    // signature to use in the veto list: TObject * TDirectoryFile::Get(const char *)
    // defined in /home/pgras/.julia/conda/3/include/TDirectoryFile.h:80:23
    t.method("Get", static_cast<TObject * (TDirectoryFile::*)(const char *) >(&TDirectoryFile::Get));

    DEBUG_MSG("Adding wrapper for TDirectory * TDirectoryFile::GetDirectory(const char *, Bool_t, const char *) (" __HERE__ ")");
    // signature to use in the veto list: TDirectory * TDirectoryFile::GetDirectory(const char *, Bool_t, const char *)
    // defined in /home/pgras/.julia/conda/3/include/TDirectoryFile.h:86:24
    t.method("GetDirectory", static_cast<TDirectory * (TDirectoryFile::*)(const char *, Bool_t, const char *) >(&TDirectoryFile::GetDirectory));
    t.method("GetDirectory", [](TDirectoryFile& a, const char * arg0)->TDirectory * { return a.GetDirectory(arg0); });
    t.method("GetDirectory", [](TDirectoryFile& a, const char * arg0, Bool_t arg1)->TDirectory * { return a.GetDirectory(arg0, arg1); });
    t.method("GetDirectory", [](TDirectoryFile* a, const char * arg0)->TDirectory * { return a->GetDirectory(arg0); });
    t.method("GetDirectory", [](TDirectoryFile* a, const char * arg0, Bool_t arg1)->TDirectory * { return a->GetDirectory(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void * TDirectoryFile::GetObjectChecked(const char *, const char *) (" __HERE__ ")");
    // signature to use in the veto list: void * TDirectoryFile::GetObjectChecked(const char *, const char *)
    // defined in /home/pgras/.julia/conda/3/include/TDirectoryFile.h:87:24
    t.method("GetObjectChecked", static_cast<void * (TDirectoryFile::*)(const char *, const char *) >(&TDirectoryFile::GetObjectChecked));

    DEBUG_MSG("Adding wrapper for void * TDirectoryFile::GetObjectChecked(const char *, const TClass *) (" __HERE__ ")");
    // signature to use in the veto list: void * TDirectoryFile::GetObjectChecked(const char *, const TClass *)
    // defined in /home/pgras/.julia/conda/3/include/TDirectoryFile.h:88:24
    t.method("GetObjectChecked", static_cast<void * (TDirectoryFile::*)(const char *, const TClass *) >(&TDirectoryFile::GetObjectChecked));

    DEBUG_MSG("Adding wrapper for void * TDirectoryFile::GetObjectUnchecked(const char *) (" __HERE__ ")");
    // signature to use in the veto list: void * TDirectoryFile::GetObjectUnchecked(const char *)
    // defined in /home/pgras/.julia/conda/3/include/TDirectoryFile.h:89:24
    t.method("GetObjectUnchecked", static_cast<void * (TDirectoryFile::*)(const char *) >(&TDirectoryFile::GetObjectUnchecked));

    DEBUG_MSG("Adding wrapper for Int_t TDirectoryFile::GetBufferSize() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TDirectoryFile::GetBufferSize()
    // defined in /home/pgras/.julia/conda/3/include/TDirectoryFile.h:90:24
    t.method("GetBufferSize", static_cast<Int_t (TDirectoryFile::*)()  const>(&TDirectoryFile::GetBufferSize));

    DEBUG_MSG("Adding wrapper for const TDatime & TDirectoryFile::GetCreationDate() (" __HERE__ ")");
    // signature to use in the veto list: const TDatime & TDirectoryFile::GetCreationDate()
    // defined in /home/pgras/.julia/conda/3/include/TDirectoryFile.h:91:24
    t.method("GetCreationDate", static_cast<const TDatime & (TDirectoryFile::*)()  const>(&TDirectoryFile::GetCreationDate));

    DEBUG_MSG("Adding wrapper for TFile * TDirectoryFile::GetFile() (" __HERE__ ")");
    // signature to use in the veto list: TFile * TDirectoryFile::GetFile()
    // defined in /home/pgras/.julia/conda/3/include/TDirectoryFile.h:92:24
    t.method("GetFile", static_cast<TFile * (TDirectoryFile::*)()  const>(&TDirectoryFile::GetFile));

    DEBUG_MSG("Adding wrapper for TList * TDirectoryFile::GetListOfKeys() (" __HERE__ ")");
    // signature to use in the veto list: TList * TDirectoryFile::GetListOfKeys()
    // defined in /home/pgras/.julia/conda/3/include/TDirectoryFile.h:94:24
    t.method("GetListOfKeys", static_cast<TList * (TDirectoryFile::*)()  const>(&TDirectoryFile::GetListOfKeys));

    DEBUG_MSG("Adding wrapper for const TDatime & TDirectoryFile::GetModificationDate() (" __HERE__ ")");
    // signature to use in the veto list: const TDatime & TDirectoryFile::GetModificationDate()
    // defined in /home/pgras/.julia/conda/3/include/TDirectoryFile.h:95:24
    t.method("GetModificationDate", static_cast<const TDatime & (TDirectoryFile::*)()  const>(&TDirectoryFile::GetModificationDate));

    DEBUG_MSG("Adding wrapper for Int_t TDirectoryFile::GetNbytesKeys() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TDirectoryFile::GetNbytesKeys()
    // defined in /home/pgras/.julia/conda/3/include/TDirectoryFile.h:96:24
    t.method("GetNbytesKeys", static_cast<Int_t (TDirectoryFile::*)()  const>(&TDirectoryFile::GetNbytesKeys));

    DEBUG_MSG("Adding wrapper for Int_t TDirectoryFile::GetNkeys() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TDirectoryFile::GetNkeys()
    // defined in /home/pgras/.julia/conda/3/include/TDirectoryFile.h:97:24
    t.method("GetNkeys", static_cast<Int_t (TDirectoryFile::*)()  const>(&TDirectoryFile::GetNkeys));

    DEBUG_MSG("Adding wrapper for Long64_t TDirectoryFile::GetSeekDir() (" __HERE__ ")");
    // signature to use in the veto list: Long64_t TDirectoryFile::GetSeekDir()
    // defined in /home/pgras/.julia/conda/3/include/TDirectoryFile.h:98:24
    t.method("GetSeekDir", static_cast<Long64_t (TDirectoryFile::*)()  const>(&TDirectoryFile::GetSeekDir));

    DEBUG_MSG("Adding wrapper for Long64_t TDirectoryFile::GetSeekParent() (" __HERE__ ")");
    // signature to use in the veto list: Long64_t TDirectoryFile::GetSeekParent()
    // defined in /home/pgras/.julia/conda/3/include/TDirectoryFile.h:99:24
    t.method("GetSeekParent", static_cast<Long64_t (TDirectoryFile::*)()  const>(&TDirectoryFile::GetSeekParent));

    DEBUG_MSG("Adding wrapper for Long64_t TDirectoryFile::GetSeekKeys() (" __HERE__ ")");
    // signature to use in the veto list: Long64_t TDirectoryFile::GetSeekKeys()
    // defined in /home/pgras/.julia/conda/3/include/TDirectoryFile.h:100:24
    t.method("GetSeekKeys", static_cast<Long64_t (TDirectoryFile::*)()  const>(&TDirectoryFile::GetSeekKeys));

    DEBUG_MSG("Adding wrapper for Bool_t TDirectoryFile::IsModified() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TDirectoryFile::IsModified()
    // defined in /home/pgras/.julia/conda/3/include/TDirectoryFile.h:101:24
    t.method("IsModified", static_cast<Bool_t (TDirectoryFile::*)()  const>(&TDirectoryFile::IsModified));

    DEBUG_MSG("Adding wrapper for Bool_t TDirectoryFile::IsWritable() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TDirectoryFile::IsWritable()
    // defined in /home/pgras/.julia/conda/3/include/TDirectoryFile.h:102:24
    t.method("IsWritable", static_cast<Bool_t (TDirectoryFile::*)()  const>(&TDirectoryFile::IsWritable));

    DEBUG_MSG("Adding wrapper for void TDirectoryFile::ls(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TDirectoryFile::ls(Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TDirectoryFile.h:103:24
    t.method("ls", static_cast<void (TDirectoryFile::*)(Option_t *)  const>(&TDirectoryFile::ls));
    t.method("ls", [](TDirectoryFile const& a)->void { a.ls(); });
    t.method("ls", [](TDirectoryFile const* a)->void { a->ls(); });

    DEBUG_MSG("Adding wrapper for TDirectory * TDirectoryFile::mkdir(const char *, const char *, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: TDirectory * TDirectoryFile::mkdir(const char *, const char *, Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TDirectoryFile.h:104:24
    t.method("mkdir", static_cast<TDirectory * (TDirectoryFile::*)(const char *, const char *, Bool_t) >(&TDirectoryFile::mkdir));
    t.method("mkdir", [](TDirectoryFile& a, const char * arg0)->TDirectory * { return a.mkdir(arg0); });
    t.method("mkdir", [](TDirectoryFile& a, const char * arg0, const char * arg1)->TDirectory * { return a.mkdir(arg0, arg1); });
    t.method("mkdir", [](TDirectoryFile* a, const char * arg0)->TDirectory * { return a->mkdir(arg0); });
    t.method("mkdir", [](TDirectoryFile* a, const char * arg0, const char * arg1)->TDirectory * { return a->mkdir(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for TFile * TDirectoryFile::OpenFile(const char *, Option_t *, const char *, Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: TFile * TDirectoryFile::OpenFile(const char *, Option_t *, const char *, Int_t, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TDirectoryFile.h:105:24
    t.method("OpenFile", static_cast<TFile * (TDirectoryFile::*)(const char *, Option_t *, const char *, Int_t, Int_t) >(&TDirectoryFile::OpenFile));
    t.method("OpenFile", [](TDirectoryFile& a, const char * arg0)->TFile * { return a.OpenFile(arg0); });
    t.method("OpenFile", [](TDirectoryFile& a, const char * arg0, Option_t * arg1)->TFile * { return a.OpenFile(arg0, arg1); });
    t.method("OpenFile", [](TDirectoryFile& a, const char * arg0, Option_t * arg1, const char * arg2)->TFile * { return a.OpenFile(arg0, arg1, arg2); });
    t.method("OpenFile", [](TDirectoryFile& a, const char * arg0, Option_t * arg1, const char * arg2, Int_t arg3)->TFile * { return a.OpenFile(arg0, arg1, arg2, arg3); });
    t.method("OpenFile", [](TDirectoryFile* a, const char * arg0)->TFile * { return a->OpenFile(arg0); });
    t.method("OpenFile", [](TDirectoryFile* a, const char * arg0, Option_t * arg1)->TFile * { return a->OpenFile(arg0, arg1); });
    t.method("OpenFile", [](TDirectoryFile* a, const char * arg0, Option_t * arg1, const char * arg2)->TFile * { return a->OpenFile(arg0, arg1, arg2); });
    t.method("OpenFile", [](TDirectoryFile* a, const char * arg0, Option_t * arg1, const char * arg2, Int_t arg3)->TFile * { return a->OpenFile(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for void TDirectoryFile::Purge(Short_t) (" __HERE__ ")");
    // signature to use in the veto list: void TDirectoryFile::Purge(Short_t)
    // defined in /home/pgras/.julia/conda/3/include/TDirectoryFile.h:108:24
    t.method("Purge", static_cast<void (TDirectoryFile::*)(Short_t) >(&TDirectoryFile::Purge));
    t.method("Purge", [](TDirectoryFile& a)->void { a.Purge(); });
    t.method("Purge", [](TDirectoryFile* a)->void { a->Purge(); });

    DEBUG_MSG("Adding wrapper for void TDirectoryFile::ReadAll(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TDirectoryFile::ReadAll(Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TDirectoryFile.h:109:24
    t.method("ReadAll", static_cast<void (TDirectoryFile::*)(Option_t *) >(&TDirectoryFile::ReadAll));
    t.method("ReadAll", [](TDirectoryFile& a)->void { a.ReadAll(); });
    t.method("ReadAll", [](TDirectoryFile* a)->void { a->ReadAll(); });

    DEBUG_MSG("Adding wrapper for Int_t TDirectoryFile::ReadKeys(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TDirectoryFile::ReadKeys(Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TDirectoryFile.h:110:24
    t.method("ReadKeys", static_cast<Int_t (TDirectoryFile::*)(Bool_t) >(&TDirectoryFile::ReadKeys));
    t.method("ReadKeys", [](TDirectoryFile& a)->Int_t { return a.ReadKeys(); });
    t.method("ReadKeys", [](TDirectoryFile* a)->Int_t { return a->ReadKeys(); });

    DEBUG_MSG("Adding wrapper for Int_t TDirectoryFile::ReadTObject(TObject *, const char *) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TDirectoryFile::ReadTObject(TObject *, const char *)
    // defined in /home/pgras/.julia/conda/3/include/TDirectoryFile.h:111:24
    t.method("ReadTObject", static_cast<Int_t (TDirectoryFile::*)(TObject *, const char *) >(&TDirectoryFile::ReadTObject));

    DEBUG_MSG("Adding wrapper for void TDirectoryFile::rmdir(const char *) (" __HERE__ ")");
    // signature to use in the veto list: void TDirectoryFile::rmdir(const char *)
    // defined in /home/pgras/.julia/conda/3/include/TDirectoryFile.h:113:24
    t.method("rmdir", static_cast<void (TDirectoryFile::*)(const char *) >(&TDirectoryFile::rmdir));

    DEBUG_MSG("Adding wrapper for void TDirectoryFile::Save() (" __HERE__ ")");
    // signature to use in the veto list: void TDirectoryFile::Save()
    // defined in /home/pgras/.julia/conda/3/include/TDirectoryFile.h:114:24
    t.method("Save", static_cast<void (TDirectoryFile::*)() >(&TDirectoryFile::Save));

    DEBUG_MSG("Adding wrapper for void TDirectoryFile::SaveSelf(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TDirectoryFile::SaveSelf(Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TDirectoryFile.h:115:24
    t.method("SaveSelf", static_cast<void (TDirectoryFile::*)(Bool_t) >(&TDirectoryFile::SaveSelf));
    t.method("SaveSelf", [](TDirectoryFile& a)->void { a.SaveSelf(); });
    t.method("SaveSelf", [](TDirectoryFile* a)->void { a->SaveSelf(); });

    DEBUG_MSG("Adding wrapper for Int_t TDirectoryFile::SaveObjectAs(const TObject *, const char *, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TDirectoryFile::SaveObjectAs(const TObject *, const char *, Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TDirectoryFile.h:116:24
    t.method("SaveObjectAs", static_cast<Int_t (TDirectoryFile::*)(const TObject *, const char *, Option_t *)  const>(&TDirectoryFile::SaveObjectAs));
    t.method("SaveObjectAs", [](TDirectoryFile const& a, const TObject * arg0)->Int_t { return a.SaveObjectAs(arg0); });
    t.method("SaveObjectAs", [](TDirectoryFile const& a, const TObject * arg0, const char * arg1)->Int_t { return a.SaveObjectAs(arg0, arg1); });
    t.method("SaveObjectAs", [](TDirectoryFile const* a, const TObject * arg0)->Int_t { return a->SaveObjectAs(arg0); });
    t.method("SaveObjectAs", [](TDirectoryFile const* a, const TObject * arg0, const char * arg1)->Int_t { return a->SaveObjectAs(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void TDirectoryFile::SetBufferSize(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TDirectoryFile::SetBufferSize(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TDirectoryFile.h:117:24
    t.method("SetBufferSize", static_cast<void (TDirectoryFile::*)(Int_t) >(&TDirectoryFile::SetBufferSize));

    DEBUG_MSG("Adding wrapper for void TDirectoryFile::SetModified() (" __HERE__ ")");
    // signature to use in the veto list: void TDirectoryFile::SetModified()
    // defined in /home/pgras/.julia/conda/3/include/TDirectoryFile.h:118:24
    t.method("SetModified", static_cast<void (TDirectoryFile::*)() >(&TDirectoryFile::SetModified));

    DEBUG_MSG("Adding wrapper for void TDirectoryFile::SetSeekDir(Long64_t) (" __HERE__ ")");
    // signature to use in the veto list: void TDirectoryFile::SetSeekDir(Long64_t)
    // defined in /home/pgras/.julia/conda/3/include/TDirectoryFile.h:119:24
    t.method("SetSeekDir", static_cast<void (TDirectoryFile::*)(Long64_t) >(&TDirectoryFile::SetSeekDir));

    DEBUG_MSG("Adding wrapper for void TDirectoryFile::SetTRefAction(TObject *, TObject *) (" __HERE__ ")");
    // signature to use in the veto list: void TDirectoryFile::SetTRefAction(TObject *, TObject *)
    // defined in /home/pgras/.julia/conda/3/include/TDirectoryFile.h:120:24
    t.method("SetTRefAction", static_cast<void (TDirectoryFile::*)(TObject *, TObject *) >(&TDirectoryFile::SetTRefAction));

    DEBUG_MSG("Adding wrapper for void TDirectoryFile::SetWritable(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TDirectoryFile::SetWritable(Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TDirectoryFile.h:121:24
    t.method("SetWritable", static_cast<void (TDirectoryFile::*)(Bool_t) >(&TDirectoryFile::SetWritable));
    t.method("SetWritable", [](TDirectoryFile& a)->void { a.SetWritable(); });
    t.method("SetWritable", [](TDirectoryFile* a)->void { a->SetWritable(); });

    DEBUG_MSG("Adding wrapper for Int_t TDirectoryFile::Sizeof() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TDirectoryFile::Sizeof()
    // defined in /home/pgras/.julia/conda/3/include/TDirectoryFile.h:122:24
    t.method("Sizeof", static_cast<Int_t (TDirectoryFile::*)()  const>(&TDirectoryFile::Sizeof));

    DEBUG_MSG("Adding wrapper for Int_t TDirectoryFile::Write(const char *, Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TDirectoryFile::Write(const char *, Int_t, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TDirectoryFile.h:123:24
    t.method("Write", static_cast<Int_t (TDirectoryFile::*)(const char *, Int_t, Int_t) >(&TDirectoryFile::Write));
    t.method("Write", [](TDirectoryFile& a)->Int_t { return a.Write(); });
    t.method("Write", [](TDirectoryFile& a, const char * arg0)->Int_t { return a.Write(arg0); });
    t.method("Write", [](TDirectoryFile& a, const char * arg0, Int_t arg1)->Int_t { return a.Write(arg0, arg1); });
    t.method("Write", [](TDirectoryFile* a)->Int_t { return a->Write(); });
    t.method("Write", [](TDirectoryFile* a, const char * arg0)->Int_t { return a->Write(arg0); });
    t.method("Write", [](TDirectoryFile* a, const char * arg0, Int_t arg1)->Int_t { return a->Write(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for Int_t TDirectoryFile::Write(const char *, Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TDirectoryFile::Write(const char *, Int_t, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TDirectoryFile.h:124:24
    t.method("Write", static_cast<Int_t (TDirectoryFile::*)(const char *, Int_t, Int_t)  const>(&TDirectoryFile::Write));
    t.method("Write", [](TDirectoryFile const& a)->Int_t { return a.Write(); });
    t.method("Write", [](TDirectoryFile const& a, const char * arg0)->Int_t { return a.Write(arg0); });
    t.method("Write", [](TDirectoryFile const& a, const char * arg0, Int_t arg1)->Int_t { return a.Write(arg0, arg1); });
    t.method("Write", [](TDirectoryFile const* a)->Int_t { return a->Write(); });
    t.method("Write", [](TDirectoryFile const* a, const char * arg0)->Int_t { return a->Write(arg0); });
    t.method("Write", [](TDirectoryFile const* a, const char * arg0, Int_t arg1)->Int_t { return a->Write(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for Int_t TDirectoryFile::WriteTObject(const TObject *, const char *, Option_t *, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TDirectoryFile::WriteTObject(const TObject *, const char *, Option_t *, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TDirectoryFile.h:125:24
    t.method("WriteTObject", static_cast<Int_t (TDirectoryFile::*)(const TObject *, const char *, Option_t *, Int_t) >(&TDirectoryFile::WriteTObject));
    t.method("WriteTObject", [](TDirectoryFile& a, const TObject * arg0)->Int_t { return a.WriteTObject(arg0); });
    t.method("WriteTObject", [](TDirectoryFile& a, const TObject * arg0, const char * arg1)->Int_t { return a.WriteTObject(arg0, arg1); });
    t.method("WriteTObject", [](TDirectoryFile& a, const TObject * arg0, const char * arg1, Option_t * arg2)->Int_t { return a.WriteTObject(arg0, arg1, arg2); });
    t.method("WriteTObject", [](TDirectoryFile* a, const TObject * arg0)->Int_t { return a->WriteTObject(arg0); });
    t.method("WriteTObject", [](TDirectoryFile* a, const TObject * arg0, const char * arg1)->Int_t { return a->WriteTObject(arg0, arg1); });
    t.method("WriteTObject", [](TDirectoryFile* a, const TObject * arg0, const char * arg1, Option_t * arg2)->Int_t { return a->WriteTObject(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for Int_t TDirectoryFile::WriteObjectAny(const void *, const char *, const char *, Option_t *, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TDirectoryFile::WriteObjectAny(const void *, const char *, const char *, Option_t *, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TDirectoryFile.h:126:24
    t.method("WriteObjectAny", static_cast<Int_t (TDirectoryFile::*)(const void *, const char *, const char *, Option_t *, Int_t) >(&TDirectoryFile::WriteObjectAny));
    t.method("WriteObjectAny", [](TDirectoryFile& a, const void * arg0, const char * arg1, const char * arg2)->Int_t { return a.WriteObjectAny(arg0, arg1, arg2); });
    t.method("WriteObjectAny", [](TDirectoryFile& a, const void * arg0, const char * arg1, const char * arg2, Option_t * arg3)->Int_t { return a.WriteObjectAny(arg0, arg1, arg2, arg3); });
    t.method("WriteObjectAny", [](TDirectoryFile* a, const void * arg0, const char * arg1, const char * arg2)->Int_t { return a->WriteObjectAny(arg0, arg1, arg2); });
    t.method("WriteObjectAny", [](TDirectoryFile* a, const void * arg0, const char * arg1, const char * arg2, Option_t * arg3)->Int_t { return a->WriteObjectAny(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for Int_t TDirectoryFile::WriteObjectAny(const void *, const TClass *, const char *, Option_t *, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TDirectoryFile::WriteObjectAny(const void *, const TClass *, const char *, Option_t *, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TDirectoryFile.h:127:24
    t.method("WriteObjectAny", static_cast<Int_t (TDirectoryFile::*)(const void *, const TClass *, const char *, Option_t *, Int_t) >(&TDirectoryFile::WriteObjectAny));
    t.method("WriteObjectAny", [](TDirectoryFile& a, const void * arg0, const TClass * arg1, const char * arg2)->Int_t { return a.WriteObjectAny(arg0, arg1, arg2); });
    t.method("WriteObjectAny", [](TDirectoryFile& a, const void * arg0, const TClass * arg1, const char * arg2, Option_t * arg3)->Int_t { return a.WriteObjectAny(arg0, arg1, arg2, arg3); });
    t.method("WriteObjectAny", [](TDirectoryFile* a, const void * arg0, const TClass * arg1, const char * arg2)->Int_t { return a->WriteObjectAny(arg0, arg1, arg2); });
    t.method("WriteObjectAny", [](TDirectoryFile* a, const void * arg0, const TClass * arg1, const char * arg2, Option_t * arg3)->Int_t { return a->WriteObjectAny(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for void TDirectoryFile::WriteDirHeader() (" __HERE__ ")");
    // signature to use in the veto list: void TDirectoryFile::WriteDirHeader()
    // defined in /home/pgras/.julia/conda/3/include/TDirectoryFile.h:128:24
    t.method("WriteDirHeader", static_cast<void (TDirectoryFile::*)() >(&TDirectoryFile::WriteDirHeader));

    DEBUG_MSG("Adding wrapper for void TDirectoryFile::WriteKeys() (" __HERE__ ")");
    // signature to use in the veto list: void TDirectoryFile::WriteKeys()
    // defined in /home/pgras/.julia/conda/3/include/TDirectoryFile.h:129:24
    t.method("WriteKeys", static_cast<void (TDirectoryFile::*)() >(&TDirectoryFile::WriteKeys));

    DEBUG_MSG("Adding wrapper for Version_t TDirectoryFile::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TDirectoryFile::Class_Version()
    // defined in /home/pgras/.julia/conda/3/include/TDirectoryFile.h:131:4
    module_.method("TDirectoryFile!Class_Version", static_cast<Version_t (*)() >(&TDirectoryFile::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * TDirectoryFile::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TDirectoryFile::IsA()
    // defined in /home/pgras/.julia/conda/3/include/TDirectoryFile.h:131:4
    t.method("IsA", static_cast<TClass * (TDirectoryFile::*)()  const>(&TDirectoryFile::IsA));

    DEBUG_MSG("Adding wrapper for void TDirectoryFile::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TDirectoryFile::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TDirectoryFile.h:131:4
    t.method("StreamerNVirtual", static_cast<void (TDirectoryFile::*)(TBuffer &) >(&TDirectoryFile::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * TDirectoryFile::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TDirectoryFile::DeclFileName()
    // defined in /home/pgras/.julia/conda/3/include/TDirectoryFile.h:131:4
    module_.method("TDirectoryFile!DeclFileName", []() { return (std::string)TDirectoryFile::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TDirectoryFile::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TDirectoryFile::ImplFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TDirectoryFile.h:131:4
    module_.method("TDirectoryFile!ImplFileLine", static_cast<int (*)() >(&TDirectoryFile::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * TDirectoryFile::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TDirectoryFile::ImplFileName()
    // defined in /home/pgras/.julia/conda/3/include/TDirectoryFile.h:131:4
    module_.method("TDirectoryFile!ImplFileName", []() { return (std::string)TDirectoryFile::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TDirectoryFile::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TDirectoryFile::Class_Name()
    // defined in /home/pgras/.julia/conda/3/include/TDirectoryFile.h:131:4
    module_.method("TDirectoryFile!Class_Name", []() { return (std::string)TDirectoryFile::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TDirectoryFile::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TDirectoryFile::Dictionary()
    // defined in /home/pgras/.julia/conda/3/include/TDirectoryFile.h:131:4
    module_.method("TDirectoryFile!Dictionary", static_cast<TClass * (*)() >(&TDirectoryFile::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * TDirectoryFile::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TDirectoryFile::Class()
    // defined in /home/pgras/.julia/conda/3/include/TDirectoryFile.h:131:4
    module_.method("TDirectoryFile!Class", static_cast<TClass * (*)() >(&TDirectoryFile::Class));

    DEBUG_MSG("Adding wrapper for void TDirectoryFile::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TDirectoryFile::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TDirectoryFile.h:131:4
    t.method("Streamer", static_cast<void (TDirectoryFile::*)(TBuffer &) >(&TDirectoryFile::Streamer));

    DEBUG_MSG("Adding wrapper for int TDirectoryFile::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TDirectoryFile::DeclFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TDirectoryFile.h:131:4
    module_.method("TDirectoryFile!DeclFileLine", static_cast<int (*)() >(&TDirectoryFile::DeclFileLine));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TDirectoryFile>> type_;
};
std::shared_ptr<Wrapper> newJlTDirectoryFile(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTDirectoryFile(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TFile> : std::false_type { };
  template<> struct DefaultConstructible<TFile> : std::false_type { };
template<> struct SuperType<TFile> { typedef TDirectoryFile type; };
}

// Class generating the wrapper for type TFile
// signature to use in the veto file: TFile
struct JlTFile: public Wrapper {

  JlTFile(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TFile (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:53:7
    jlcxx::TypeWrapper<TFile>  t = jlModule.add_type<TFile>("TFile",
      jlcxx::julia_base_type<TDirectoryFile>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TFile>>(new jlcxx::TypeWrapper<TFile>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TFile::TFile(const char *, Option_t *, const char *, Int_t) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:198:4
    t.constructor<const char *>(/*finalize=*/true);
    t.constructor<const char *, Option_t *>(/*finalize=*/true);
    t.constructor<const char *, Option_t *, const char *>(/*finalize=*/true);
    t.constructor<const char *, Option_t *, const char *, Int_t>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for void TFile::Close(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TFile::Close(Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:201:24
    t.method("Close", static_cast<void (TFile::*)(Option_t *) >(&TFile::Close));
    t.method("Close", [](TFile& a)->void { a.Close(); });
    t.method("Close", [](TFile* a)->void { a->Close(); });

    DEBUG_MSG("Adding wrapper for void TFile::Copy(TObject &) (" __HERE__ ")");
    // signature to use in the veto list: void TFile::Copy(TObject &)
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:202:24
    t.method("Copy", static_cast<void (TFile::*)(TObject &)  const>(&TFile::Copy));

    DEBUG_MSG("Adding wrapper for Bool_t TFile::Cp(const char *, Bool_t, UInt_t) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TFile::Cp(const char *, Bool_t, UInt_t)
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:203:24
    t.method("Cp", static_cast<Bool_t (TFile::*)(const char *, Bool_t, UInt_t) >(&TFile::Cp));
    t.method("Cp", [](TFile& a, const char * arg0)->Bool_t { return a.Cp(arg0); });
    t.method("Cp", [](TFile& a, const char * arg0, Bool_t arg1)->Bool_t { return a.Cp(arg0, arg1); });
    t.method("Cp", [](TFile* a, const char * arg0)->Bool_t { return a->Cp(arg0); });
    t.method("Cp", [](TFile* a, const char * arg0, Bool_t arg1)->Bool_t { return a->Cp(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for TFile *& TFile::CurrentFile() (" __HERE__ ")");
    // signature to use in the veto list: TFile *& TFile::CurrentFile()
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:207:24
    module_.method("TFile!CurrentFile", static_cast<TFile *& (*)() >(&TFile::CurrentFile));

    DEBUG_MSG("Adding wrapper for void TFile::Delete(const char *) (" __HERE__ ")");
    // signature to use in the veto list: void TFile::Delete(const char *)
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:208:24
    t.method("Delete", static_cast<void (TFile::*)(const char *) >(&TFile::Delete));
    t.method("Delete", [](TFile& a)->void { a.Delete(); });
    t.method("Delete", [](TFile* a)->void { a->Delete(); });

    DEBUG_MSG("Adding wrapper for void TFile::Draw(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TFile::Draw(Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:209:24
    t.method("Draw", static_cast<void (TFile::*)(Option_t *) >(&TFile::Draw));
    t.method("Draw", [](TFile& a)->void { a.Draw(); });
    t.method("Draw", [](TFile* a)->void { a->Draw(); });

    DEBUG_MSG("Adding wrapper for void TFile::DrawMap(const char *, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TFile::DrawMap(const char *, Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:210:24
    t.method("DrawMap", static_cast<void (TFile::*)(const char *, Option_t *) >(&TFile::DrawMap));
    t.method("DrawMap", [](TFile& a)->void { a.DrawMap(); });
    t.method("DrawMap", [](TFile& a, const char * arg0)->void { a.DrawMap(arg0); });
    t.method("DrawMap", [](TFile* a)->void { a->DrawMap(); });
    t.method("DrawMap", [](TFile* a, const char * arg0)->void { a->DrawMap(arg0); });

    DEBUG_MSG("Adding wrapper for void TFile::FillBuffer(char *&) (" __HERE__ ")");
    // signature to use in the veto list: void TFile::FillBuffer(char *&)
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:211:24
    t.method("FillBuffer", static_cast<void (TFile::*)(char *&) >(&TFile::FillBuffer));

    DEBUG_MSG("Adding wrapper for void TFile::Flush() (" __HERE__ ")");
    // signature to use in the veto list: void TFile::Flush()
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:212:24
    t.method("Flush", static_cast<void (TFile::*)() >(&TFile::Flush));

    DEBUG_MSG("Adding wrapper for Long64_t TFile::GetArchiveOffset() (" __HERE__ ")");
    // signature to use in the veto list: Long64_t TFile::GetArchiveOffset()
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:214:24
    t.method("GetArchiveOffset", static_cast<Long64_t (TFile::*)()  const>(&TFile::GetArchiveOffset));

    DEBUG_MSG("Adding wrapper for Int_t TFile::GetBestBuffer() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TFile::GetBestBuffer()
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:215:24
    t.method("GetBestBuffer", static_cast<Int_t (TFile::*)()  const>(&TFile::GetBestBuffer));

    DEBUG_MSG("Adding wrapper for Int_t TFile::GetBytesToPrefetch() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TFile::GetBytesToPrefetch()
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:216:24
    t.method("GetBytesToPrefetch", static_cast<Int_t (TFile::*)()  const>(&TFile::GetBytesToPrefetch));

    DEBUG_MSG("Adding wrapper for TArrayC * TFile::GetClassIndex() (" __HERE__ ")");
    // signature to use in the veto list: TArrayC * TFile::GetClassIndex()
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:219:24
    t.method("GetClassIndex", static_cast<TArrayC * (TFile::*)()  const>(&TFile::GetClassIndex));

    DEBUG_MSG("Adding wrapper for Int_t TFile::GetCompressionAlgorithm() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TFile::GetCompressionAlgorithm()
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:220:24
    t.method("GetCompressionAlgorithm", static_cast<Int_t (TFile::*)()  const>(&TFile::GetCompressionAlgorithm));

    DEBUG_MSG("Adding wrapper for Int_t TFile::GetCompressionLevel() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TFile::GetCompressionLevel()
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:221:24
    t.method("GetCompressionLevel", static_cast<Int_t (TFile::*)()  const>(&TFile::GetCompressionLevel));

    DEBUG_MSG("Adding wrapper for Int_t TFile::GetCompressionSettings() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TFile::GetCompressionSettings()
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:222:24
    t.method("GetCompressionSettings", static_cast<Int_t (TFile::*)()  const>(&TFile::GetCompressionSettings));

    DEBUG_MSG("Adding wrapper for Float_t TFile::GetCompressionFactor() (" __HERE__ ")");
    // signature to use in the veto list: Float_t TFile::GetCompressionFactor()
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:223:24
    t.method("GetCompressionFactor", static_cast<Float_t (TFile::*)() >(&TFile::GetCompressionFactor));

    DEBUG_MSG("Adding wrapper for Long64_t TFile::GetEND() (" __HERE__ ")");
    // signature to use in the veto list: Long64_t TFile::GetEND()
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:224:24
    t.method("GetEND", static_cast<Long64_t (TFile::*)()  const>(&TFile::GetEND));

    DEBUG_MSG("Adding wrapper for Int_t TFile::GetErrno() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TFile::GetErrno()
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:225:24
    t.method("GetErrno", static_cast<Int_t (TFile::*)()  const>(&TFile::GetErrno));

    DEBUG_MSG("Adding wrapper for void TFile::ResetErrno() (" __HERE__ ")");
    // signature to use in the veto list: void TFile::ResetErrno()
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:226:24
    t.method("ResetErrno", static_cast<void (TFile::*)()  const>(&TFile::ResetErrno));

    DEBUG_MSG("Adding wrapper for Int_t TFile::GetFd() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TFile::GetFd()
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:227:24
    t.method("GetFd", static_cast<Int_t (TFile::*)()  const>(&TFile::GetFd));

    DEBUG_MSG("Adding wrapper for const TUrl * TFile::GetEndpointUrl() (" __HERE__ ")");
    // signature to use in the veto list: const TUrl * TFile::GetEndpointUrl()
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:228:24
    t.method("GetEndpointUrl", static_cast<const TUrl * (TFile::*)()  const>(&TFile::GetEndpointUrl));

    DEBUG_MSG("Adding wrapper for TObjArray * TFile::GetListOfProcessIDs() (" __HERE__ ")");
    // signature to use in the veto list: TObjArray * TFile::GetListOfProcessIDs()
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:229:24
    t.method("GetListOfProcessIDs", static_cast<TObjArray * (TFile::*)()  const>(&TFile::GetListOfProcessIDs));

    DEBUG_MSG("Adding wrapper for TList * TFile::GetListOfFree() (" __HERE__ ")");
    // signature to use in the veto list: TList * TFile::GetListOfFree()
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:230:24
    t.method("GetListOfFree", static_cast<TList * (TFile::*)()  const>(&TFile::GetListOfFree));

    DEBUG_MSG("Adding wrapper for Int_t TFile::GetNfree() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TFile::GetNfree()
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:231:24
    t.method("GetNfree", static_cast<Int_t (TFile::*)()  const>(&TFile::GetNfree));

    DEBUG_MSG("Adding wrapper for Int_t TFile::GetNProcessIDs() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TFile::GetNProcessIDs()
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:232:24
    t.method("GetNProcessIDs", static_cast<Int_t (TFile::*)()  const>(&TFile::GetNProcessIDs));

    DEBUG_MSG("Adding wrapper for Option_t * TFile::GetOption() (" __HERE__ ")");
    // signature to use in the veto list: Option_t * TFile::GetOption()
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:233:24
    t.method("GetOption", static_cast<Option_t * (TFile::*)()  const>(&TFile::GetOption));

    DEBUG_MSG("Adding wrapper for Long64_t TFile::GetBytesRead() (" __HERE__ ")");
    // signature to use in the veto list: Long64_t TFile::GetBytesRead()
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:234:24
    t.method("GetBytesRead", static_cast<Long64_t (TFile::*)()  const>(&TFile::GetBytesRead));

    DEBUG_MSG("Adding wrapper for Long64_t TFile::GetBytesReadExtra() (" __HERE__ ")");
    // signature to use in the veto list: Long64_t TFile::GetBytesReadExtra()
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:235:24
    t.method("GetBytesReadExtra", static_cast<Long64_t (TFile::*)()  const>(&TFile::GetBytesReadExtra));

    DEBUG_MSG("Adding wrapper for Long64_t TFile::GetBytesWritten() (" __HERE__ ")");
    // signature to use in the veto list: Long64_t TFile::GetBytesWritten()
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:236:24
    t.method("GetBytesWritten", static_cast<Long64_t (TFile::*)()  const>(&TFile::GetBytesWritten));

    DEBUG_MSG("Adding wrapper for Int_t TFile::GetReadCalls() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TFile::GetReadCalls()
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:237:24
    t.method("GetReadCalls", static_cast<Int_t (TFile::*)()  const>(&TFile::GetReadCalls));

    DEBUG_MSG("Adding wrapper for Int_t TFile::GetVersion() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TFile::GetVersion()
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:238:24
    t.method("GetVersion", static_cast<Int_t (TFile::*)()  const>(&TFile::GetVersion));

    DEBUG_MSG("Adding wrapper for Int_t TFile::GetRecordHeader(char *, Long64_t, Int_t, Int_t &, Int_t &, Int_t &) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TFile::GetRecordHeader(char *, Long64_t, Int_t, Int_t &, Int_t &, Int_t &)
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:239:24
    t.method("GetRecordHeader", static_cast<Int_t (TFile::*)(char *, Long64_t, Int_t, Int_t &, Int_t &, Int_t &) >(&TFile::GetRecordHeader));

    DEBUG_MSG("Adding wrapper for Int_t TFile::GetNbytesInfo() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TFile::GetNbytesInfo()
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:241:24
    t.method("GetNbytesInfo", static_cast<Int_t (TFile::*)()  const>(&TFile::GetNbytesInfo));

    DEBUG_MSG("Adding wrapper for Int_t TFile::GetNbytesFree() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TFile::GetNbytesFree()
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:242:24
    t.method("GetNbytesFree", static_cast<Int_t (TFile::*)()  const>(&TFile::GetNbytesFree));

    DEBUG_MSG("Adding wrapper for TString TFile::GetNewUrl() (" __HERE__ ")");
    // signature to use in the veto list: TString TFile::GetNewUrl()
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:243:24
    t.method("GetNewUrl", static_cast<TString (TFile::*)() >(&TFile::GetNewUrl));

    DEBUG_MSG("Adding wrapper for Long64_t TFile::GetRelOffset() (" __HERE__ ")");
    // signature to use in the veto list: Long64_t TFile::GetRelOffset()
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:244:24
    t.method("GetRelOffset", static_cast<Long64_t (TFile::*)()  const>(&TFile::GetRelOffset));

    DEBUG_MSG("Adding wrapper for Long64_t TFile::GetSeekFree() (" __HERE__ ")");
    // signature to use in the veto list: Long64_t TFile::GetSeekFree()
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:245:24
    t.method("GetSeekFree", static_cast<Long64_t (TFile::*)()  const>(&TFile::GetSeekFree));

    DEBUG_MSG("Adding wrapper for Long64_t TFile::GetSeekInfo() (" __HERE__ ")");
    // signature to use in the veto list: Long64_t TFile::GetSeekInfo()
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:246:24
    t.method("GetSeekInfo", static_cast<Long64_t (TFile::*)()  const>(&TFile::GetSeekInfo));

    DEBUG_MSG("Adding wrapper for Long64_t TFile::GetSize() (" __HERE__ ")");
    // signature to use in the veto list: Long64_t TFile::GetSize()
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:247:24
    t.method("GetSize", static_cast<Long64_t (TFile::*)()  const>(&TFile::GetSize));

    DEBUG_MSG("Adding wrapper for TList * TFile::GetStreamerInfoList() (" __HERE__ ")");
    // signature to use in the veto list: TList * TFile::GetStreamerInfoList()
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:248:24
    t.method("GetStreamerInfoList", static_cast<TList * (TFile::*)() >(&TFile::GetStreamerInfoList));

    DEBUG_MSG("Adding wrapper for const TList * TFile::GetStreamerInfoCache() (" __HERE__ ")");
    // signature to use in the veto list: const TList * TFile::GetStreamerInfoCache()
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:249:24
    t.method("GetStreamerInfoCache", static_cast<const TList * (TFile::*)() >(&TFile::GetStreamerInfoCache));

    DEBUG_MSG("Adding wrapper for void TFile::IncrementProcessIDs() (" __HERE__ ")");
    // signature to use in the veto list: void TFile::IncrementProcessIDs()
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:250:24
    t.method("IncrementProcessIDs", static_cast<void (TFile::*)() >(&TFile::IncrementProcessIDs));

    DEBUG_MSG("Adding wrapper for Bool_t TFile::IsArchive() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TFile::IsArchive()
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:251:24
    t.method("IsArchive", static_cast<Bool_t (TFile::*)()  const>(&TFile::IsArchive));

    DEBUG_MSG("Adding wrapper for Bool_t TFile::IsBinary() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TFile::IsBinary()
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:252:24
    t.method("IsBinary", static_cast<Bool_t (TFile::*)()  const>(&TFile::IsBinary));

    DEBUG_MSG("Adding wrapper for Bool_t TFile::IsRaw() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TFile::IsRaw()
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:253:24
    t.method("IsRaw", static_cast<Bool_t (TFile::*)()  const>(&TFile::IsRaw));

    DEBUG_MSG("Adding wrapper for Bool_t TFile::IsOpen() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TFile::IsOpen()
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:254:24
    t.method("IsOpen", static_cast<Bool_t (TFile::*)()  const>(&TFile::IsOpen));

    DEBUG_MSG("Adding wrapper for void TFile::ls(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TFile::ls(Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:255:24
    t.method("ls", static_cast<void (TFile::*)(Option_t *)  const>(&TFile::ls));
    t.method("ls", [](TFile const& a)->void { a.ls(); });
    t.method("ls", [](TFile const* a)->void { a->ls(); });

    DEBUG_MSG("Adding wrapper for void TFile::MakeFree(Long64_t, Long64_t) (" __HERE__ ")");
    // signature to use in the veto list: void TFile::MakeFree(Long64_t, Long64_t)
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:256:24
    t.method("MakeFree", static_cast<void (TFile::*)(Long64_t, Long64_t) >(&TFile::MakeFree));

    DEBUG_MSG("Adding wrapper for void TFile::MakeProject(const char *, const char *, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TFile::MakeProject(const char *, const char *, Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:257:24
    t.method("MakeProject", static_cast<void (TFile::*)(const char *, const char *, Option_t *) >(&TFile::MakeProject));
    t.method("MakeProject", [](TFile& a, const char * arg0)->void { a.MakeProject(arg0); });
    t.method("MakeProject", [](TFile& a, const char * arg0, const char * arg1)->void { a.MakeProject(arg0, arg1); });
    t.method("MakeProject", [](TFile* a, const char * arg0)->void { a->MakeProject(arg0); });
    t.method("MakeProject", [](TFile* a, const char * arg0, const char * arg1)->void { a->MakeProject(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void TFile::Map(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TFile::Map(Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:259:24
    t.method("Map", static_cast<void (TFile::*)(Option_t *) >(&TFile::Map));

    DEBUG_MSG("Adding wrapper for void TFile::Map() (" __HERE__ ")");
    // signature to use in the veto list: void TFile::Map()
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:260:24
    t.method("Map", static_cast<void (TFile::*)() >(&TFile::Map));

    DEBUG_MSG("Adding wrapper for Bool_t TFile::Matches(const char *) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TFile::Matches(const char *)
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:261:24
    t.method("Matches", static_cast<Bool_t (TFile::*)(const char *) >(&TFile::Matches));

    DEBUG_MSG("Adding wrapper for Bool_t TFile::MustFlush() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TFile::MustFlush()
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:262:24
    t.method("MustFlush", static_cast<Bool_t (TFile::*)()  const>(&TFile::MustFlush));

    DEBUG_MSG("Adding wrapper for void TFile::Paint(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TFile::Paint(Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:263:24
    t.method("Paint", static_cast<void (TFile::*)(Option_t *) >(&TFile::Paint));
    t.method("Paint", [](TFile& a)->void { a.Paint(); });
    t.method("Paint", [](TFile* a)->void { a->Paint(); });

    DEBUG_MSG("Adding wrapper for void TFile::Print(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TFile::Print(Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:264:24
    t.method("Print", static_cast<void (TFile::*)(Option_t *)  const>(&TFile::Print));
    t.method("Print", [](TFile const& a)->void { a.Print(); });
    t.method("Print", [](TFile const* a)->void { a->Print(); });

    DEBUG_MSG("Adding wrapper for Bool_t TFile::ReadBufferAsync(Long64_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TFile::ReadBufferAsync(Long64_t, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:265:24
    t.method("ReadBufferAsync", static_cast<Bool_t (TFile::*)(Long64_t, Int_t) >(&TFile::ReadBufferAsync));

    DEBUG_MSG("Adding wrapper for Bool_t TFile::ReadBuffer(char *, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TFile::ReadBuffer(char *, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:266:24
    t.method("ReadBuffer", static_cast<Bool_t (TFile::*)(char *, Int_t) >(&TFile::ReadBuffer));

    DEBUG_MSG("Adding wrapper for Bool_t TFile::ReadBuffer(char *, Long64_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TFile::ReadBuffer(char *, Long64_t, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:267:24
    t.method("ReadBuffer", static_cast<Bool_t (TFile::*)(char *, Long64_t, Int_t) >(&TFile::ReadBuffer));

    DEBUG_MSG("Adding wrapper for Bool_t TFile::ReadBuffers(char *, Long64_t *, Int_t *, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TFile::ReadBuffers(char *, Long64_t *, Int_t *, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:268:24
    t.method("ReadBuffers", static_cast<Bool_t (TFile::*)(char *, Long64_t *, Int_t *, Int_t) >(&TFile::ReadBuffers));

    DEBUG_MSG("Adding wrapper for void TFile::ReadFree() (" __HERE__ ")");
    // signature to use in the veto list: void TFile::ReadFree()
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:269:24
    t.method("ReadFree", static_cast<void (TFile::*)() >(&TFile::ReadFree));

    DEBUG_MSG("Adding wrapper for void TFile::ReadStreamerInfo() (" __HERE__ ")");
    // signature to use in the veto list: void TFile::ReadStreamerInfo()
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:271:24
    t.method("ReadStreamerInfo", static_cast<void (TFile::*)() >(&TFile::ReadStreamerInfo));

    DEBUG_MSG("Adding wrapper for Int_t TFile::Recover() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TFile::Recover()
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:272:24
    t.method("Recover", static_cast<Int_t (TFile::*)() >(&TFile::Recover));

    DEBUG_MSG("Adding wrapper for Int_t TFile::ReOpen(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TFile::ReOpen(Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:273:24
    t.method("ReOpen", static_cast<Int_t (TFile::*)(Option_t *) >(&TFile::ReOpen));

    DEBUG_MSG("Adding wrapper for void TFile::Seek(Long64_t, TFile::ERelativeTo) (" __HERE__ ")");
    // signature to use in the veto list: void TFile::Seek(Long64_t, TFile::ERelativeTo)
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:274:24
    t.method("Seek", static_cast<void (TFile::*)(Long64_t, TFile::ERelativeTo) >(&TFile::Seek));
    t.method("Seek", [](TFile& a, Long64_t arg0)->void { a.Seek(arg0); });
    t.method("Seek", [](TFile* a, Long64_t arg0)->void { a->Seek(arg0); });

    DEBUG_MSG("Adding wrapper for void TFile::SetCompressionAlgorithm(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TFile::SetCompressionAlgorithm(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:277:24
    t.method("SetCompressionAlgorithm", static_cast<void (TFile::*)(Int_t) >(&TFile::SetCompressionAlgorithm));
    t.method("SetCompressionAlgorithm", [](TFile& a)->void { a.SetCompressionAlgorithm(); });
    t.method("SetCompressionAlgorithm", [](TFile* a)->void { a->SetCompressionAlgorithm(); });

    DEBUG_MSG("Adding wrapper for void TFile::SetCompressionLevel(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TFile::SetCompressionLevel(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:278:24
    t.method("SetCompressionLevel", static_cast<void (TFile::*)(Int_t) >(&TFile::SetCompressionLevel));
    t.method("SetCompressionLevel", [](TFile& a)->void { a.SetCompressionLevel(); });
    t.method("SetCompressionLevel", [](TFile* a)->void { a->SetCompressionLevel(); });

    DEBUG_MSG("Adding wrapper for void TFile::SetCompressionSettings(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TFile::SetCompressionSettings(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:279:24
    t.method("SetCompressionSettings", static_cast<void (TFile::*)(Int_t) >(&TFile::SetCompressionSettings));
    t.method("SetCompressionSettings", [](TFile& a)->void { a.SetCompressionSettings(); });
    t.method("SetCompressionSettings", [](TFile* a)->void { a->SetCompressionSettings(); });

    DEBUG_MSG("Adding wrapper for void TFile::SetEND(Long64_t) (" __HERE__ ")");
    // signature to use in the veto list: void TFile::SetEND(Long64_t)
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:280:24
    t.method("SetEND", static_cast<void (TFile::*)(Long64_t) >(&TFile::SetEND));

    DEBUG_MSG("Adding wrapper for void TFile::SetOffset(Long64_t, TFile::ERelativeTo) (" __HERE__ ")");
    // signature to use in the veto list: void TFile::SetOffset(Long64_t, TFile::ERelativeTo)
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:281:24
    t.method("SetOffset", static_cast<void (TFile::*)(Long64_t, TFile::ERelativeTo) >(&TFile::SetOffset));
    t.method("SetOffset", [](TFile& a, Long64_t arg0)->void { a.SetOffset(arg0); });
    t.method("SetOffset", [](TFile* a, Long64_t arg0)->void { a->SetOffset(arg0); });

    DEBUG_MSG("Adding wrapper for void TFile::SetOption(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TFile::SetOption(Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:282:24
    t.method("SetOption", static_cast<void (TFile::*)(Option_t *) >(&TFile::SetOption));
    t.method("SetOption", [](TFile& a)->void { a.SetOption(); });
    t.method("SetOption", [](TFile* a)->void { a->SetOption(); });

    DEBUG_MSG("Adding wrapper for void TFile::SetReadCalls(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TFile::SetReadCalls(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:283:24
    t.method("SetReadCalls", static_cast<void (TFile::*)(Int_t) >(&TFile::SetReadCalls));
    t.method("SetReadCalls", [](TFile& a)->void { a.SetReadCalls(); });
    t.method("SetReadCalls", [](TFile* a)->void { a->SetReadCalls(); });

    DEBUG_MSG("Adding wrapper for void TFile::ShowStreamerInfo() (" __HERE__ ")");
    // signature to use in the veto list: void TFile::ShowStreamerInfo()
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:284:24
    t.method("ShowStreamerInfo", static_cast<void (TFile::*)() >(&TFile::ShowStreamerInfo));

    DEBUG_MSG("Adding wrapper for Int_t TFile::Sizeof() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TFile::Sizeof()
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:285:24
    t.method("Sizeof", static_cast<Int_t (TFile::*)()  const>(&TFile::Sizeof));

    DEBUG_MSG("Adding wrapper for void TFile::SumBuffer(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TFile::SumBuffer(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:286:24
    t.method("SumBuffer", static_cast<void (TFile::*)(Int_t) >(&TFile::SumBuffer));

    DEBUG_MSG("Adding wrapper for Bool_t TFile::WriteBuffer(const char *, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TFile::WriteBuffer(const char *, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:287:24
    t.method("WriteBuffer", static_cast<Bool_t (TFile::*)(const char *, Int_t) >(&TFile::WriteBuffer));

    DEBUG_MSG("Adding wrapper for Int_t TFile::Write(const char *, Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TFile::Write(const char *, Int_t, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:288:24
    t.method("Write", static_cast<Int_t (TFile::*)(const char *, Int_t, Int_t) >(&TFile::Write));
    t.method("Write", [](TFile& a)->Int_t { return a.Write(); });
    t.method("Write", [](TFile& a, const char * arg0)->Int_t { return a.Write(arg0); });
    t.method("Write", [](TFile& a, const char * arg0, Int_t arg1)->Int_t { return a.Write(arg0, arg1); });
    t.method("Write", [](TFile* a)->Int_t { return a->Write(); });
    t.method("Write", [](TFile* a, const char * arg0)->Int_t { return a->Write(arg0); });
    t.method("Write", [](TFile* a, const char * arg0, Int_t arg1)->Int_t { return a->Write(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for Int_t TFile::Write(const char *, Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TFile::Write(const char *, Int_t, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:289:24
    t.method("Write", static_cast<Int_t (TFile::*)(const char *, Int_t, Int_t)  const>(&TFile::Write));
    t.method("Write", [](TFile const& a)->Int_t { return a.Write(); });
    t.method("Write", [](TFile const& a, const char * arg0)->Int_t { return a.Write(arg0); });
    t.method("Write", [](TFile const& a, const char * arg0, Int_t arg1)->Int_t { return a.Write(arg0, arg1); });
    t.method("Write", [](TFile const* a)->Int_t { return a->Write(); });
    t.method("Write", [](TFile const* a, const char * arg0)->Int_t { return a->Write(arg0); });
    t.method("Write", [](TFile const* a, const char * arg0, Int_t arg1)->Int_t { return a->Write(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void TFile::WriteFree() (" __HERE__ ")");
    // signature to use in the veto list: void TFile::WriteFree()
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:290:24
    t.method("WriteFree", static_cast<void (TFile::*)() >(&TFile::WriteFree));

    DEBUG_MSG("Adding wrapper for void TFile::WriteHeader() (" __HERE__ ")");
    // signature to use in the veto list: void TFile::WriteHeader()
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:291:24
    t.method("WriteHeader", static_cast<void (TFile::*)() >(&TFile::WriteHeader));

    DEBUG_MSG("Adding wrapper for void TFile::WriteStreamerInfo() (" __HERE__ ")");
    // signature to use in the veto list: void TFile::WriteStreamerInfo()
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:293:24
    t.method("WriteStreamerInfo", static_cast<void (TFile::*)() >(&TFile::WriteStreamerInfo));

    DEBUG_MSG("Adding wrapper for TFileOpenHandle * TFile::AsyncOpen(const char *, Option_t *, const char *, Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: TFileOpenHandle * TFile::AsyncOpen(const char *, Option_t *, const char *, Int_t, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:296:24
    module_.method("TFile!AsyncOpen", static_cast<TFileOpenHandle * (*)(const char *, Option_t *, const char *, Int_t, Int_t) >(&TFile::AsyncOpen));
    module_.method("TFile!AsyncOpen", [](const char * arg0)->TFileOpenHandle * { return TFile::AsyncOpen(arg0); });
    module_.method("TFile!AsyncOpen", [](const char * arg0, Option_t * arg1)->TFileOpenHandle * { return TFile::AsyncOpen(arg0, arg1); });
    module_.method("TFile!AsyncOpen", [](const char * arg0, Option_t * arg1, const char * arg2)->TFileOpenHandle * { return TFile::AsyncOpen(arg0, arg1, arg2); });
    module_.method("TFile!AsyncOpen", [](const char * arg0, Option_t * arg1, const char * arg2, Int_t arg3)->TFileOpenHandle * { return TFile::AsyncOpen(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for TFile * TFile::Open(const char *, Option_t *, const char *, Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: TFile * TFile::Open(const char *, Option_t *, const char *, Int_t, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:299:24
    module_.method("TFile!Open", static_cast<TFile * (*)(const char *, Option_t *, const char *, Int_t, Int_t) >(&TFile::Open));
    module_.method("TFile!Open", [](const char * arg0)->TFile * { return TFile::Open(arg0); });
    module_.method("TFile!Open", [](const char * arg0, Option_t * arg1)->TFile * { return TFile::Open(arg0, arg1); });
    module_.method("TFile!Open", [](const char * arg0, Option_t * arg1, const char * arg2)->TFile * { return TFile::Open(arg0, arg1, arg2); });
    module_.method("TFile!Open", [](const char * arg0, Option_t * arg1, const char * arg2, Int_t arg3)->TFile * { return TFile::Open(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for TFile * TFile::Open(TFileOpenHandle *) (" __HERE__ ")");
    // signature to use in the veto list: TFile * TFile::Open(TFileOpenHandle *)
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:302:24
    module_.method("TFile!Open", static_cast<TFile * (*)(TFileOpenHandle *) >(&TFile::Open));

    DEBUG_MSG("Adding wrapper for TFile::EFileType TFile::GetType(const char *, Option_t *, TString *) (" __HERE__ ")");
    // signature to use in the veto list: TFile::EFileType TFile::GetType(const char *, Option_t *, TString *)
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:304:24
    module_.method("TFile!GetType", static_cast<TFile::EFileType (*)(const char *, Option_t *, TString *) >(&TFile::GetType));
    module_.method("TFile!GetType", [](const char * arg0)->TFile::EFileType { return TFile::GetType(arg0); });
    module_.method("TFile!GetType", [](const char * arg0, Option_t * arg1)->TFile::EFileType { return TFile::GetType(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for TFile::EAsyncOpenStatus TFile::GetAsyncOpenStatus(const char *) (" __HERE__ ")");
    // signature to use in the veto list: TFile::EAsyncOpenStatus TFile::GetAsyncOpenStatus(const char *)
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:306:28
    module_.method("TFile!GetAsyncOpenStatus", static_cast<TFile::EAsyncOpenStatus (*)(const char *) >(&TFile::GetAsyncOpenStatus));

    DEBUG_MSG("Adding wrapper for TFile::EAsyncOpenStatus TFile::GetAsyncOpenStatus(TFileOpenHandle *) (" __HERE__ ")");
    // signature to use in the veto list: TFile::EAsyncOpenStatus TFile::GetAsyncOpenStatus(TFileOpenHandle *)
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:307:28
    module_.method("TFile!GetAsyncOpenStatus", static_cast<TFile::EAsyncOpenStatus (*)(TFileOpenHandle *) >(&TFile::GetAsyncOpenStatus));

    DEBUG_MSG("Adding wrapper for const TUrl * TFile::GetEndpointUrl(const char *) (" __HERE__ ")");
    // signature to use in the veto list: const TUrl * TFile::GetEndpointUrl(const char *)
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:308:24
    module_.method("TFile!GetEndpointUrl", static_cast<const TUrl * (*)(const char *) >(&TFile::GetEndpointUrl));

    DEBUG_MSG("Adding wrapper for Long64_t TFile::GetFileBytesRead() (" __HERE__ ")");
    // signature to use in the veto list: Long64_t TFile::GetFileBytesRead()
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:310:24
    module_.method("TFile!GetFileBytesRead", static_cast<Long64_t (*)() >(&TFile::GetFileBytesRead));

    DEBUG_MSG("Adding wrapper for Long64_t TFile::GetFileBytesWritten() (" __HERE__ ")");
    // signature to use in the veto list: Long64_t TFile::GetFileBytesWritten()
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:311:24
    module_.method("TFile!GetFileBytesWritten", static_cast<Long64_t (*)() >(&TFile::GetFileBytesWritten));

    DEBUG_MSG("Adding wrapper for Int_t TFile::GetFileReadCalls() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TFile::GetFileReadCalls()
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:312:24
    module_.method("TFile!GetFileReadCalls", static_cast<Int_t (*)() >(&TFile::GetFileReadCalls));

    DEBUG_MSG("Adding wrapper for Int_t TFile::GetReadaheadSize() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TFile::GetReadaheadSize()
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:313:24
    module_.method("TFile!GetReadaheadSize", static_cast<Int_t (*)() >(&TFile::GetReadaheadSize));

    DEBUG_MSG("Adding wrapper for void TFile::SetFileBytesRead(Long64_t) (" __HERE__ ")");
    // signature to use in the veto list: void TFile::SetFileBytesRead(Long64_t)
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:315:24
    module_.method("TFile!SetFileBytesRead", static_cast<void (*)(Long64_t) >(&TFile::SetFileBytesRead));
    module_.method("TFile!SetFileBytesRead", []()->void { TFile::SetFileBytesRead(); });

    DEBUG_MSG("Adding wrapper for void TFile::SetFileBytesWritten(Long64_t) (" __HERE__ ")");
    // signature to use in the veto list: void TFile::SetFileBytesWritten(Long64_t)
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:316:24
    module_.method("TFile!SetFileBytesWritten", static_cast<void (*)(Long64_t) >(&TFile::SetFileBytesWritten));
    module_.method("TFile!SetFileBytesWritten", []()->void { TFile::SetFileBytesWritten(); });

    DEBUG_MSG("Adding wrapper for void TFile::SetFileReadCalls(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TFile::SetFileReadCalls(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:317:24
    module_.method("TFile!SetFileReadCalls", static_cast<void (*)(Int_t) >(&TFile::SetFileReadCalls));
    module_.method("TFile!SetFileReadCalls", []()->void { TFile::SetFileReadCalls(); });

    DEBUG_MSG("Adding wrapper for void TFile::SetReadaheadSize(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TFile::SetReadaheadSize(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:318:24
    module_.method("TFile!SetReadaheadSize", static_cast<void (*)(Int_t) >(&TFile::SetReadaheadSize));
    module_.method("TFile!SetReadaheadSize", []()->void { TFile::SetReadaheadSize(); });

    DEBUG_MSG("Adding wrapper for void TFile::SetReadStreamerInfo(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TFile::SetReadStreamerInfo(Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:319:24
    module_.method("TFile!SetReadStreamerInfo", static_cast<void (*)(Bool_t) >(&TFile::SetReadStreamerInfo));
    module_.method("TFile!SetReadStreamerInfo", []()->void { TFile::SetReadStreamerInfo(); });

    DEBUG_MSG("Adding wrapper for Bool_t TFile::GetReadStreamerInfo() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TFile::GetReadStreamerInfo()
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:320:24
    module_.method("TFile!GetReadStreamerInfo", static_cast<Bool_t (*)() >(&TFile::GetReadStreamerInfo));

    DEBUG_MSG("Adding wrapper for Long64_t TFile::GetFileCounter() (" __HERE__ ")");
    // signature to use in the veto list: Long64_t TFile::GetFileCounter()
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:322:24
    module_.method("TFile!GetFileCounter", static_cast<Long64_t (*)() >(&TFile::GetFileCounter));

    DEBUG_MSG("Adding wrapper for void TFile::IncrementFileCounter() (" __HERE__ ")");
    // signature to use in the veto list: void TFile::IncrementFileCounter()
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:323:24
    module_.method("TFile!IncrementFileCounter", static_cast<void (*)() >(&TFile::IncrementFileCounter));

    DEBUG_MSG("Adding wrapper for Bool_t TFile::SetCacheFileDir(ROOT::Internal::TStringView, Bool_t, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TFile::SetCacheFileDir(ROOT::Internal::TStringView, Bool_t, Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:325:24
    module_.method("TFile!SetCacheFileDir", static_cast<Bool_t (*)(ROOT::Internal::TStringView, Bool_t, Bool_t) >(&TFile::SetCacheFileDir));
    module_.method("TFile!SetCacheFileDir", [](ROOT::Internal::TStringView arg0)->Bool_t { return TFile::SetCacheFileDir(arg0); });
    module_.method("TFile!SetCacheFileDir", [](ROOT::Internal::TStringView arg0, Bool_t arg1)->Bool_t { return TFile::SetCacheFileDir(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for Bool_t TFile::SetCacheFileDir(std::string_view, Bool_t, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TFile::SetCacheFileDir(std::string_view, Bool_t, Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:328:24
    module_.method("TFile!SetCacheFileDir", [](const char * arg0)->Bool_t { return TFile::SetCacheFileDir((std::string_view)arg0); });
    module_.method("TFile!SetCacheFileDir", [](const char * arg0, Bool_t arg1)->Bool_t { return TFile::SetCacheFileDir((std::string_view)arg0, arg1); });
    module_.method("TFile!SetCacheFileDir", [](const char * arg0, Bool_t arg1, Bool_t arg2)->Bool_t { return TFile::SetCacheFileDir((std::string_view)arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for const char * TFile::GetCacheFileDir() (" __HERE__ ")");
    // signature to use in the veto list: const char * TFile::GetCacheFileDir()
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:330:24
    module_.method("TFile!GetCacheFileDir", []() { return (std::string)TFile::GetCacheFileDir(); });

    DEBUG_MSG("Adding wrapper for Bool_t TFile::ShrinkCacheFileDir(Long64_t, Long_t) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TFile::ShrinkCacheFileDir(Long64_t, Long_t)
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:331:24
    module_.method("TFile!ShrinkCacheFileDir", static_cast<Bool_t (*)(Long64_t, Long_t) >(&TFile::ShrinkCacheFileDir));
    module_.method("TFile!ShrinkCacheFileDir", [](Long64_t arg0)->Bool_t { return TFile::ShrinkCacheFileDir(arg0); });

    DEBUG_MSG("Adding wrapper for Bool_t TFile::Cp(const char *, const char *, Bool_t, UInt_t) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TFile::Cp(const char *, const char *, Bool_t, UInt_t)
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:332:24
    module_.method("TFile!Cp", static_cast<Bool_t (*)(const char *, const char *, Bool_t, UInt_t) >(&TFile::Cp));
    module_.method("TFile!Cp", [](const char * arg0, const char * arg1)->Bool_t { return TFile::Cp(arg0, arg1); });
    module_.method("TFile!Cp", [](const char * arg0, const char * arg1, Bool_t arg2)->Bool_t { return TFile::Cp(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for UInt_t TFile::SetOpenTimeout(UInt_t) (" __HERE__ ")");
    // signature to use in the veto list: UInt_t TFile::SetOpenTimeout(UInt_t)
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:335:24
    module_.method("TFile!SetOpenTimeout", static_cast<UInt_t (*)(UInt_t) >(&TFile::SetOpenTimeout));

    DEBUG_MSG("Adding wrapper for UInt_t TFile::GetOpenTimeout() (" __HERE__ ")");
    // signature to use in the veto list: UInt_t TFile::GetOpenTimeout()
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:336:24
    module_.method("TFile!GetOpenTimeout", static_cast<UInt_t (*)() >(&TFile::GetOpenTimeout));

    DEBUG_MSG("Adding wrapper for Bool_t TFile::SetOnlyStaged(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TFile::SetOnlyStaged(Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:337:24
    module_.method("TFile!SetOnlyStaged", static_cast<Bool_t (*)(Bool_t) >(&TFile::SetOnlyStaged));

    DEBUG_MSG("Adding wrapper for Bool_t TFile::GetOnlyStaged() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TFile::GetOnlyStaged()
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:338:24
    module_.method("TFile!GetOnlyStaged", static_cast<Bool_t (*)() >(&TFile::GetOnlyStaged));

    DEBUG_MSG("Adding wrapper for Version_t TFile::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TFile::Class_Version()
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:340:4
    module_.method("TFile!Class_Version", static_cast<Version_t (*)() >(&TFile::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * TFile::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TFile::IsA()
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:340:4
    t.method("IsA", static_cast<TClass * (TFile::*)()  const>(&TFile::IsA));

    DEBUG_MSG("Adding wrapper for void TFile::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TFile::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:340:4
    t.method("StreamerNVirtual", static_cast<void (TFile::*)(TBuffer &) >(&TFile::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * TFile::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TFile::DeclFileName()
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:340:4
    module_.method("TFile!DeclFileName", []() { return (std::string)TFile::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TFile::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TFile::ImplFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:340:4
    module_.method("TFile!ImplFileLine", static_cast<int (*)() >(&TFile::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * TFile::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TFile::ImplFileName()
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:340:4
    module_.method("TFile!ImplFileName", []() { return (std::string)TFile::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TFile::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TFile::Class_Name()
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:340:4
    module_.method("TFile!Class_Name", []() { return (std::string)TFile::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TFile::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TFile::Dictionary()
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:340:4
    module_.method("TFile!Dictionary", static_cast<TClass * (*)() >(&TFile::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * TFile::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TFile::Class()
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:340:4
    module_.method("TFile!Class", static_cast<TClass * (*)() >(&TFile::Class));

    DEBUG_MSG("Adding wrapper for void TFile::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TFile::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:340:4
    t.method("Streamer", static_cast<void (TFile::*)(TBuffer &) >(&TFile::Streamer));

    DEBUG_MSG("Adding wrapper for int TFile::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TFile::DeclFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:340:4
    module_.method("TFile!DeclFileLine", static_cast<int (*)() >(&TFile::DeclFileLine));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TFile>> type_;
};
std::shared_ptr<Wrapper> newJlTFile(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTFile(module));
}
